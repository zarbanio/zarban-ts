/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Vault } from '../model';
// @ts-ignore
import type { VaultEventsResponse } from '../model';
// @ts-ignore
import type { VaultsResponse } from '../model';
/**
 * VaultsApi - axios parameter creator
 * @export
 */
export const VaultsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a vault by ID
         * @param {number} id Vault ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getVaultById', 'id', id)
            const localVarPath = `/v2/vaults/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get vault events by ID
         * @param {number} id Vault ID
         * @param {GetVaultEventsByIdTypeEnum} [type] Event type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultEventsById: async (id: number, type?: GetVaultEventsByIdTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getVaultEventsById', 'id', id)
            const localVarPath = `/v2/vaults/{id}/events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get vaults by owner query
         * @param {string} [owner] Ethereum address of the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultsByOwner: async (owner?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/vaults`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VaultsApi - functional programming interface
 * @export
 */
export const VaultsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VaultsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a vault by ID
         * @param {number} id Vault ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaultById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vault>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaultById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VaultsApi.getVaultById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get vault events by ID
         * @param {number} id Vault ID
         * @param {GetVaultEventsByIdTypeEnum} [type] Event type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaultEventsById(id: number, type?: GetVaultEventsByIdTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultEventsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaultEventsById(id, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VaultsApi.getVaultEventsById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get vaults by owner query
         * @param {string} [owner] Ethereum address of the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaultsByOwner(owner?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaultsByOwner(owner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VaultsApi.getVaultsByOwner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VaultsApi - factory interface
 * @export
 */
export const VaultsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VaultsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a vault by ID
         * @param {number} id Vault ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Vault> {
            return localVarFp.getVaultById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get vault events by ID
         * @param {number} id Vault ID
         * @param {GetVaultEventsByIdTypeEnum} [type] Event type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultEventsById(id: number, type?: GetVaultEventsByIdTypeEnum, options?: RawAxiosRequestConfig): AxiosPromise<VaultEventsResponse> {
            return localVarFp.getVaultEventsById(id, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get vaults by owner query
         * @param {string} [owner] Ethereum address of the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultsByOwner(owner?: string, options?: RawAxiosRequestConfig): AxiosPromise<VaultsResponse> {
            return localVarFp.getVaultsByOwner(owner, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VaultsApi - interface
 * @export
 * @interface VaultsApi
 */
export interface VaultsApiInterface {
    /**
     * 
     * @summary Get a vault by ID
     * @param {number} id Vault ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApiInterface
     */
    getVaultById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Vault>;

    /**
     * 
     * @summary Get vault events by ID
     * @param {number} id Vault ID
     * @param {GetVaultEventsByIdTypeEnum} [type] Event type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApiInterface
     */
    getVaultEventsById(id: number, type?: GetVaultEventsByIdTypeEnum, options?: RawAxiosRequestConfig): AxiosPromise<VaultEventsResponse>;

    /**
     * 
     * @summary Get vaults by owner query
     * @param {string} [owner] Ethereum address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApiInterface
     */
    getVaultsByOwner(owner?: string, options?: RawAxiosRequestConfig): AxiosPromise<VaultsResponse>;

}

/**
 * VaultsApi - object-oriented interface
 * @export
 * @class VaultsApi
 * @extends {BaseAPI}
 */
export class VaultsApi extends BaseAPI implements VaultsApiInterface {
    /**
     * 
     * @summary Get a vault by ID
     * @param {number} id Vault ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public getVaultById(id: number, options?: RawAxiosRequestConfig) {
        return VaultsApiFp(this.configuration).getVaultById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get vault events by ID
     * @param {number} id Vault ID
     * @param {GetVaultEventsByIdTypeEnum} [type] Event type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public getVaultEventsById(id: number, type?: GetVaultEventsByIdTypeEnum, options?: RawAxiosRequestConfig) {
        return VaultsApiFp(this.configuration).getVaultEventsById(id, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get vaults by owner query
     * @param {string} [owner] Ethereum address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public getVaultsByOwner(owner?: string, options?: RawAxiosRequestConfig) {
        return VaultsApiFp(this.configuration).getVaultsByOwner(owner, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetVaultEventsByIdTypeEnum = {
    REPAY: 'repay',
    DEPOSIT: 'deposit',
    WITHDRAW: 'withdraw',
    MINT: 'mint'
} as const;
export type GetVaultEventsByIdTypeEnum = typeof GetVaultEventsByIdTypeEnum[keyof typeof GetVaultEventsByIdTypeEnum];
