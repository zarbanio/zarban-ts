/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { FormattedReserveData } from '../model';
// @ts-ignore
import type { LendingpoolBorrowTxRequest } from '../model';
// @ts-ignore
import type { LendingpoolBorrowTxResponse } from '../model';
// @ts-ignore
import type { LendingpoolDepositTxRequest } from '../model';
// @ts-ignore
import type { LendingpoolDepositTxResponse } from '../model';
// @ts-ignore
import type { LendingpoolRepayTxRequest } from '../model';
// @ts-ignore
import type { LendingpoolRepayTxResponse } from '../model';
// @ts-ignore
import type { LendingpoolUseAssetAsCollateralTxRequest } from '../model';
// @ts-ignore
import type { LendingpoolUseAssetAsCollateralTxResponse } from '../model';
// @ts-ignore
import type { LendingpoolWithdrawTxRequest } from '../model';
// @ts-ignore
import type { LendingpoolWithdrawTxResponse } from '../model';
// @ts-ignore
import type { UserBorrowsResponse } from '../model';
// @ts-ignore
import type { UserDepositsResponse } from '../model';
// @ts-ignore
import type { UserError } from '../model';
/**
 * LendingPoolApi - axios parameter creator
 * @export
 */
export const LendingPoolApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Borrow from lending pool
         * @summary Borrow from lending pool
         * @param {LendingpoolBorrowTxRequest} lendingpoolBorrowTxRequest Borrow transaction request, if amount is not provided, it will be calculated based on the token balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLendingPoolBorrow: async (lendingpoolBorrowTxRequest: LendingpoolBorrowTxRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lendingpoolBorrowTxRequest' is not null or undefined
            assertParamExists('createLendingPoolBorrow', 'lendingpoolBorrowTxRequest', lendingpoolBorrowTxRequest)
            const localVarPath = `/v2/lendingpool/tx/borrow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lendingpoolBorrowTxRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deposit to lending pool
         * @summary Deposit to lending pool
         * @param {LendingpoolDepositTxRequest} lendingpoolDepositTxRequest Deposit transaction request, if amount is not provided, it will be calculated based on the token balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLendingPoolDeposit: async (lendingpoolDepositTxRequest: LendingpoolDepositTxRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lendingpoolDepositTxRequest' is not null or undefined
            assertParamExists('createLendingPoolDeposit', 'lendingpoolDepositTxRequest', lendingpoolDepositTxRequest)
            const localVarPath = `/v2/lendingpool/tx/deposit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lendingpoolDepositTxRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Repay to lending pool
         * @summary Repay to lending pool
         * @param {LendingpoolRepayTxRequest} lendingpoolRepayTxRequest Repay transaction request, if amount is not provided, it will repay the maximum possible amount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLendingPoolRepay: async (lendingpoolRepayTxRequest: LendingpoolRepayTxRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lendingpoolRepayTxRequest' is not null or undefined
            assertParamExists('createLendingPoolRepay', 'lendingpoolRepayTxRequest', lendingpoolRepayTxRequest)
            const localVarPath = `/v2/lendingpool/tx/repay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lendingpoolRepayTxRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Withdraw from lending pool
         * @summary Withdraw from lending pool
         * @param {LendingpoolWithdrawTxRequest} lendingpoolWithdrawTxRequest Withdraw transaction request, if amount is not provided, it will be calculated based on the user account status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLendingPoolWithdraw: async (lendingpoolWithdrawTxRequest: LendingpoolWithdrawTxRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lendingpoolWithdrawTxRequest' is not null or undefined
            assertParamExists('createLendingPoolWithdraw', 'lendingpoolWithdrawTxRequest', lendingpoolWithdrawTxRequest)
            const localVarPath = `/v2/lendingpool/tx/withdraw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lendingpoolWithdrawTxRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve data of reserves
         * @summary Fetch Reserve Data By Asset
         * @param {string} [asset] The asset address in hexadecimal format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchReserveDataByAsset: async (asset?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/lendingpool/reserves`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user borrows of lendingpool
         * @summary Get user borrows of lendingpool
         * @param {string} [user] Ethereum address of the user
         * @param {string} [reserve] Ethereum address of the reserve
         * @param {number} [cursor] Cursor for pagination
         * @param {number} [limit] Limit the number of deposits returned (default is 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserBorrows: async (user?: string, reserve?: string, cursor?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/lendingpool/borrows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (reserve !== undefined) {
                localVarQueryParameter['reserve'] = reserve;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user deposits of Lendingpool
         * @summary Get user deposits of Lendingpool
         * @param {string} [user] Ethereum address of the user
         * @param {string} [reserve] Ethereum address of the reserve
         * @param {number} [cursor] Cursor for pagination
         * @param {number} [limit] Limit the number of deposits returned (default is 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDeposits: async (user?: string, reserve?: string, cursor?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/lendingpool/deposits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (reserve !== undefined) {
                localVarQueryParameter['reserve'] = reserve;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows to enable/disable a specific asset as collateral
         * @summary Enable/Disable asset as collateral
         * @param {LendingpoolUseAssetAsCollateralTxRequest} lendingpoolUseAssetAsCollateralTxRequest UseAssetAsCollateral transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLendingPoolAssetCollateral: async (lendingpoolUseAssetAsCollateralTxRequest: LendingpoolUseAssetAsCollateralTxRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lendingpoolUseAssetAsCollateralTxRequest' is not null or undefined
            assertParamExists('setLendingPoolAssetCollateral', 'lendingpoolUseAssetAsCollateralTxRequest', lendingpoolUseAssetAsCollateralTxRequest)
            const localVarPath = `/v2/lendingpool/tx/useassetascollateral`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(lendingpoolUseAssetAsCollateralTxRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LendingPoolApi - functional programming interface
 * @export
 */
export const LendingPoolApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LendingPoolApiAxiosParamCreator(configuration)
    return {
        /**
         * Borrow from lending pool
         * @summary Borrow from lending pool
         * @param {LendingpoolBorrowTxRequest} lendingpoolBorrowTxRequest Borrow transaction request, if amount is not provided, it will be calculated based on the token balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLendingPoolBorrow(lendingpoolBorrowTxRequest: LendingpoolBorrowTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LendingpoolBorrowTxResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLendingPoolBorrow(lendingpoolBorrowTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingPoolApi.createLendingPoolBorrow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deposit to lending pool
         * @summary Deposit to lending pool
         * @param {LendingpoolDepositTxRequest} lendingpoolDepositTxRequest Deposit transaction request, if amount is not provided, it will be calculated based on the token balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLendingPoolDeposit(lendingpoolDepositTxRequest: LendingpoolDepositTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LendingpoolDepositTxResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLendingPoolDeposit(lendingpoolDepositTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingPoolApi.createLendingPoolDeposit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Repay to lending pool
         * @summary Repay to lending pool
         * @param {LendingpoolRepayTxRequest} lendingpoolRepayTxRequest Repay transaction request, if amount is not provided, it will repay the maximum possible amount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLendingPoolRepay(lendingpoolRepayTxRequest: LendingpoolRepayTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LendingpoolRepayTxResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLendingPoolRepay(lendingpoolRepayTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingPoolApi.createLendingPoolRepay']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Withdraw from lending pool
         * @summary Withdraw from lending pool
         * @param {LendingpoolWithdrawTxRequest} lendingpoolWithdrawTxRequest Withdraw transaction request, if amount is not provided, it will be calculated based on the user account status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLendingPoolWithdraw(lendingpoolWithdrawTxRequest: LendingpoolWithdrawTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LendingpoolWithdrawTxResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLendingPoolWithdraw(lendingpoolWithdrawTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingPoolApi.createLendingPoolWithdraw']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve data of reserves
         * @summary Fetch Reserve Data By Asset
         * @param {string} [asset] The asset address in hexadecimal format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchReserveDataByAsset(asset?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormattedReserveData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchReserveDataByAsset(asset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingPoolApi.fetchReserveDataByAsset']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get user borrows of lendingpool
         * @summary Get user borrows of lendingpool
         * @param {string} [user] Ethereum address of the user
         * @param {string} [reserve] Ethereum address of the reserve
         * @param {number} [cursor] Cursor for pagination
         * @param {number} [limit] Limit the number of deposits returned (default is 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserBorrows(user?: string, reserve?: string, cursor?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserBorrowsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserBorrows(user, reserve, cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingPoolApi.getUserBorrows']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get user deposits of Lendingpool
         * @summary Get user deposits of Lendingpool
         * @param {string} [user] Ethereum address of the user
         * @param {string} [reserve] Ethereum address of the reserve
         * @param {number} [cursor] Cursor for pagination
         * @param {number} [limit] Limit the number of deposits returned (default is 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserDeposits(user?: string, reserve?: string, cursor?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDepositsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserDeposits(user, reserve, cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingPoolApi.getUserDeposits']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Allows to enable/disable a specific asset as collateral
         * @summary Enable/Disable asset as collateral
         * @param {LendingpoolUseAssetAsCollateralTxRequest} lendingpoolUseAssetAsCollateralTxRequest UseAssetAsCollateral transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setLendingPoolAssetCollateral(lendingpoolUseAssetAsCollateralTxRequest: LendingpoolUseAssetAsCollateralTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LendingpoolUseAssetAsCollateralTxResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setLendingPoolAssetCollateral(lendingpoolUseAssetAsCollateralTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LendingPoolApi.setLendingPoolAssetCollateral']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LendingPoolApi - factory interface
 * @export
 */
export const LendingPoolApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LendingPoolApiFp(configuration)
    return {
        /**
         * Borrow from lending pool
         * @summary Borrow from lending pool
         * @param {LendingpoolBorrowTxRequest} lendingpoolBorrowTxRequest Borrow transaction request, if amount is not provided, it will be calculated based on the token balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLendingPoolBorrow(lendingpoolBorrowTxRequest: LendingpoolBorrowTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<LendingpoolBorrowTxResponse> {
            return localVarFp.createLendingPoolBorrow(lendingpoolBorrowTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deposit to lending pool
         * @summary Deposit to lending pool
         * @param {LendingpoolDepositTxRequest} lendingpoolDepositTxRequest Deposit transaction request, if amount is not provided, it will be calculated based on the token balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLendingPoolDeposit(lendingpoolDepositTxRequest: LendingpoolDepositTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<LendingpoolDepositTxResponse> {
            return localVarFp.createLendingPoolDeposit(lendingpoolDepositTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Repay to lending pool
         * @summary Repay to lending pool
         * @param {LendingpoolRepayTxRequest} lendingpoolRepayTxRequest Repay transaction request, if amount is not provided, it will repay the maximum possible amount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLendingPoolRepay(lendingpoolRepayTxRequest: LendingpoolRepayTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<LendingpoolRepayTxResponse> {
            return localVarFp.createLendingPoolRepay(lendingpoolRepayTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Withdraw from lending pool
         * @summary Withdraw from lending pool
         * @param {LendingpoolWithdrawTxRequest} lendingpoolWithdrawTxRequest Withdraw transaction request, if amount is not provided, it will be calculated based on the user account status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLendingPoolWithdraw(lendingpoolWithdrawTxRequest: LendingpoolWithdrawTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<LendingpoolWithdrawTxResponse> {
            return localVarFp.createLendingPoolWithdraw(lendingpoolWithdrawTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve data of reserves
         * @summary Fetch Reserve Data By Asset
         * @param {string} [asset] The asset address in hexadecimal format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchReserveDataByAsset(asset?: string, options?: RawAxiosRequestConfig): AxiosPromise<FormattedReserveData> {
            return localVarFp.fetchReserveDataByAsset(asset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user borrows of lendingpool
         * @summary Get user borrows of lendingpool
         * @param {string} [user] Ethereum address of the user
         * @param {string} [reserve] Ethereum address of the reserve
         * @param {number} [cursor] Cursor for pagination
         * @param {number} [limit] Limit the number of deposits returned (default is 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserBorrows(user?: string, reserve?: string, cursor?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<UserBorrowsResponse> {
            return localVarFp.getUserBorrows(user, reserve, cursor, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user deposits of Lendingpool
         * @summary Get user deposits of Lendingpool
         * @param {string} [user] Ethereum address of the user
         * @param {string} [reserve] Ethereum address of the reserve
         * @param {number} [cursor] Cursor for pagination
         * @param {number} [limit] Limit the number of deposits returned (default is 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDeposits(user?: string, reserve?: string, cursor?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<UserDepositsResponse> {
            return localVarFp.getUserDeposits(user, reserve, cursor, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows to enable/disable a specific asset as collateral
         * @summary Enable/Disable asset as collateral
         * @param {LendingpoolUseAssetAsCollateralTxRequest} lendingpoolUseAssetAsCollateralTxRequest UseAssetAsCollateral transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLendingPoolAssetCollateral(lendingpoolUseAssetAsCollateralTxRequest: LendingpoolUseAssetAsCollateralTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<LendingpoolUseAssetAsCollateralTxResponse> {
            return localVarFp.setLendingPoolAssetCollateral(lendingpoolUseAssetAsCollateralTxRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LendingPoolApi - interface
 * @export
 * @interface LendingPoolApi
 */
export interface LendingPoolApiInterface {
    /**
     * Borrow from lending pool
     * @summary Borrow from lending pool
     * @param {LendingpoolBorrowTxRequest} lendingpoolBorrowTxRequest Borrow transaction request, if amount is not provided, it will be calculated based on the token balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApiInterface
     */
    createLendingPoolBorrow(lendingpoolBorrowTxRequest: LendingpoolBorrowTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<LendingpoolBorrowTxResponse>;

    /**
     * Deposit to lending pool
     * @summary Deposit to lending pool
     * @param {LendingpoolDepositTxRequest} lendingpoolDepositTxRequest Deposit transaction request, if amount is not provided, it will be calculated based on the token balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApiInterface
     */
    createLendingPoolDeposit(lendingpoolDepositTxRequest: LendingpoolDepositTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<LendingpoolDepositTxResponse>;

    /**
     * Repay to lending pool
     * @summary Repay to lending pool
     * @param {LendingpoolRepayTxRequest} lendingpoolRepayTxRequest Repay transaction request, if amount is not provided, it will repay the maximum possible amount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApiInterface
     */
    createLendingPoolRepay(lendingpoolRepayTxRequest: LendingpoolRepayTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<LendingpoolRepayTxResponse>;

    /**
     * Withdraw from lending pool
     * @summary Withdraw from lending pool
     * @param {LendingpoolWithdrawTxRequest} lendingpoolWithdrawTxRequest Withdraw transaction request, if amount is not provided, it will be calculated based on the user account status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApiInterface
     */
    createLendingPoolWithdraw(lendingpoolWithdrawTxRequest: LendingpoolWithdrawTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<LendingpoolWithdrawTxResponse>;

    /**
     * Retrieve data of reserves
     * @summary Fetch Reserve Data By Asset
     * @param {string} [asset] The asset address in hexadecimal format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApiInterface
     */
    fetchReserveDataByAsset(asset?: string, options?: RawAxiosRequestConfig): AxiosPromise<FormattedReserveData>;

    /**
     * Get user borrows of lendingpool
     * @summary Get user borrows of lendingpool
     * @param {string} [user] Ethereum address of the user
     * @param {string} [reserve] Ethereum address of the reserve
     * @param {number} [cursor] Cursor for pagination
     * @param {number} [limit] Limit the number of deposits returned (default is 50)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApiInterface
     */
    getUserBorrows(user?: string, reserve?: string, cursor?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<UserBorrowsResponse>;

    /**
     * Get user deposits of Lendingpool
     * @summary Get user deposits of Lendingpool
     * @param {string} [user] Ethereum address of the user
     * @param {string} [reserve] Ethereum address of the reserve
     * @param {number} [cursor] Cursor for pagination
     * @param {number} [limit] Limit the number of deposits returned (default is 50)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApiInterface
     */
    getUserDeposits(user?: string, reserve?: string, cursor?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<UserDepositsResponse>;

    /**
     * Allows to enable/disable a specific asset as collateral
     * @summary Enable/Disable asset as collateral
     * @param {LendingpoolUseAssetAsCollateralTxRequest} lendingpoolUseAssetAsCollateralTxRequest UseAssetAsCollateral transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApiInterface
     */
    setLendingPoolAssetCollateral(lendingpoolUseAssetAsCollateralTxRequest: LendingpoolUseAssetAsCollateralTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<LendingpoolUseAssetAsCollateralTxResponse>;

}

/**
 * LendingPoolApi - object-oriented interface
 * @export
 * @class LendingPoolApi
 * @extends {BaseAPI}
 */
export class LendingPoolApi extends BaseAPI implements LendingPoolApiInterface {
    /**
     * Borrow from lending pool
     * @summary Borrow from lending pool
     * @param {LendingpoolBorrowTxRequest} lendingpoolBorrowTxRequest Borrow transaction request, if amount is not provided, it will be calculated based on the token balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApi
     */
    public createLendingPoolBorrow(lendingpoolBorrowTxRequest: LendingpoolBorrowTxRequest, options?: RawAxiosRequestConfig) {
        return LendingPoolApiFp(this.configuration).createLendingPoolBorrow(lendingpoolBorrowTxRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deposit to lending pool
     * @summary Deposit to lending pool
     * @param {LendingpoolDepositTxRequest} lendingpoolDepositTxRequest Deposit transaction request, if amount is not provided, it will be calculated based on the token balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApi
     */
    public createLendingPoolDeposit(lendingpoolDepositTxRequest: LendingpoolDepositTxRequest, options?: RawAxiosRequestConfig) {
        return LendingPoolApiFp(this.configuration).createLendingPoolDeposit(lendingpoolDepositTxRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Repay to lending pool
     * @summary Repay to lending pool
     * @param {LendingpoolRepayTxRequest} lendingpoolRepayTxRequest Repay transaction request, if amount is not provided, it will repay the maximum possible amount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApi
     */
    public createLendingPoolRepay(lendingpoolRepayTxRequest: LendingpoolRepayTxRequest, options?: RawAxiosRequestConfig) {
        return LendingPoolApiFp(this.configuration).createLendingPoolRepay(lendingpoolRepayTxRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Withdraw from lending pool
     * @summary Withdraw from lending pool
     * @param {LendingpoolWithdrawTxRequest} lendingpoolWithdrawTxRequest Withdraw transaction request, if amount is not provided, it will be calculated based on the user account status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApi
     */
    public createLendingPoolWithdraw(lendingpoolWithdrawTxRequest: LendingpoolWithdrawTxRequest, options?: RawAxiosRequestConfig) {
        return LendingPoolApiFp(this.configuration).createLendingPoolWithdraw(lendingpoolWithdrawTxRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve data of reserves
     * @summary Fetch Reserve Data By Asset
     * @param {string} [asset] The asset address in hexadecimal format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApi
     */
    public fetchReserveDataByAsset(asset?: string, options?: RawAxiosRequestConfig) {
        return LendingPoolApiFp(this.configuration).fetchReserveDataByAsset(asset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user borrows of lendingpool
     * @summary Get user borrows of lendingpool
     * @param {string} [user] Ethereum address of the user
     * @param {string} [reserve] Ethereum address of the reserve
     * @param {number} [cursor] Cursor for pagination
     * @param {number} [limit] Limit the number of deposits returned (default is 50)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApi
     */
    public getUserBorrows(user?: string, reserve?: string, cursor?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return LendingPoolApiFp(this.configuration).getUserBorrows(user, reserve, cursor, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user deposits of Lendingpool
     * @summary Get user deposits of Lendingpool
     * @param {string} [user] Ethereum address of the user
     * @param {string} [reserve] Ethereum address of the reserve
     * @param {number} [cursor] Cursor for pagination
     * @param {number} [limit] Limit the number of deposits returned (default is 50)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApi
     */
    public getUserDeposits(user?: string, reserve?: string, cursor?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return LendingPoolApiFp(this.configuration).getUserDeposits(user, reserve, cursor, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows to enable/disable a specific asset as collateral
     * @summary Enable/Disable asset as collateral
     * @param {LendingpoolUseAssetAsCollateralTxRequest} lendingpoolUseAssetAsCollateralTxRequest UseAssetAsCollateral transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApi
     */
    public setLendingPoolAssetCollateral(lendingpoolUseAssetAsCollateralTxRequest: LendingpoolUseAssetAsCollateralTxRequest, options?: RawAxiosRequestConfig) {
        return LendingPoolApiFp(this.configuration).setLendingPoolAssetCollateral(lendingpoolUseAssetAsCollateralTxRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

