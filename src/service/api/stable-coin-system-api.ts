/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ChainActivity } from '../model';
// @ts-ignore
import type { Ilk } from '../model';
// @ts-ignore
import type { IlksResponse } from '../model';
// @ts-ignore
import type { StablecoinSystemBarkTxRequest } from '../model';
// @ts-ignore
import type { StablecoinSystemCreateVaultTxRequest } from '../model';
// @ts-ignore
import type { StablecoinSystemDepositCollateralTxRequest } from '../model';
// @ts-ignore
import type { StablecoinSystemGemexitTxRequest } from '../model';
// @ts-ignore
import type { StablecoinSystemMintZarTxRequest } from '../model';
// @ts-ignore
import type { StablecoinSystemRedoTxRequest } from '../model';
// @ts-ignore
import type { StablecoinSystemRepayZarTxRequest } from '../model';
// @ts-ignore
import type { StablecoinSystemTakeTxRequest } from '../model';
// @ts-ignore
import type { StablecoinSystemWithdrawCollateralTxRequest } from '../model';
// @ts-ignore
import type { StablecoinSystemZarexitTxRequest } from '../model';
// @ts-ignore
import type { StablecoinSystemZarjoinTxRequest } from '../model';
// @ts-ignore
import type { Stats } from '../model';
// @ts-ignore
import type { Vault } from '../model';
// @ts-ignore
import type { VaultEventsResponse } from '../model';
// @ts-ignore
import type { VaultsResponse } from '../model';
/**
 * StableCoinSystemApi - axios parameter creator
 * @export
 */
export const StableCoinSystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * approve and join ZAR token into Vat contract
         * @summary approve and join ZAR token into Vat contract
         * @param {StablecoinSystemZarjoinTxRequest} stablecoinSystemZarjoinTxRequest Approve and join Zar token into Vat contract transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveAndJoinZarTransaction: async (stablecoinSystemZarjoinTxRequest: StablecoinSystemZarjoinTxRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stablecoinSystemZarjoinTxRequest' is not null or undefined
            assertParamExists('approveAndJoinZarTransaction', 'stablecoinSystemZarjoinTxRequest', stablecoinSystemZarjoinTxRequest)
            const localVarPath = `/v2/stablecoinsystem/auctions/tx/zarjoin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stablecoinSystemZarjoinTxRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create vault
         * @summary Create vault
         * @param {StablecoinSystemCreateVaultTxRequest} stablecoinSystemCreateVaultTxRequest Create vault transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStableCoinVault: async (stablecoinSystemCreateVaultTxRequest: StablecoinSystemCreateVaultTxRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stablecoinSystemCreateVaultTxRequest' is not null or undefined
            assertParamExists('createStableCoinVault', 'stablecoinSystemCreateVaultTxRequest', stablecoinSystemCreateVaultTxRequest)
            const localVarPath = `/v2/stablecoinsystem/tx/createvault`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stablecoinSystemCreateVaultTxRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deposit collateral
         * @summary Deposit collateral
         * @param {StablecoinSystemDepositCollateralTxRequest} stablecoinSystemDepositCollateralTxRequest Deposit collateral transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositStableCoinCollateral: async (stablecoinSystemDepositCollateralTxRequest: StablecoinSystemDepositCollateralTxRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stablecoinSystemDepositCollateralTxRequest' is not null or undefined
            assertParamExists('depositStableCoinCollateral', 'stablecoinSystemDepositCollateralTxRequest', stablecoinSystemDepositCollateralTxRequest)
            const localVarPath = `/v2/stablecoinsystem/tx/depositcollateral`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stablecoinSystemDepositCollateralTxRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * exit Gem token (which can be used as collateral) from Vat contract
         * @summary exit Gem token (which can be used as collateral) from Vat contract
         * @param {StablecoinSystemGemexitTxRequest} stablecoinSystemGemexitTxRequest exit Zar token from Vat contract transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exitGemTransaction: async (stablecoinSystemGemexitTxRequest: StablecoinSystemGemexitTxRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stablecoinSystemGemexitTxRequest' is not null or undefined
            assertParamExists('exitGemTransaction', 'stablecoinSystemGemexitTxRequest', stablecoinSystemGemexitTxRequest)
            const localVarPath = `/v2/stablecoinsystem/auctions/tx/gemexit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stablecoinSystemGemexitTxRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * exit ZAR token from Vat contract
         * @summary exit ZAR token from Vat contract
         * @param {StablecoinSystemZarexitTxRequest} stablecoinSystemZarexitTxRequest exit Zar token from Vat contract transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exitZarTransaction: async (stablecoinSystemZarexitTxRequest: StablecoinSystemZarexitTxRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stablecoinSystemZarexitTxRequest' is not null or undefined
            assertParamExists('exitZarTransaction', 'stablecoinSystemZarexitTxRequest', stablecoinSystemZarexitTxRequest)
            const localVarPath = `/v2/stablecoinsystem/auctions/tx/zarexit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stablecoinSystemZarexitTxRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all available ilks.
         * @summary Get all Ilks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllIlks: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/ilks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get collector data
         * @summary Get collector data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectorData: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an Ilk by providing its name.
         * @summary Get Ilk by name
         * @param {string} name Name of the ILK
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIlkByName: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getIlkByName', 'name', name)
            const localVarPath = `/v2/ilks/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a vault by ID
         * @param {number} id Vault ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getVaultById', 'id', id)
            const localVarPath = `/v2/vaults/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get vault events by ID
         * @param {number} id Vault ID
         * @param {GetVaultEventsByIdTypeEnum} [type] Event type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultEventsById: async (id: number, type?: GetVaultEventsByIdTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getVaultEventsById', 'id', id)
            const localVarPath = `/v2/vaults/{id}/events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get vaults by owner query
         * @param {string} [owner] Ethereum address of the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultsByOwner: async (owner?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/vaults`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * liquidate a vault
         * @summary liquidate a vault
         * @param {StablecoinSystemBarkTxRequest} stablecoinSystemBarkTxRequest Liquidate a Vault transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liquidateVaultTransaction: async (stablecoinSystemBarkTxRequest: StablecoinSystemBarkTxRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stablecoinSystemBarkTxRequest' is not null or undefined
            assertParamExists('liquidateVaultTransaction', 'stablecoinSystemBarkTxRequest', stablecoinSystemBarkTxRequest)
            const localVarPath = `/v2/stablecoinsystem/tx/bark`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stablecoinSystemBarkTxRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mint ZAR
         * @summary Mint ZAR
         * @param {StablecoinSystemMintZarTxRequest} stablecoinSystemMintZarTxRequest Mint ZAR transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintZarTransaction: async (stablecoinSystemMintZarTxRequest: StablecoinSystemMintZarTxRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stablecoinSystemMintZarTxRequest' is not null or undefined
            assertParamExists('mintZarTransaction', 'stablecoinSystemMintZarTxRequest', stablecoinSystemMintZarTxRequest)
            const localVarPath = `/v2/stablecoinsystem/tx/mintzar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stablecoinSystemMintZarTxRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Repay ZAR
         * @summary Repay ZAR
         * @param {StablecoinSystemRepayZarTxRequest} stablecoinSystemRepayZarTxRequest Repay ZAR transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repayZarTransaction: async (stablecoinSystemRepayZarTxRequest: StablecoinSystemRepayZarTxRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stablecoinSystemRepayZarTxRequest' is not null or undefined
            assertParamExists('repayZarTransaction', 'stablecoinSystemRepayZarTxRequest', stablecoinSystemRepayZarTxRequest)
            const localVarPath = `/v2/stablecoinsystem/tx/repayzar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stablecoinSystemRepayZarTxRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * reset a auction
         * @summary reset a auction
         * @param {StablecoinSystemRedoTxRequest} stablecoinSystemRedoTxRequest Reset a Auction transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetAuctionTransaction: async (stablecoinSystemRedoTxRequest: StablecoinSystemRedoTxRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stablecoinSystemRedoTxRequest' is not null or undefined
            assertParamExists('resetAuctionTransaction', 'stablecoinSystemRedoTxRequest', stablecoinSystemRedoTxRequest)
            const localVarPath = `/v2/stablecoinsystem/auctions/tx/redo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stablecoinSystemRedoTxRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * take a auction
         * @summary take a auction
         * @param {StablecoinSystemTakeTxRequest} stablecoinSystemTakeTxRequest Take a Auction transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takeAuctionTransaction: async (stablecoinSystemTakeTxRequest: StablecoinSystemTakeTxRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stablecoinSystemTakeTxRequest' is not null or undefined
            assertParamExists('takeAuctionTransaction', 'stablecoinSystemTakeTxRequest', stablecoinSystemTakeTxRequest)
            const localVarPath = `/v2/stablecoinsystem/auctions/tx/take`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stablecoinSystemTakeTxRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Withdraw collateral
         * @summary Withdraw collateral
         * @param {StablecoinSystemWithdrawCollateralTxRequest} stablecoinSystemWithdrawCollateralTxRequest Withdraw collateral transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdrawCollateralTransaction: async (stablecoinSystemWithdrawCollateralTxRequest: StablecoinSystemWithdrawCollateralTxRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stablecoinSystemWithdrawCollateralTxRequest' is not null or undefined
            assertParamExists('withdrawCollateralTransaction', 'stablecoinSystemWithdrawCollateralTxRequest', stablecoinSystemWithdrawCollateralTxRequest)
            const localVarPath = `/v2/stablecoinsystem/tx/withdrawcollateral`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stablecoinSystemWithdrawCollateralTxRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StableCoinSystemApi - functional programming interface
 * @export
 */
export const StableCoinSystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StableCoinSystemApiAxiosParamCreator(configuration)
    return {
        /**
         * approve and join ZAR token into Vat contract
         * @summary approve and join ZAR token into Vat contract
         * @param {StablecoinSystemZarjoinTxRequest} stablecoinSystemZarjoinTxRequest Approve and join Zar token into Vat contract transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveAndJoinZarTransaction(stablecoinSystemZarjoinTxRequest: StablecoinSystemZarjoinTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainActivity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveAndJoinZarTransaction(stablecoinSystemZarjoinTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.approveAndJoinZarTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create vault
         * @summary Create vault
         * @param {StablecoinSystemCreateVaultTxRequest} stablecoinSystemCreateVaultTxRequest Create vault transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStableCoinVault(stablecoinSystemCreateVaultTxRequest: StablecoinSystemCreateVaultTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainActivity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStableCoinVault(stablecoinSystemCreateVaultTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.createStableCoinVault']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deposit collateral
         * @summary Deposit collateral
         * @param {StablecoinSystemDepositCollateralTxRequest} stablecoinSystemDepositCollateralTxRequest Deposit collateral transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async depositStableCoinCollateral(stablecoinSystemDepositCollateralTxRequest: StablecoinSystemDepositCollateralTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainActivity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.depositStableCoinCollateral(stablecoinSystemDepositCollateralTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.depositStableCoinCollateral']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * exit Gem token (which can be used as collateral) from Vat contract
         * @summary exit Gem token (which can be used as collateral) from Vat contract
         * @param {StablecoinSystemGemexitTxRequest} stablecoinSystemGemexitTxRequest exit Zar token from Vat contract transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exitGemTransaction(stablecoinSystemGemexitTxRequest: StablecoinSystemGemexitTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainActivity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exitGemTransaction(stablecoinSystemGemexitTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.exitGemTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * exit ZAR token from Vat contract
         * @summary exit ZAR token from Vat contract
         * @param {StablecoinSystemZarexitTxRequest} stablecoinSystemZarexitTxRequest exit Zar token from Vat contract transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exitZarTransaction(stablecoinSystemZarexitTxRequest: StablecoinSystemZarexitTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainActivity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exitZarTransaction(stablecoinSystemZarexitTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.exitZarTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of all available ilks.
         * @summary Get all Ilks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllIlks(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IlksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllIlks(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.getAllIlks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get collector data
         * @summary Get collector data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectorData(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Stats>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectorData(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.getCollectorData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve an Ilk by providing its name.
         * @summary Get Ilk by name
         * @param {string} name Name of the ILK
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIlkByName(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ilk>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIlkByName(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.getIlkByName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a vault by ID
         * @param {number} id Vault ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaultById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vault>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaultById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.getVaultById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get vault events by ID
         * @param {number} id Vault ID
         * @param {GetVaultEventsByIdTypeEnum} [type] Event type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaultEventsById(id: number, type?: GetVaultEventsByIdTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultEventsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaultEventsById(id, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.getVaultEventsById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get vaults by owner query
         * @param {string} [owner] Ethereum address of the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaultsByOwner(owner?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaultsByOwner(owner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.getVaultsByOwner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * liquidate a vault
         * @summary liquidate a vault
         * @param {StablecoinSystemBarkTxRequest} stablecoinSystemBarkTxRequest Liquidate a Vault transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async liquidateVaultTransaction(stablecoinSystemBarkTxRequest: StablecoinSystemBarkTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainActivity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.liquidateVaultTransaction(stablecoinSystemBarkTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.liquidateVaultTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Mint ZAR
         * @summary Mint ZAR
         * @param {StablecoinSystemMintZarTxRequest} stablecoinSystemMintZarTxRequest Mint ZAR transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mintZarTransaction(stablecoinSystemMintZarTxRequest: StablecoinSystemMintZarTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainActivity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mintZarTransaction(stablecoinSystemMintZarTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.mintZarTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Repay ZAR
         * @summary Repay ZAR
         * @param {StablecoinSystemRepayZarTxRequest} stablecoinSystemRepayZarTxRequest Repay ZAR transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repayZarTransaction(stablecoinSystemRepayZarTxRequest: StablecoinSystemRepayZarTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainActivity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.repayZarTransaction(stablecoinSystemRepayZarTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.repayZarTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * reset a auction
         * @summary reset a auction
         * @param {StablecoinSystemRedoTxRequest} stablecoinSystemRedoTxRequest Reset a Auction transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetAuctionTransaction(stablecoinSystemRedoTxRequest: StablecoinSystemRedoTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainActivity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetAuctionTransaction(stablecoinSystemRedoTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.resetAuctionTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * take a auction
         * @summary take a auction
         * @param {StablecoinSystemTakeTxRequest} stablecoinSystemTakeTxRequest Take a Auction transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async takeAuctionTransaction(stablecoinSystemTakeTxRequest: StablecoinSystemTakeTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainActivity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.takeAuctionTransaction(stablecoinSystemTakeTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.takeAuctionTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Withdraw collateral
         * @summary Withdraw collateral
         * @param {StablecoinSystemWithdrawCollateralTxRequest} stablecoinSystemWithdrawCollateralTxRequest Withdraw collateral transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async withdrawCollateralTransaction(stablecoinSystemWithdrawCollateralTxRequest: StablecoinSystemWithdrawCollateralTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainActivity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.withdrawCollateralTransaction(stablecoinSystemWithdrawCollateralTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.withdrawCollateralTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StableCoinSystemApi - factory interface
 * @export
 */
export const StableCoinSystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StableCoinSystemApiFp(configuration)
    return {
        /**
         * approve and join ZAR token into Vat contract
         * @summary approve and join ZAR token into Vat contract
         * @param {StablecoinSystemZarjoinTxRequest} stablecoinSystemZarjoinTxRequest Approve and join Zar token into Vat contract transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveAndJoinZarTransaction(stablecoinSystemZarjoinTxRequest: StablecoinSystemZarjoinTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity> {
            return localVarFp.approveAndJoinZarTransaction(stablecoinSystemZarjoinTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create vault
         * @summary Create vault
         * @param {StablecoinSystemCreateVaultTxRequest} stablecoinSystemCreateVaultTxRequest Create vault transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStableCoinVault(stablecoinSystemCreateVaultTxRequest: StablecoinSystemCreateVaultTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity> {
            return localVarFp.createStableCoinVault(stablecoinSystemCreateVaultTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deposit collateral
         * @summary Deposit collateral
         * @param {StablecoinSystemDepositCollateralTxRequest} stablecoinSystemDepositCollateralTxRequest Deposit collateral transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositStableCoinCollateral(stablecoinSystemDepositCollateralTxRequest: StablecoinSystemDepositCollateralTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity> {
            return localVarFp.depositStableCoinCollateral(stablecoinSystemDepositCollateralTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * exit Gem token (which can be used as collateral) from Vat contract
         * @summary exit Gem token (which can be used as collateral) from Vat contract
         * @param {StablecoinSystemGemexitTxRequest} stablecoinSystemGemexitTxRequest exit Zar token from Vat contract transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exitGemTransaction(stablecoinSystemGemexitTxRequest: StablecoinSystemGemexitTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity> {
            return localVarFp.exitGemTransaction(stablecoinSystemGemexitTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * exit ZAR token from Vat contract
         * @summary exit ZAR token from Vat contract
         * @param {StablecoinSystemZarexitTxRequest} stablecoinSystemZarexitTxRequest exit Zar token from Vat contract transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exitZarTransaction(stablecoinSystemZarexitTxRequest: StablecoinSystemZarexitTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity> {
            return localVarFp.exitZarTransaction(stablecoinSystemZarexitTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all available ilks.
         * @summary Get all Ilks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllIlks(options?: RawAxiosRequestConfig): AxiosPromise<IlksResponse> {
            return localVarFp.getAllIlks(options).then((request) => request(axios, basePath));
        },
        /**
         * Get collector data
         * @summary Get collector data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectorData(options?: RawAxiosRequestConfig): AxiosPromise<Stats> {
            return localVarFp.getCollectorData(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an Ilk by providing its name.
         * @summary Get Ilk by name
         * @param {string} name Name of the ILK
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIlkByName(name: string, options?: RawAxiosRequestConfig): AxiosPromise<Ilk> {
            return localVarFp.getIlkByName(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a vault by ID
         * @param {number} id Vault ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Vault> {
            return localVarFp.getVaultById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get vault events by ID
         * @param {number} id Vault ID
         * @param {GetVaultEventsByIdTypeEnum} [type] Event type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultEventsById(id: number, type?: GetVaultEventsByIdTypeEnum, options?: RawAxiosRequestConfig): AxiosPromise<VaultEventsResponse> {
            return localVarFp.getVaultEventsById(id, type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get vaults by owner query
         * @param {string} [owner] Ethereum address of the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultsByOwner(owner?: string, options?: RawAxiosRequestConfig): AxiosPromise<VaultsResponse> {
            return localVarFp.getVaultsByOwner(owner, options).then((request) => request(axios, basePath));
        },
        /**
         * liquidate a vault
         * @summary liquidate a vault
         * @param {StablecoinSystemBarkTxRequest} stablecoinSystemBarkTxRequest Liquidate a Vault transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liquidateVaultTransaction(stablecoinSystemBarkTxRequest: StablecoinSystemBarkTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity> {
            return localVarFp.liquidateVaultTransaction(stablecoinSystemBarkTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Mint ZAR
         * @summary Mint ZAR
         * @param {StablecoinSystemMintZarTxRequest} stablecoinSystemMintZarTxRequest Mint ZAR transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintZarTransaction(stablecoinSystemMintZarTxRequest: StablecoinSystemMintZarTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity> {
            return localVarFp.mintZarTransaction(stablecoinSystemMintZarTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Repay ZAR
         * @summary Repay ZAR
         * @param {StablecoinSystemRepayZarTxRequest} stablecoinSystemRepayZarTxRequest Repay ZAR transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repayZarTransaction(stablecoinSystemRepayZarTxRequest: StablecoinSystemRepayZarTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity> {
            return localVarFp.repayZarTransaction(stablecoinSystemRepayZarTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * reset a auction
         * @summary reset a auction
         * @param {StablecoinSystemRedoTxRequest} stablecoinSystemRedoTxRequest Reset a Auction transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetAuctionTransaction(stablecoinSystemRedoTxRequest: StablecoinSystemRedoTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity> {
            return localVarFp.resetAuctionTransaction(stablecoinSystemRedoTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * take a auction
         * @summary take a auction
         * @param {StablecoinSystemTakeTxRequest} stablecoinSystemTakeTxRequest Take a Auction transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takeAuctionTransaction(stablecoinSystemTakeTxRequest: StablecoinSystemTakeTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity> {
            return localVarFp.takeAuctionTransaction(stablecoinSystemTakeTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Withdraw collateral
         * @summary Withdraw collateral
         * @param {StablecoinSystemWithdrawCollateralTxRequest} stablecoinSystemWithdrawCollateralTxRequest Withdraw collateral transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdrawCollateralTransaction(stablecoinSystemWithdrawCollateralTxRequest: StablecoinSystemWithdrawCollateralTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity> {
            return localVarFp.withdrawCollateralTransaction(stablecoinSystemWithdrawCollateralTxRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StableCoinSystemApi - interface
 * @export
 * @interface StableCoinSystemApi
 */
export interface StableCoinSystemApiInterface {
    /**
     * approve and join ZAR token into Vat contract
     * @summary approve and join ZAR token into Vat contract
     * @param {StablecoinSystemZarjoinTxRequest} stablecoinSystemZarjoinTxRequest Approve and join Zar token into Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    approveAndJoinZarTransaction(stablecoinSystemZarjoinTxRequest: StablecoinSystemZarjoinTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;

    /**
     * Create vault
     * @summary Create vault
     * @param {StablecoinSystemCreateVaultTxRequest} stablecoinSystemCreateVaultTxRequest Create vault transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    createStableCoinVault(stablecoinSystemCreateVaultTxRequest: StablecoinSystemCreateVaultTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;

    /**
     * Deposit collateral
     * @summary Deposit collateral
     * @param {StablecoinSystemDepositCollateralTxRequest} stablecoinSystemDepositCollateralTxRequest Deposit collateral transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    depositStableCoinCollateral(stablecoinSystemDepositCollateralTxRequest: StablecoinSystemDepositCollateralTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;

    /**
     * exit Gem token (which can be used as collateral) from Vat contract
     * @summary exit Gem token (which can be used as collateral) from Vat contract
     * @param {StablecoinSystemGemexitTxRequest} stablecoinSystemGemexitTxRequest exit Zar token from Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    exitGemTransaction(stablecoinSystemGemexitTxRequest: StablecoinSystemGemexitTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;

    /**
     * exit ZAR token from Vat contract
     * @summary exit ZAR token from Vat contract
     * @param {StablecoinSystemZarexitTxRequest} stablecoinSystemZarexitTxRequest exit Zar token from Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    exitZarTransaction(stablecoinSystemZarexitTxRequest: StablecoinSystemZarexitTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;

    /**
     * Retrieve a list of all available ilks.
     * @summary Get all Ilks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    getAllIlks(options?: RawAxiosRequestConfig): AxiosPromise<IlksResponse>;

    /**
     * Get collector data
     * @summary Get collector data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    getCollectorData(options?: RawAxiosRequestConfig): AxiosPromise<Stats>;

    /**
     * Retrieve an Ilk by providing its name.
     * @summary Get Ilk by name
     * @param {string} name Name of the ILK
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    getIlkByName(name: string, options?: RawAxiosRequestConfig): AxiosPromise<Ilk>;

    /**
     * 
     * @summary Get a vault by ID
     * @param {number} id Vault ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    getVaultById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Vault>;

    /**
     * 
     * @summary Get vault events by ID
     * @param {number} id Vault ID
     * @param {GetVaultEventsByIdTypeEnum} [type] Event type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    getVaultEventsById(id: number, type?: GetVaultEventsByIdTypeEnum, options?: RawAxiosRequestConfig): AxiosPromise<VaultEventsResponse>;

    /**
     * 
     * @summary Get vaults by owner query
     * @param {string} [owner] Ethereum address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    getVaultsByOwner(owner?: string, options?: RawAxiosRequestConfig): AxiosPromise<VaultsResponse>;

    /**
     * liquidate a vault
     * @summary liquidate a vault
     * @param {StablecoinSystemBarkTxRequest} stablecoinSystemBarkTxRequest Liquidate a Vault transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    liquidateVaultTransaction(stablecoinSystemBarkTxRequest: StablecoinSystemBarkTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;

    /**
     * Mint ZAR
     * @summary Mint ZAR
     * @param {StablecoinSystemMintZarTxRequest} stablecoinSystemMintZarTxRequest Mint ZAR transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    mintZarTransaction(stablecoinSystemMintZarTxRequest: StablecoinSystemMintZarTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;

    /**
     * Repay ZAR
     * @summary Repay ZAR
     * @param {StablecoinSystemRepayZarTxRequest} stablecoinSystemRepayZarTxRequest Repay ZAR transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    repayZarTransaction(stablecoinSystemRepayZarTxRequest: StablecoinSystemRepayZarTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;

    /**
     * reset a auction
     * @summary reset a auction
     * @param {StablecoinSystemRedoTxRequest} stablecoinSystemRedoTxRequest Reset a Auction transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    resetAuctionTransaction(stablecoinSystemRedoTxRequest: StablecoinSystemRedoTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;

    /**
     * take a auction
     * @summary take a auction
     * @param {StablecoinSystemTakeTxRequest} stablecoinSystemTakeTxRequest Take a Auction transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    takeAuctionTransaction(stablecoinSystemTakeTxRequest: StablecoinSystemTakeTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;

    /**
     * Withdraw collateral
     * @summary Withdraw collateral
     * @param {StablecoinSystemWithdrawCollateralTxRequest} stablecoinSystemWithdrawCollateralTxRequest Withdraw collateral transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    withdrawCollateralTransaction(stablecoinSystemWithdrawCollateralTxRequest: StablecoinSystemWithdrawCollateralTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;

}

/**
 * StableCoinSystemApi - object-oriented interface
 * @export
 * @class StableCoinSystemApi
 * @extends {BaseAPI}
 */
export class StableCoinSystemApi extends BaseAPI implements StableCoinSystemApiInterface {
    /**
     * approve and join ZAR token into Vat contract
     * @summary approve and join ZAR token into Vat contract
     * @param {StablecoinSystemZarjoinTxRequest} stablecoinSystemZarjoinTxRequest Approve and join Zar token into Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    public approveAndJoinZarTransaction(stablecoinSystemZarjoinTxRequest: StablecoinSystemZarjoinTxRequest, options?: RawAxiosRequestConfig) {
        return StableCoinSystemApiFp(this.configuration).approveAndJoinZarTransaction(stablecoinSystemZarjoinTxRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create vault
     * @summary Create vault
     * @param {StablecoinSystemCreateVaultTxRequest} stablecoinSystemCreateVaultTxRequest Create vault transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    public createStableCoinVault(stablecoinSystemCreateVaultTxRequest: StablecoinSystemCreateVaultTxRequest, options?: RawAxiosRequestConfig) {
        return StableCoinSystemApiFp(this.configuration).createStableCoinVault(stablecoinSystemCreateVaultTxRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deposit collateral
     * @summary Deposit collateral
     * @param {StablecoinSystemDepositCollateralTxRequest} stablecoinSystemDepositCollateralTxRequest Deposit collateral transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    public depositStableCoinCollateral(stablecoinSystemDepositCollateralTxRequest: StablecoinSystemDepositCollateralTxRequest, options?: RawAxiosRequestConfig) {
        return StableCoinSystemApiFp(this.configuration).depositStableCoinCollateral(stablecoinSystemDepositCollateralTxRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * exit Gem token (which can be used as collateral) from Vat contract
     * @summary exit Gem token (which can be used as collateral) from Vat contract
     * @param {StablecoinSystemGemexitTxRequest} stablecoinSystemGemexitTxRequest exit Zar token from Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    public exitGemTransaction(stablecoinSystemGemexitTxRequest: StablecoinSystemGemexitTxRequest, options?: RawAxiosRequestConfig) {
        return StableCoinSystemApiFp(this.configuration).exitGemTransaction(stablecoinSystemGemexitTxRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * exit ZAR token from Vat contract
     * @summary exit ZAR token from Vat contract
     * @param {StablecoinSystemZarexitTxRequest} stablecoinSystemZarexitTxRequest exit Zar token from Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    public exitZarTransaction(stablecoinSystemZarexitTxRequest: StablecoinSystemZarexitTxRequest, options?: RawAxiosRequestConfig) {
        return StableCoinSystemApiFp(this.configuration).exitZarTransaction(stablecoinSystemZarexitTxRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of all available ilks.
     * @summary Get all Ilks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    public getAllIlks(options?: RawAxiosRequestConfig) {
        return StableCoinSystemApiFp(this.configuration).getAllIlks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get collector data
     * @summary Get collector data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    public getCollectorData(options?: RawAxiosRequestConfig) {
        return StableCoinSystemApiFp(this.configuration).getCollectorData(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an Ilk by providing its name.
     * @summary Get Ilk by name
     * @param {string} name Name of the ILK
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    public getIlkByName(name: string, options?: RawAxiosRequestConfig) {
        return StableCoinSystemApiFp(this.configuration).getIlkByName(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a vault by ID
     * @param {number} id Vault ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    public getVaultById(id: number, options?: RawAxiosRequestConfig) {
        return StableCoinSystemApiFp(this.configuration).getVaultById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get vault events by ID
     * @param {number} id Vault ID
     * @param {GetVaultEventsByIdTypeEnum} [type] Event type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    public getVaultEventsById(id: number, type?: GetVaultEventsByIdTypeEnum, options?: RawAxiosRequestConfig) {
        return StableCoinSystemApiFp(this.configuration).getVaultEventsById(id, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get vaults by owner query
     * @param {string} [owner] Ethereum address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    public getVaultsByOwner(owner?: string, options?: RawAxiosRequestConfig) {
        return StableCoinSystemApiFp(this.configuration).getVaultsByOwner(owner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * liquidate a vault
     * @summary liquidate a vault
     * @param {StablecoinSystemBarkTxRequest} stablecoinSystemBarkTxRequest Liquidate a Vault transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    public liquidateVaultTransaction(stablecoinSystemBarkTxRequest: StablecoinSystemBarkTxRequest, options?: RawAxiosRequestConfig) {
        return StableCoinSystemApiFp(this.configuration).liquidateVaultTransaction(stablecoinSystemBarkTxRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Mint ZAR
     * @summary Mint ZAR
     * @param {StablecoinSystemMintZarTxRequest} stablecoinSystemMintZarTxRequest Mint ZAR transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    public mintZarTransaction(stablecoinSystemMintZarTxRequest: StablecoinSystemMintZarTxRequest, options?: RawAxiosRequestConfig) {
        return StableCoinSystemApiFp(this.configuration).mintZarTransaction(stablecoinSystemMintZarTxRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Repay ZAR
     * @summary Repay ZAR
     * @param {StablecoinSystemRepayZarTxRequest} stablecoinSystemRepayZarTxRequest Repay ZAR transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    public repayZarTransaction(stablecoinSystemRepayZarTxRequest: StablecoinSystemRepayZarTxRequest, options?: RawAxiosRequestConfig) {
        return StableCoinSystemApiFp(this.configuration).repayZarTransaction(stablecoinSystemRepayZarTxRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * reset a auction
     * @summary reset a auction
     * @param {StablecoinSystemRedoTxRequest} stablecoinSystemRedoTxRequest Reset a Auction transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    public resetAuctionTransaction(stablecoinSystemRedoTxRequest: StablecoinSystemRedoTxRequest, options?: RawAxiosRequestConfig) {
        return StableCoinSystemApiFp(this.configuration).resetAuctionTransaction(stablecoinSystemRedoTxRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * take a auction
     * @summary take a auction
     * @param {StablecoinSystemTakeTxRequest} stablecoinSystemTakeTxRequest Take a Auction transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    public takeAuctionTransaction(stablecoinSystemTakeTxRequest: StablecoinSystemTakeTxRequest, options?: RawAxiosRequestConfig) {
        return StableCoinSystemApiFp(this.configuration).takeAuctionTransaction(stablecoinSystemTakeTxRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Withdraw collateral
     * @summary Withdraw collateral
     * @param {StablecoinSystemWithdrawCollateralTxRequest} stablecoinSystemWithdrawCollateralTxRequest Withdraw collateral transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    public withdrawCollateralTransaction(stablecoinSystemWithdrawCollateralTxRequest: StablecoinSystemWithdrawCollateralTxRequest, options?: RawAxiosRequestConfig) {
        return StableCoinSystemApiFp(this.configuration).withdrawCollateralTransaction(stablecoinSystemWithdrawCollateralTxRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetVaultEventsByIdTypeEnum = {
    REPAY: 'repay',
    DEPOSIT: 'deposit',
    WITHDRAW: 'withdraw',
    MINT: 'mint'
} as const;
export type GetVaultEventsByIdTypeEnum = typeof GetVaultEventsByIdTypeEnum[keyof typeof GetVaultEventsByIdTypeEnum];
