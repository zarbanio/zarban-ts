/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ErrorMessage } from './ErrorMessage';
import {
    ErrorMessageFromJSON,
    ErrorMessageFromJSONTyped,
    ErrorMessageToJSON,
    ErrorMessageToJSONTyped,
} from './ErrorMessage';

/**
 * 
 * @export
 * @interface UserError
 */
export interface UserError {
    /**
     * Localized error messages
     * @type {{ [key: string]: ErrorMessage; }}
     * @memberof UserError
     */
    messages: { [key: string]: ErrorMessage; };
    /**
     * 
     * @type {Array<string>}
     * @memberof UserError
     */
    reasons: Array<string>;
}

/**
 * Check if a given object implements the UserError interface.
 */
export function instanceOfUserError(value: object): value is UserError {
    if (!('messages' in value) || value['messages'] === undefined) return false;
    if (!('reasons' in value) || value['reasons'] === undefined) return false;
    return true;
}

export function UserErrorFromJSON(json: any): UserError {
    return UserErrorFromJSONTyped(json, false);
}

export function UserErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserError {
    if (json == null) {
        return json;
    }
    return {
        
        'messages': (mapValues(json['messages'], ErrorMessageFromJSON)),
        'reasons': json['reasons'],
    };
}

export function UserErrorToJSON(json: any): UserError {
    return UserErrorToJSONTyped(json, false);
}

export function UserErrorToJSONTyped(value?: UserError | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'messages': (mapValues(value['messages'], ErrorMessageToJSON)),
        'reasons': value['reasons'],
    };
}

