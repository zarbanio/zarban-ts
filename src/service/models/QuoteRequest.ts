/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OrderType } from './OrderType';
import {
    OrderTypeFromJSON,
    OrderTypeFromJSONTyped,
    OrderTypeToJSON,
    OrderTypeToJSONTyped,
} from './OrderType';
import type { QuoteRequestOptions } from './QuoteRequestOptions';
import {
    QuoteRequestOptionsFromJSON,
    QuoteRequestOptionsFromJSONTyped,
    QuoteRequestOptionsToJSON,
    QuoteRequestOptionsToJSONTyped,
} from './QuoteRequestOptions';
import type { TradeType } from './TradeType';
import {
    TradeTypeFromJSON,
    TradeTypeFromJSONTyped,
    TradeTypeToJSON,
    TradeTypeToJSONTyped,
} from './TradeType';

/**
 * 
 * @export
 * @interface QuoteRequest
 */
export interface QuoteRequest {
    /**
     * 
     * @type {string}
     * @memberof QuoteRequest
     */
    requestId?: string;
    /**
     * 
     * @type {OrderType}
     * @memberof QuoteRequest
     */
    type?: OrderType;
    /**
     * 
     * @type {TradeType}
     * @memberof QuoteRequest
     */
    tradeType: TradeType;
    /**
     * 
     * @type {string}
     * @memberof QuoteRequest
     */
    inputToken: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteRequest
     */
    outputToken: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteRequest
     */
    amount: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteRequest
     */
    recipient: string;
    /**
     * 
     * @type {QuoteRequestOptions}
     * @memberof QuoteRequest
     */
    options?: QuoteRequestOptions;
}



/**
 * Check if a given object implements the QuoteRequest interface.
 */
export function instanceOfQuoteRequest(value: object): value is QuoteRequest {
    if (!('tradeType' in value) || value['tradeType'] === undefined) return false;
    if (!('inputToken' in value) || value['inputToken'] === undefined) return false;
    if (!('outputToken' in value) || value['outputToken'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('recipient' in value) || value['recipient'] === undefined) return false;
    return true;
}

export function QuoteRequestFromJSON(json: any): QuoteRequest {
    return QuoteRequestFromJSONTyped(json, false);
}

export function QuoteRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuoteRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'requestId': json['requestId'] == null ? undefined : json['requestId'],
        'type': json['type'] == null ? undefined : OrderTypeFromJSON(json['type']),
        'tradeType': TradeTypeFromJSON(json['tradeType']),
        'inputToken': json['inputToken'],
        'outputToken': json['outputToken'],
        'amount': json['amount'],
        'recipient': json['recipient'],
        'options': json['options'] == null ? undefined : QuoteRequestOptionsFromJSON(json['options']),
    };
}

export function QuoteRequestToJSON(json: any): QuoteRequest {
    return QuoteRequestToJSONTyped(json, false);
}

export function QuoteRequestToJSONTyped(value?: QuoteRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'requestId': value['requestId'],
        'type': OrderTypeToJSON(value['type']),
        'tradeType': TradeTypeToJSON(value['tradeType']),
        'inputToken': value['inputToken'],
        'outputToken': value['outputToken'],
        'amount': value['amount'],
        'recipient': value['recipient'],
        'options': QuoteRequestOptionsToJSON(value['options']),
    };
}

