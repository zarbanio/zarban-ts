/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface QuoteRequestOptions
 */
export interface QuoteRequestOptions {
    /**
     * 
     * @type {boolean}
     * @memberof QuoteRequestOptions
     */
    dryRun?: boolean;
    /**
     * 
     * @type {string}
     * @memberof QuoteRequestOptions
     */
    slippageTolerance?: string;
    /**
     * 
     * @type {boolean}
     * @memberof QuoteRequestOptions
     */
    useSyntheticQuotes?: boolean;
    /**
     * 
     * @type {string}
     * @memberof QuoteRequestOptions
     */
    permitSignature?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteRequestOptions
     */
    permitNonce?: string;
    /**
     * 
     * @type {number}
     * @memberof QuoteRequestOptions
     */
    permitExpiration?: number;
    /**
     * 
     * @type {string}
     * @memberof QuoteRequestOptions
     */
    permitAmount?: string;
    /**
     * 
     * @type {number}
     * @memberof QuoteRequestOptions
     */
    permitSigDeadline?: number;
    /**
     * 
     * @type {string}
     * @memberof QuoteRequestOptions
     */
    quoteId?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteRequestOptions
     */
    encodedOrder?: string;
}

/**
 * Check if a given object implements the QuoteRequestOptions interface.
 */
export function instanceOfQuoteRequestOptions(value: object): value is QuoteRequestOptions {
    return true;
}

export function QuoteRequestOptionsFromJSON(json: any): QuoteRequestOptions {
    return QuoteRequestOptionsFromJSONTyped(json, false);
}

export function QuoteRequestOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuoteRequestOptions {
    if (json == null) {
        return json;
    }
    return {
        
        'dryRun': json['dryRun'] == null ? undefined : json['dryRun'],
        'slippageTolerance': json['slippageTolerance'] == null ? undefined : json['slippageTolerance'],
        'useSyntheticQuotes': json['useSyntheticQuotes'] == null ? undefined : json['useSyntheticQuotes'],
        'permitSignature': json['permitSignature'] == null ? undefined : json['permitSignature'],
        'permitNonce': json['permitNonce'] == null ? undefined : json['permitNonce'],
        'permitExpiration': json['permitExpiration'] == null ? undefined : json['permitExpiration'],
        'permitAmount': json['permitAmount'] == null ? undefined : json['permitAmount'],
        'permitSigDeadline': json['permitSigDeadline'] == null ? undefined : json['permitSigDeadline'],
        'quoteId': json['quoteId'] == null ? undefined : json['quoteId'],
        'encodedOrder': json['encodedOrder'] == null ? undefined : json['encodedOrder'],
    };
}

export function QuoteRequestOptionsToJSON(json: any): QuoteRequestOptions {
    return QuoteRequestOptionsToJSONTyped(json, false);
}

export function QuoteRequestOptionsToJSONTyped(value?: QuoteRequestOptions | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'dryRun': value['dryRun'],
        'slippageTolerance': value['slippageTolerance'],
        'useSyntheticQuotes': value['useSyntheticQuotes'],
        'permitSignature': value['permitSignature'],
        'permitNonce': value['permitNonce'],
        'permitExpiration': value['permitExpiration'],
        'permitAmount': value['permitAmount'],
        'permitSigDeadline': value['permitSigDeadline'],
        'quoteId': value['quoteId'],
        'encodedOrder': value['encodedOrder'],
    };
}

