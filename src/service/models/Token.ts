/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Symbol } from './Symbol';
import {
    SymbolFromJSON,
    SymbolFromJSONTyped,
    SymbolToJSON,
    SymbolToJSONTyped,
} from './Symbol';

/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * The name of the token.
     * @type {string}
     * @memberof Token
     */
    name: string;
    /**
     * 
     * @type {Symbol}
     * @memberof Token
     */
    symbol: Symbol;
    /**
     * The number of decimals for the token.
     * @type {number}
     * @memberof Token
     */
    decimals: number;
    /**
     * The Ethereum address of the token.
     * @type {string}
     * @memberof Token
     */
    address: string;
    /**
     * The URI of the token's logo.
     * @type {string}
     * @memberof Token
     */
    logoUri: string;
    /**
     * The chain ID of the token.
     * @type {number}
     * @memberof Token
     */
    chainId: number;
    /**
     * The Persian name of the token.
     * @type {string}
     * @memberof Token
     */
    persianName: string;
}



/**
 * Check if a given object implements the Token interface.
 */
export function instanceOfToken(value: object): value is Token {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('symbol' in value) || value['symbol'] === undefined) return false;
    if (!('decimals' in value) || value['decimals'] === undefined) return false;
    if (!('address' in value) || value['address'] === undefined) return false;
    if (!('logoUri' in value) || value['logoUri'] === undefined) return false;
    if (!('chainId' in value) || value['chainId'] === undefined) return false;
    if (!('persianName' in value) || value['persianName'] === undefined) return false;
    return true;
}

export function TokenFromJSON(json: any): Token {
    return TokenFromJSONTyped(json, false);
}

export function TokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): Token {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'symbol': SymbolFromJSON(json['symbol']),
        'decimals': json['decimals'],
        'address': json['address'],
        'logoUri': json['logoUri'],
        'chainId': json['chainId'],
        'persianName': json['persianName'],
    };
}

export function TokenToJSON(json: any): Token {
    return TokenToJSONTyped(json, false);
}

export function TokenToJSONTyped(value?: Token | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'symbol': SymbolToJSON(value['symbol']),
        'decimals': value['decimals'],
        'address': value['address'],
        'logoUri': value['logoUri'],
        'chainId': value['chainId'],
        'persianName': value['persianName'],
    };
}

