/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { VaultEvent } from './VaultEvent';
import {
    VaultEventFromJSON,
    VaultEventFromJSONTyped,
    VaultEventToJSON,
    VaultEventToJSONTyped,
} from './VaultEvent';
import type { EventDomain } from './EventDomain';
import {
    EventDomainFromJSON,
    EventDomainFromJSONTyped,
    EventDomainToJSON,
    EventDomainToJSONTyped,
} from './EventDomain';
import type { EventType } from './EventType';
import {
    EventTypeFromJSON,
    EventTypeFromJSONTyped,
    EventTypeToJSON,
    EventTypeToJSONTyped,
} from './EventType';
import type { Log } from './Log';
import {
    LogFromJSON,
    LogFromJSONTyped,
    LogToJSON,
    LogToJSONTyped,
} from './Log';
import type { EventName } from './EventName';
import {
    EventNameFromJSON,
    EventNameFromJSONTyped,
    EventNameToJSON,
    EventNameToJSONTyped,
} from './EventName';

/**
 * 
 * @export
 * @interface VaultEventItem
 */
export interface VaultEventItem {
    /**
     * Identifier for the event.
     * @type {number}
     * @memberof VaultEventItem
     */
    id: number;
    /**
     * 
     * @type {EventName}
     * @memberof VaultEventItem
     */
    name: EventName;
    /**
     * 
     * @type {EventType}
     * @memberof VaultEventItem
     */
    type: EventType;
    /**
     * 
     * @type {EventDomain}
     * @memberof VaultEventItem
     */
    domain: EventDomain;
    /**
     * 
     * @type {Log}
     * @memberof VaultEventItem
     */
    raw: Log;
    /**
     * 
     * @type {VaultEvent}
     * @memberof VaultEventItem
     */
    payload?: VaultEvent;
}



/**
 * Check if a given object implements the VaultEventItem interface.
 */
export function instanceOfVaultEventItem(value: object): value is VaultEventItem {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('domain' in value) || value['domain'] === undefined) return false;
    if (!('raw' in value) || value['raw'] === undefined) return false;
    return true;
}

export function VaultEventItemFromJSON(json: any): VaultEventItem {
    return VaultEventItemFromJSONTyped(json, false);
}

export function VaultEventItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): VaultEventItem {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': EventNameFromJSON(json['name']),
        'type': EventTypeFromJSON(json['type']),
        'domain': EventDomainFromJSON(json['domain']),
        'raw': LogFromJSON(json['raw']),
        'payload': json['payload'] == null ? undefined : VaultEventFromJSON(json['payload']),
    };
}

export function VaultEventItemToJSON(json: any): VaultEventItem {
    return VaultEventItemToJSONTyped(json, false);
}

export function VaultEventItemToJSONTyped(value?: VaultEventItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': EventNameToJSON(value['name']),
        'type': EventTypeToJSON(value['type']),
        'domain': EventDomainToJSON(value['domain']),
        'raw': LogToJSON(value['raw']),
        'payload': VaultEventToJSON(value['payload']),
    };
}

