/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Symbol } from './Symbol';
import {
    SymbolFromJSON,
    SymbolFromJSONTyped,
    SymbolToJSON,
    SymbolToJSONTyped,
} from './Symbol';
import type { Timestamp } from './Timestamp';
import {
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
    TimestampToJSONTyped,
} from './Timestamp';

/**
 * 
 * @export
 * @interface Price
 */
export interface Price {
    /**
     * 
     * @type {Symbol}
     * @memberof Price
     */
    symbol: Symbol;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Price
     */
    value: { [key: string]: string; };
    /**
     * 
     * @type {Timestamp}
     * @memberof Price
     */
    timestamp: Timestamp;
}



/**
 * Check if a given object implements the Price interface.
 */
export function instanceOfPrice(value: object): value is Price {
    if (!('symbol' in value) || value['symbol'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    return true;
}

export function PriceFromJSON(json: any): Price {
    return PriceFromJSONTyped(json, false);
}

export function PriceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Price {
    if (json == null) {
        return json;
    }
    return {
        
        'symbol': SymbolFromJSON(json['symbol']),
        'value': json['value'],
        'timestamp': TimestampFromJSON(json['timestamp']),
    };
}

export function PriceToJSON(json: any): Price {
    return PriceToJSONTyped(json, false);
}

export function PriceToJSONTyped(value?: Price | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'symbol': SymbolToJSON(value['symbol']),
        'value': value['value'],
        'timestamp': TimestampToJSON(value['timestamp']),
    };
}

