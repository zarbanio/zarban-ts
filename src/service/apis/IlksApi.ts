/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Ilk,
  IlksResponse,
} from '../models/index';
import {
    IlkFromJSON,
    IlkToJSON,
    IlksResponseFromJSON,
    IlksResponseToJSON,
} from '../models/index';

export interface GetIlkByNameRequest {
    name: string;
}

/**
 * 
 */
export class IlksApi extends runtime.BaseAPI {

    /**
     * Retrieve a list of all available ilks.
     * Get all Ilks
     */
    async getAllIlksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IlksResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/ilks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IlksResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all available ilks.
     * Get all Ilks
     */
    async getAllIlks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IlksResponse> {
        const response = await this.getAllIlksRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an Ilk by providing its name.
     * Get Ilk by name
     */
    async getIlkByNameRaw(requestParameters: GetIlkByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ilk>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getIlkByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/ilks/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IlkFromJSON(jsonValue));
    }

    /**
     * Retrieve an Ilk by providing its name.
     * Get Ilk by name
     */
    async getIlkByName(requestParameters: GetIlkByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ilk> {
        const response = await this.getIlkByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
