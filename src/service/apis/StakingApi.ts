/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  StakePlansResponse,
  StakingCollectRewardTxRequest,
  StakingCollectRewardTxResponse,
  StakingStakeTxRequest,
  StakingStakeTxResponse,
  StakingWithdrawTxRequest,
  StakingWithdrawTxResponse,
  UserError,
  UserStakesResponse,
} from '../models/index';
import {
    StakePlansResponseFromJSON,
    StakePlansResponseToJSON,
    StakingCollectRewardTxRequestFromJSON,
    StakingCollectRewardTxRequestToJSON,
    StakingCollectRewardTxResponseFromJSON,
    StakingCollectRewardTxResponseToJSON,
    StakingStakeTxRequestFromJSON,
    StakingStakeTxRequestToJSON,
    StakingStakeTxResponseFromJSON,
    StakingStakeTxResponseToJSON,
    StakingWithdrawTxRequestFromJSON,
    StakingWithdrawTxRequestToJSON,
    StakingWithdrawTxResponseFromJSON,
    StakingWithdrawTxResponseToJSON,
    UserErrorFromJSON,
    UserErrorToJSON,
    UserStakesResponseFromJSON,
    UserStakesResponseToJSON,
} from '../models/index';

export interface CollectStakingRewardRequest {
    stakingCollectRewardTxRequest: StakingCollectRewardTxRequest;
}

export interface GetUserStakingStatsRequest {
    user?: string;
    address?: string;
    active?: boolean;
    cursor?: number;
    limit?: number;
}

export interface StakeToStakingContractRequest {
    stakingStakeTxRequest: StakingStakeTxRequest;
}

export interface WithdrawStakedAssetRequest {
    stakingWithdrawTxRequest: StakingWithdrawTxRequest;
}

/**
 * 
 */
export class StakingApi extends runtime.BaseAPI {

    /**
     * Collect staking reward
     * Collect staking reward
     */
    async collectStakingRewardRaw(requestParameters: CollectStakingRewardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StakingCollectRewardTxResponse>> {
        if (requestParameters['stakingCollectRewardTxRequest'] == null) {
            throw new runtime.RequiredError(
                'stakingCollectRewardTxRequest',
                'Required parameter "stakingCollectRewardTxRequest" was null or undefined when calling collectStakingReward().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/staking/tx/collectreward`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StakingCollectRewardTxRequestToJSON(requestParameters['stakingCollectRewardTxRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StakingCollectRewardTxResponseFromJSON(jsonValue));
    }

    /**
     * Collect staking reward
     * Collect staking reward
     */
    async collectStakingReward(requestParameters: CollectStakingRewardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StakingCollectRewardTxResponse> {
        const response = await this.collectStakingRewardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get staking plans
     * Get staking plans
     */
    async getStakingPlansRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StakePlansResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/staking/plans`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StakePlansResponseFromJSON(jsonValue));
    }

    /**
     * Get staking plans
     * Get staking plans
     */
    async getStakingPlans(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StakePlansResponse> {
        const response = await this.getStakingPlansRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get user staking stats
     * Get user staking stats
     */
    async getUserStakingStatsRaw(requestParameters: GetUserStakingStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserStakesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        if (requestParameters['address'] != null) {
            queryParameters['address'] = requestParameters['address'];
        }

        if (requestParameters['active'] != null) {
            queryParameters['active'] = requestParameters['active'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/staking/stats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserStakesResponseFromJSON(jsonValue));
    }

    /**
     * Get user staking stats
     * Get user staking stats
     */
    async getUserStakingStats(requestParameters: GetUserStakingStatsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserStakesResponse> {
        const response = await this.getUserStakingStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stake to staking contract
     * Stake to staking contract
     */
    async stakeToStakingContractRaw(requestParameters: StakeToStakingContractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StakingStakeTxResponse>> {
        if (requestParameters['stakingStakeTxRequest'] == null) {
            throw new runtime.RequiredError(
                'stakingStakeTxRequest',
                'Required parameter "stakingStakeTxRequest" was null or undefined when calling stakeToStakingContract().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/staking/tx/stake`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StakingStakeTxRequestToJSON(requestParameters['stakingStakeTxRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StakingStakeTxResponseFromJSON(jsonValue));
    }

    /**
     * Stake to staking contract
     * Stake to staking contract
     */
    async stakeToStakingContract(requestParameters: StakeToStakingContractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StakingStakeTxResponse> {
        const response = await this.stakeToStakingContractRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Withdraw staked asset
     * Withdraw staked asset
     */
    async withdrawStakedAssetRaw(requestParameters: WithdrawStakedAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StakingWithdrawTxResponse>> {
        if (requestParameters['stakingWithdrawTxRequest'] == null) {
            throw new runtime.RequiredError(
                'stakingWithdrawTxRequest',
                'Required parameter "stakingWithdrawTxRequest" was null or undefined when calling withdrawStakedAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/staking/tx/withdraw`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StakingWithdrawTxRequestToJSON(requestParameters['stakingWithdrawTxRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StakingWithdrawTxResponseFromJSON(jsonValue));
    }

    /**
     * Withdraw staked asset
     * Withdraw staked asset
     */
    async withdrawStakedAsset(requestParameters: WithdrawStakedAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StakingWithdrawTxResponse> {
        const response = await this.withdrawStakedAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
