/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChainActivity,
  Ilk,
  IlksResponse,
  StablecoinSystemBarkTxRequest,
  StablecoinSystemCreateVaultTxRequest,
  StablecoinSystemDepositCollateralTxRequest,
  StablecoinSystemGemexitTxRequest,
  StablecoinSystemMintZarTxRequest,
  StablecoinSystemRedoTxRequest,
  StablecoinSystemRepayZarTxRequest,
  StablecoinSystemTakeTxRequest,
  StablecoinSystemWithdrawCollateralTxRequest,
  StablecoinSystemZarexitTxRequest,
  StablecoinSystemZarjoinTxRequest,
  Stats,
  Vault,
  VaultEventsResponse,
  VaultsResponse,
} from '../models/index';
import {
    ChainActivityFromJSON,
    ChainActivityToJSON,
    IlkFromJSON,
    IlkToJSON,
    IlksResponseFromJSON,
    IlksResponseToJSON,
    StablecoinSystemBarkTxRequestFromJSON,
    StablecoinSystemBarkTxRequestToJSON,
    StablecoinSystemCreateVaultTxRequestFromJSON,
    StablecoinSystemCreateVaultTxRequestToJSON,
    StablecoinSystemDepositCollateralTxRequestFromJSON,
    StablecoinSystemDepositCollateralTxRequestToJSON,
    StablecoinSystemGemexitTxRequestFromJSON,
    StablecoinSystemGemexitTxRequestToJSON,
    StablecoinSystemMintZarTxRequestFromJSON,
    StablecoinSystemMintZarTxRequestToJSON,
    StablecoinSystemRedoTxRequestFromJSON,
    StablecoinSystemRedoTxRequestToJSON,
    StablecoinSystemRepayZarTxRequestFromJSON,
    StablecoinSystemRepayZarTxRequestToJSON,
    StablecoinSystemTakeTxRequestFromJSON,
    StablecoinSystemTakeTxRequestToJSON,
    StablecoinSystemWithdrawCollateralTxRequestFromJSON,
    StablecoinSystemWithdrawCollateralTxRequestToJSON,
    StablecoinSystemZarexitTxRequestFromJSON,
    StablecoinSystemZarexitTxRequestToJSON,
    StablecoinSystemZarjoinTxRequestFromJSON,
    StablecoinSystemZarjoinTxRequestToJSON,
    StatsFromJSON,
    StatsToJSON,
    VaultFromJSON,
    VaultToJSON,
    VaultEventsResponseFromJSON,
    VaultEventsResponseToJSON,
    VaultsResponseFromJSON,
    VaultsResponseToJSON,
} from '../models/index';

export interface ApproveAndJoinZarTransactionRequest {
    stablecoinSystemZarjoinTxRequest: StablecoinSystemZarjoinTxRequest;
}

export interface CreateStableCoinVaultRequest {
    stablecoinSystemCreateVaultTxRequest: StablecoinSystemCreateVaultTxRequest;
}

export interface DepositStableCoinCollateralRequest {
    stablecoinSystemDepositCollateralTxRequest: StablecoinSystemDepositCollateralTxRequest;
}

export interface ExitGemTransactionRequest {
    stablecoinSystemGemexitTxRequest: StablecoinSystemGemexitTxRequest;
}

export interface ExitZarTransactionRequest {
    stablecoinSystemZarexitTxRequest: StablecoinSystemZarexitTxRequest;
}

export interface GetIlkByNameRequest {
    name: string;
}

export interface GetVaultByIdRequest {
    id: number;
}

export interface GetVaultEventsByIdRequest {
    id: number;
    type?: GetVaultEventsByIdTypeEnum;
}

export interface GetVaultsByOwnerRequest {
    owner?: string;
}

export interface LiquidateVaultTransactionRequest {
    stablecoinSystemBarkTxRequest: StablecoinSystemBarkTxRequest;
}

export interface MintZarTransactionRequest {
    stablecoinSystemMintZarTxRequest: StablecoinSystemMintZarTxRequest;
}

export interface RepayZarTransactionRequest {
    stablecoinSystemRepayZarTxRequest: StablecoinSystemRepayZarTxRequest;
}

export interface ResetAuctionTransactionRequest {
    stablecoinSystemRedoTxRequest: StablecoinSystemRedoTxRequest;
}

export interface TakeAuctionTransactionRequest {
    stablecoinSystemTakeTxRequest: StablecoinSystemTakeTxRequest;
}

export interface WithdrawCollateralTransactionRequest {
    stablecoinSystemWithdrawCollateralTxRequest: StablecoinSystemWithdrawCollateralTxRequest;
}

/**
 * 
 */
export class StableCoinSystemApi extends runtime.BaseAPI {

    /**
     * approve and join ZAR token into Vat contract
     * approve and join ZAR token into Vat contract
     */
    async approveAndJoinZarTransactionRaw(requestParameters: ApproveAndJoinZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>> {
        if (requestParameters['stablecoinSystemZarjoinTxRequest'] == null) {
            throw new runtime.RequiredError(
                'stablecoinSystemZarjoinTxRequest',
                'Required parameter "stablecoinSystemZarjoinTxRequest" was null or undefined when calling approveAndJoinZarTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/stablecoinsystem/auctions/tx/zarjoin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StablecoinSystemZarjoinTxRequestToJSON(requestParameters['stablecoinSystemZarjoinTxRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChainActivityFromJSON(jsonValue));
    }

    /**
     * approve and join ZAR token into Vat contract
     * approve and join ZAR token into Vat contract
     */
    async approveAndJoinZarTransaction(requestParameters: ApproveAndJoinZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity> {
        const response = await this.approveAndJoinZarTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create vault
     * Create vault
     */
    async createStableCoinVaultRaw(requestParameters: CreateStableCoinVaultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>> {
        if (requestParameters['stablecoinSystemCreateVaultTxRequest'] == null) {
            throw new runtime.RequiredError(
                'stablecoinSystemCreateVaultTxRequest',
                'Required parameter "stablecoinSystemCreateVaultTxRequest" was null or undefined when calling createStableCoinVault().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/stablecoinsystem/tx/createvault`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StablecoinSystemCreateVaultTxRequestToJSON(requestParameters['stablecoinSystemCreateVaultTxRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChainActivityFromJSON(jsonValue));
    }

    /**
     * Create vault
     * Create vault
     */
    async createStableCoinVault(requestParameters: CreateStableCoinVaultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity> {
        const response = await this.createStableCoinVaultRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deposit collateral
     * Deposit collateral
     */
    async depositStableCoinCollateralRaw(requestParameters: DepositStableCoinCollateralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>> {
        if (requestParameters['stablecoinSystemDepositCollateralTxRequest'] == null) {
            throw new runtime.RequiredError(
                'stablecoinSystemDepositCollateralTxRequest',
                'Required parameter "stablecoinSystemDepositCollateralTxRequest" was null or undefined when calling depositStableCoinCollateral().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/stablecoinsystem/tx/depositcollateral`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StablecoinSystemDepositCollateralTxRequestToJSON(requestParameters['stablecoinSystemDepositCollateralTxRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChainActivityFromJSON(jsonValue));
    }

    /**
     * Deposit collateral
     * Deposit collateral
     */
    async depositStableCoinCollateral(requestParameters: DepositStableCoinCollateralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity> {
        const response = await this.depositStableCoinCollateralRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * exit Gem token (which can be used as collateral) from Vat contract
     * exit Gem token (which can be used as collateral) from Vat contract
     */
    async exitGemTransactionRaw(requestParameters: ExitGemTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>> {
        if (requestParameters['stablecoinSystemGemexitTxRequest'] == null) {
            throw new runtime.RequiredError(
                'stablecoinSystemGemexitTxRequest',
                'Required parameter "stablecoinSystemGemexitTxRequest" was null or undefined when calling exitGemTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/stablecoinsystem/auctions/tx/gemexit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StablecoinSystemGemexitTxRequestToJSON(requestParameters['stablecoinSystemGemexitTxRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChainActivityFromJSON(jsonValue));
    }

    /**
     * exit Gem token (which can be used as collateral) from Vat contract
     * exit Gem token (which can be used as collateral) from Vat contract
     */
    async exitGemTransaction(requestParameters: ExitGemTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity> {
        const response = await this.exitGemTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * exit ZAR token from Vat contract
     * exit ZAR token from Vat contract
     */
    async exitZarTransactionRaw(requestParameters: ExitZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>> {
        if (requestParameters['stablecoinSystemZarexitTxRequest'] == null) {
            throw new runtime.RequiredError(
                'stablecoinSystemZarexitTxRequest',
                'Required parameter "stablecoinSystemZarexitTxRequest" was null or undefined when calling exitZarTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/stablecoinsystem/auctions/tx/zarexit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StablecoinSystemZarexitTxRequestToJSON(requestParameters['stablecoinSystemZarexitTxRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChainActivityFromJSON(jsonValue));
    }

    /**
     * exit ZAR token from Vat contract
     * exit ZAR token from Vat contract
     */
    async exitZarTransaction(requestParameters: ExitZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity> {
        const response = await this.exitZarTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all available ilks.
     * Get all Ilks
     */
    async getAllIlksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IlksResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/ilks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IlksResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all available ilks.
     * Get all Ilks
     */
    async getAllIlks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IlksResponse> {
        const response = await this.getAllIlksRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get collector data
     * Get collector data
     */
    async getCollectorDataRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Stats>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/stats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatsFromJSON(jsonValue));
    }

    /**
     * Get collector data
     * Get collector data
     */
    async getCollectorData(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Stats> {
        const response = await this.getCollectorDataRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve an Ilk by providing its name.
     * Get Ilk by name
     */
    async getIlkByNameRaw(requestParameters: GetIlkByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ilk>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getIlkByName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/ilks/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IlkFromJSON(jsonValue));
    }

    /**
     * Retrieve an Ilk by providing its name.
     * Get Ilk by name
     */
    async getIlkByName(requestParameters: GetIlkByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ilk> {
        const response = await this.getIlkByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a vault by ID
     */
    async getVaultByIdRaw(requestParameters: GetVaultByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vault>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getVaultById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/vaults/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VaultFromJSON(jsonValue));
    }

    /**
     * Get a vault by ID
     */
    async getVaultById(requestParameters: GetVaultByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vault> {
        const response = await this.getVaultByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get vault events by ID
     */
    async getVaultEventsByIdRaw(requestParameters: GetVaultEventsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VaultEventsResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getVaultEventsById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/vaults/{id}/events`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VaultEventsResponseFromJSON(jsonValue));
    }

    /**
     * Get vault events by ID
     */
    async getVaultEventsById(requestParameters: GetVaultEventsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VaultEventsResponse> {
        const response = await this.getVaultEventsByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get vaults by owner query
     */
    async getVaultsByOwnerRaw(requestParameters: GetVaultsByOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VaultsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['owner'] != null) {
            queryParameters['owner'] = requestParameters['owner'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/vaults`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VaultsResponseFromJSON(jsonValue));
    }

    /**
     * Get vaults by owner query
     */
    async getVaultsByOwner(requestParameters: GetVaultsByOwnerRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VaultsResponse> {
        const response = await this.getVaultsByOwnerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * liquidate a vault
     * liquidate a vault
     */
    async liquidateVaultTransactionRaw(requestParameters: LiquidateVaultTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>> {
        if (requestParameters['stablecoinSystemBarkTxRequest'] == null) {
            throw new runtime.RequiredError(
                'stablecoinSystemBarkTxRequest',
                'Required parameter "stablecoinSystemBarkTxRequest" was null or undefined when calling liquidateVaultTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/stablecoinsystem/tx/bark`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StablecoinSystemBarkTxRequestToJSON(requestParameters['stablecoinSystemBarkTxRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChainActivityFromJSON(jsonValue));
    }

    /**
     * liquidate a vault
     * liquidate a vault
     */
    async liquidateVaultTransaction(requestParameters: LiquidateVaultTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity> {
        const response = await this.liquidateVaultTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mint ZAR
     * Mint ZAR
     */
    async mintZarTransactionRaw(requestParameters: MintZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>> {
        if (requestParameters['stablecoinSystemMintZarTxRequest'] == null) {
            throw new runtime.RequiredError(
                'stablecoinSystemMintZarTxRequest',
                'Required parameter "stablecoinSystemMintZarTxRequest" was null or undefined when calling mintZarTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/stablecoinsystem/tx/mintzar`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StablecoinSystemMintZarTxRequestToJSON(requestParameters['stablecoinSystemMintZarTxRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChainActivityFromJSON(jsonValue));
    }

    /**
     * Mint ZAR
     * Mint ZAR
     */
    async mintZarTransaction(requestParameters: MintZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity> {
        const response = await this.mintZarTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Repay ZAR
     * Repay ZAR
     */
    async repayZarTransactionRaw(requestParameters: RepayZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>> {
        if (requestParameters['stablecoinSystemRepayZarTxRequest'] == null) {
            throw new runtime.RequiredError(
                'stablecoinSystemRepayZarTxRequest',
                'Required parameter "stablecoinSystemRepayZarTxRequest" was null or undefined when calling repayZarTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/stablecoinsystem/tx/repayzar`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StablecoinSystemRepayZarTxRequestToJSON(requestParameters['stablecoinSystemRepayZarTxRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChainActivityFromJSON(jsonValue));
    }

    /**
     * Repay ZAR
     * Repay ZAR
     */
    async repayZarTransaction(requestParameters: RepayZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity> {
        const response = await this.repayZarTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * reset a auction
     * reset a auction
     */
    async resetAuctionTransactionRaw(requestParameters: ResetAuctionTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>> {
        if (requestParameters['stablecoinSystemRedoTxRequest'] == null) {
            throw new runtime.RequiredError(
                'stablecoinSystemRedoTxRequest',
                'Required parameter "stablecoinSystemRedoTxRequest" was null or undefined when calling resetAuctionTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/stablecoinsystem/auctions/tx/redo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StablecoinSystemRedoTxRequestToJSON(requestParameters['stablecoinSystemRedoTxRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChainActivityFromJSON(jsonValue));
    }

    /**
     * reset a auction
     * reset a auction
     */
    async resetAuctionTransaction(requestParameters: ResetAuctionTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity> {
        const response = await this.resetAuctionTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * take a auction
     * take a auction
     */
    async takeAuctionTransactionRaw(requestParameters: TakeAuctionTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>> {
        if (requestParameters['stablecoinSystemTakeTxRequest'] == null) {
            throw new runtime.RequiredError(
                'stablecoinSystemTakeTxRequest',
                'Required parameter "stablecoinSystemTakeTxRequest" was null or undefined when calling takeAuctionTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/stablecoinsystem/auctions/tx/take`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StablecoinSystemTakeTxRequestToJSON(requestParameters['stablecoinSystemTakeTxRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChainActivityFromJSON(jsonValue));
    }

    /**
     * take a auction
     * take a auction
     */
    async takeAuctionTransaction(requestParameters: TakeAuctionTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity> {
        const response = await this.takeAuctionTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Withdraw collateral
     * Withdraw collateral
     */
    async withdrawCollateralTransactionRaw(requestParameters: WithdrawCollateralTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>> {
        if (requestParameters['stablecoinSystemWithdrawCollateralTxRequest'] == null) {
            throw new runtime.RequiredError(
                'stablecoinSystemWithdrawCollateralTxRequest',
                'Required parameter "stablecoinSystemWithdrawCollateralTxRequest" was null or undefined when calling withdrawCollateralTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/stablecoinsystem/tx/withdrawcollateral`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StablecoinSystemWithdrawCollateralTxRequestToJSON(requestParameters['stablecoinSystemWithdrawCollateralTxRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChainActivityFromJSON(jsonValue));
    }

    /**
     * Withdraw collateral
     * Withdraw collateral
     */
    async withdrawCollateralTransaction(requestParameters: WithdrawCollateralTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity> {
        const response = await this.withdrawCollateralTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetVaultEventsByIdTypeEnum = {
    Repay: 'repay',
    Deposit: 'deposit',
    Withdraw: 'withdraw',
    Mint: 'mint'
} as const;
export type GetVaultEventsByIdTypeEnum = typeof GetVaultEventsByIdTypeEnum[keyof typeof GetVaultEventsByIdTypeEnum];
