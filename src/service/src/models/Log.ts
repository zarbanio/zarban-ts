/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Timestamp } from './Timestamp';
import {
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
    TimestampToJSONTyped,
} from './Timestamp';

/**
 * 
 * @export
 * @interface Log
 */
export interface Log {
    /**
     * The name of the log
     * @type {string}
     * @memberof Log
     */
    name: string;
    /**
     * The contract address
     * @type {string}
     * @memberof Log
     */
    contract: string;
    /**
     * 
     * @type {Timestamp}
     * @memberof Log
     */
    timestamp: Timestamp;
    /**
     * The Ethereum address
     * @type {string}
     * @memberof Log
     */
    address: string;
    /**
     * The block number
     * @type {number}
     * @memberof Log
     */
    blockNumber: number;
    /**
     * The transaction hash
     * @type {string}
     * @memberof Log
     */
    txHash: string;
    /**
     * The block hash
     * @type {string}
     * @memberof Log
     */
    blockHash: string;
    /**
     * The index
     * @type {number}
     * @memberof Log
     */
    index: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Log
     */
    topics: Array<string>;
    /**
     * The data of the log
     * @type {string}
     * @memberof Log
     */
    data: string;
    /**
     * The decoded log, if available
     * @type {{ [key: string]: string | undefined; }}
     * @memberof Log
     */
    decoded?: { [key: string]: string | undefined; };
}

/**
 * Check if a given object implements the Log interface.
 */
export function instanceOfLog(value: object): value is Log {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('contract' in value) || value['contract'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    if (!('address' in value) || value['address'] === undefined) return false;
    if (!('blockNumber' in value) || value['blockNumber'] === undefined) return false;
    if (!('txHash' in value) || value['txHash'] === undefined) return false;
    if (!('blockHash' in value) || value['blockHash'] === undefined) return false;
    if (!('index' in value) || value['index'] === undefined) return false;
    if (!('topics' in value) || value['topics'] === undefined) return false;
    if (!('data' in value) || value['data'] === undefined) return false;
    return true;
}

export function LogFromJSON(json: any): Log {
    return LogFromJSONTyped(json, false);
}

export function LogFromJSONTyped(json: any, ignoreDiscriminator: boolean): Log {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'contract': json['contract'],
        'timestamp': TimestampFromJSON(json['timestamp']),
        'address': json['address'],
        'blockNumber': json['blockNumber'],
        'txHash': json['txHash'],
        'blockHash': json['blockHash'],
        'index': json['index'],
        'topics': json['topics'],
        'data': json['data'],
        'decoded': json['decoded'] == null ? undefined : json['decoded'],
    };
}

export function LogToJSON(json: any): Log {
    return LogToJSONTyped(json, false);
}

export function LogToJSONTyped(value?: Log | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'contract': value['contract'],
        'timestamp': TimestampToJSON(value['timestamp']),
        'address': value['address'],
        'blockNumber': value['blockNumber'],
        'txHash': value['txHash'],
        'blockHash': value['blockHash'],
        'index': value['index'],
        'topics': value['topics'],
        'data': value['data'],
        'decoded': value['decoded'],
    };
}

