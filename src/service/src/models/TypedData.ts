/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Type } from './Type';
import {
    TypeFromJSON,
    TypeFromJSONTyped,
    TypeToJSON,
    TypeToJSONTyped,
} from './Type';
import type { TypedDataDomain } from './TypedDataDomain';
import {
    TypedDataDomainFromJSON,
    TypedDataDomainFromJSONTyped,
    TypedDataDomainToJSON,
    TypedDataDomainToJSONTyped,
} from './TypedDataDomain';

/**
 * 
 * @export
 * @interface TypedData
 */
export interface TypedData {
    /**
     * A map where each key is a string and each value is a list of Type
     * @type {{ [key: string]: Array<Type> | undefined; }}
     * @memberof TypedData
     */
    types: { [key: string]: Array<Type> | undefined; };
    /**
     * 
     * @type {string}
     * @memberof TypedData
     */
    primaryType: string;
    /**
     * 
     * @type {TypedDataDomain}
     * @memberof TypedData
     */
    domain: TypedDataDomain;
    /**
     * 
     * @type {{ [key: string]: any | undefined; }}
     * @memberof TypedData
     */
    message: { [key: string]: any | undefined; };
}

/**
 * Check if a given object implements the TypedData interface.
 */
export function instanceOfTypedData(value: object): value is TypedData {
    if (!('types' in value) || value['types'] === undefined) return false;
    if (!('primaryType' in value) || value['primaryType'] === undefined) return false;
    if (!('domain' in value) || value['domain'] === undefined) return false;
    if (!('message' in value) || value['message'] === undefined) return false;
    return true;
}

export function TypedDataFromJSON(json: any): TypedData {
    return TypedDataFromJSONTyped(json, false);
}

export function TypedDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): TypedData {
    if (json == null) {
        return json;
    }
    return {
        
        'types': json['types'],
        'primaryType': json['primaryType'],
        'domain': TypedDataDomainFromJSON(json['domain']),
        'message': json['message'],
    };
}

export function TypedDataToJSON(json: any): TypedData {
    return TypedDataToJSONTyped(json, false);
}

export function TypedDataToJSONTyped(value?: TypedData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'types': value['types'],
        'primaryType': value['primaryType'],
        'domain': TypedDataDomainToJSON(value['domain']),
        'message': value['message'],
    };
}

