/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Token } from './Token';
import {
    TokenFromJSON,
    TokenFromJSONTyped,
    TokenToJSON,
    TokenToJSONTyped,
} from './Token';
import type { Timestamp } from './Timestamp';
import {
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
    TimestampToJSONTyped,
} from './Timestamp';

/**
 * 
 * @export
 * @interface StakePlan
 */
export interface StakePlan {
    /**
     * Name of staking plan
     * @type {string}
     * @memberof StakePlan
     */
    planName: string;
    /**
     * Ethereum address of the staking contract
     * @type {string}
     * @memberof StakePlan
     */
    contractAddress: string;
    /**
     * Annual percentage yield of the staking plan
     * @type {string}
     * @memberof StakePlan
     */
    apy: string;
    /**
     * 
     * @type {Token}
     * @memberof StakePlan
     */
    stakeToken: Token;
    /**
     * 
     * @type {Token}
     * @memberof StakePlan
     */
    rewardToken: Token;
    /**
     * 
     * @type {Timestamp}
     * @memberof StakePlan
     */
    finishAt: Timestamp;
}

/**
 * Check if a given object implements the StakePlan interface.
 */
export function instanceOfStakePlan(value: object): value is StakePlan {
    if (!('planName' in value) || value['planName'] === undefined) return false;
    if (!('contractAddress' in value) || value['contractAddress'] === undefined) return false;
    if (!('apy' in value) || value['apy'] === undefined) return false;
    if (!('stakeToken' in value) || value['stakeToken'] === undefined) return false;
    if (!('rewardToken' in value) || value['rewardToken'] === undefined) return false;
    if (!('finishAt' in value) || value['finishAt'] === undefined) return false;
    return true;
}

export function StakePlanFromJSON(json: any): StakePlan {
    return StakePlanFromJSONTyped(json, false);
}

export function StakePlanFromJSONTyped(json: any, ignoreDiscriminator: boolean): StakePlan {
    if (json == null) {
        return json;
    }
    return {
        
        'planName': json['planName'],
        'contractAddress': json['contractAddress'],
        'apy': json['apy'],
        'stakeToken': TokenFromJSON(json['stakeToken']),
        'rewardToken': TokenFromJSON(json['rewardToken']),
        'finishAt': TimestampFromJSON(json['finishAt']),
    };
}

export function StakePlanToJSON(json: any): StakePlan {
    return StakePlanToJSONTyped(json, false);
}

export function StakePlanToJSONTyped(value?: StakePlan | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'planName': value['planName'],
        'contractAddress': value['contractAddress'],
        'apy': value['apy'],
        'stakeToken': TokenToJSON(value['stakeToken']),
        'rewardToken': TokenToJSON(value['rewardToken']),
        'finishAt': TimestampToJSON(value['finishAt']),
    };
}

