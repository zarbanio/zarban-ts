/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Ilk } from './Ilk';
import {
    IlkFromJSON,
    IlkFromJSONTyped,
    IlkToJSON,
    IlkToJSONTyped,
} from './Ilk';

/**
 * 
 * @export
 * @interface Vault
 */
export interface Vault {
    /**
     * Identifier for the vault.
     * @type {number}
     * @memberof Vault
     */
    id: number;
    /**
     * Ethereum address of the vault owner.
     * @type {string}
     * @memberof Vault
     */
    owner: string;
    /**
     * Ethereum address of the vault urn.
     * @type {string}
     * @memberof Vault
     */
    urn: string;
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof Vault
     */
    liquidationPrice: { [key: string]: string | undefined; };
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof Vault
     */
    collateralLocked: { [key: string]: string | undefined; };
    /**
     * The collateralization ratio of the vault.
     * @type {string}
     * @memberof Vault
     */
    collateralizationRatio: string;
    /**
     * The loan to value of the vault.
     * @type {string}
     * @memberof Vault
     */
    loanToValue: string;
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof Vault
     */
    debt: { [key: string]: string | undefined; };
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof Vault
     */
    availableToWithdraw: { [key: string]: string | undefined; };
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof Vault
     */
    availableToMint: { [key: string]: string | undefined; };
    /**
     * 
     * @type {Ilk}
     * @memberof Vault
     */
    ilk: Ilk;
}

/**
 * Check if a given object implements the Vault interface.
 */
export function instanceOfVault(value: object): value is Vault {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('owner' in value) || value['owner'] === undefined) return false;
    if (!('urn' in value) || value['urn'] === undefined) return false;
    if (!('liquidationPrice' in value) || value['liquidationPrice'] === undefined) return false;
    if (!('collateralLocked' in value) || value['collateralLocked'] === undefined) return false;
    if (!('collateralizationRatio' in value) || value['collateralizationRatio'] === undefined) return false;
    if (!('loanToValue' in value) || value['loanToValue'] === undefined) return false;
    if (!('debt' in value) || value['debt'] === undefined) return false;
    if (!('availableToWithdraw' in value) || value['availableToWithdraw'] === undefined) return false;
    if (!('availableToMint' in value) || value['availableToMint'] === undefined) return false;
    if (!('ilk' in value) || value['ilk'] === undefined) return false;
    return true;
}

export function VaultFromJSON(json: any): Vault {
    return VaultFromJSONTyped(json, false);
}

export function VaultFromJSONTyped(json: any, ignoreDiscriminator: boolean): Vault {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'owner': json['owner'],
        'urn': json['urn'],
        'liquidationPrice': json['liquidationPrice'],
        'collateralLocked': json['collateralLocked'],
        'collateralizationRatio': json['collateralizationRatio'],
        'loanToValue': json['loanToValue'],
        'debt': json['debt'],
        'availableToWithdraw': json['availableToWithdraw'],
        'availableToMint': json['availableToMint'],
        'ilk': IlkFromJSON(json['ilk']),
    };
}

export function VaultToJSON(json: any): Vault {
    return VaultToJSONTyped(json, false);
}

export function VaultToJSONTyped(value?: Vault | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'owner': value['owner'],
        'urn': value['urn'],
        'liquidationPrice': value['liquidationPrice'],
        'collateralLocked': value['collateralLocked'],
        'collateralizationRatio': value['collateralizationRatio'],
        'loanToValue': value['loanToValue'],
        'debt': value['debt'],
        'availableToWithdraw': value['availableToWithdraw'],
        'availableToMint': value['availableToMint'],
        'ilk': IlkToJSON(value['ilk']),
    };
}

