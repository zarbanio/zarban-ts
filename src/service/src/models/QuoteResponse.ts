/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OrderType } from './OrderType';
import {
    OrderTypeFromJSON,
    OrderTypeFromJSONTyped,
    OrderTypeToJSON,
    OrderTypeToJSONTyped,
} from './OrderType';
import type { TypedData } from './TypedData';
import {
    TypedDataFromJSON,
    TypedDataFromJSONTyped,
    TypedDataToJSON,
    TypedDataToJSONTyped,
} from './TypedData';
import type { RouteItem } from './RouteItem';
import {
    RouteItemFromJSON,
    RouteItemFromJSONTyped,
    RouteItemToJSON,
    RouteItemToJSONTyped,
} from './RouteItem';
import type { OrderInfo } from './OrderInfo';
import {
    OrderInfoFromJSON,
    OrderInfoFromJSONTyped,
    OrderInfoToJSON,
    OrderInfoToJSONTyped,
} from './OrderInfo';
import type { MethodParameters } from './MethodParameters';
import {
    MethodParametersFromJSON,
    MethodParametersFromJSONTyped,
    MethodParametersToJSON,
    MethodParametersToJSONTyped,
} from './MethodParameters';
import type { TradeType } from './TradeType';
import {
    TradeTypeFromJSON,
    TradeTypeFromJSONTyped,
    TradeTypeToJSON,
    TradeTypeToJSONTyped,
} from './TradeType';
import type { Timestamp } from './Timestamp';
import {
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
    TimestampToJSONTyped,
} from './Timestamp';

/**
 * 
 * @export
 * @interface QuoteResponse
 */
export interface QuoteResponse {
    /**
     * 
     * @type {OrderType}
     * @memberof QuoteResponse
     */
    type: OrderType;
    /**
     * 
     * @type {TradeType}
     * @memberof QuoteResponse
     */
    tradeType: TradeType;
    /**
     * 
     * @type {Timestamp}
     * @memberof QuoteResponse
     */
    time: Timestamp;
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof QuoteResponse
     */
    amount: { [key: string]: string | undefined; };
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof QuoteResponse
     */
    quote: { [key: string]: string | undefined; };
    /**
     * 
     * @type {string}
     * @memberof QuoteResponse
     */
    quoteId: string;
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof QuoteResponse
     */
    gasPrice: { [key: string]: string | undefined; };
    /**
     * 
     * @type {number}
     * @memberof QuoteResponse
     */
    gasUseEstimate: number;
    /**
     * 
     * @type {{ [key: string]: string | undefined; }}
     * @memberof QuoteResponse
     */
    gasFeeEstimate: { [key: string]: string | undefined; };
    /**
     * 
     * @type {string}
     * @memberof QuoteResponse
     */
    routeString: string;
    /**
     * 
     * @type {MethodParameters}
     * @memberof QuoteResponse
     */
    methodParameters?: MethodParameters;
    /**
     * 
     * @type {Array<RouteItem>}
     * @memberof QuoteResponse
     */
    route: Array<RouteItem>;
    /**
     * 
     * @type {OrderInfo}
     * @memberof QuoteResponse
     */
    orderInfo?: OrderInfo;
    /**
     * 
     * @type {string}
     * @memberof QuoteResponse
     */
    encodedOrder?: string;
    /**
     * 
     * @type {string}
     * @memberof QuoteResponse
     */
    orderHash?: string;
    /**
     * 
     * @type {TypedData}
     * @memberof QuoteResponse
     */
    permitData?: TypedData;
}



/**
 * Check if a given object implements the QuoteResponse interface.
 */
export function instanceOfQuoteResponse(value: object): value is QuoteResponse {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('tradeType' in value) || value['tradeType'] === undefined) return false;
    if (!('time' in value) || value['time'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('quote' in value) || value['quote'] === undefined) return false;
    if (!('quoteId' in value) || value['quoteId'] === undefined) return false;
    if (!('gasPrice' in value) || value['gasPrice'] === undefined) return false;
    if (!('gasUseEstimate' in value) || value['gasUseEstimate'] === undefined) return false;
    if (!('gasFeeEstimate' in value) || value['gasFeeEstimate'] === undefined) return false;
    if (!('routeString' in value) || value['routeString'] === undefined) return false;
    if (!('route' in value) || value['route'] === undefined) return false;
    return true;
}

export function QuoteResponseFromJSON(json: any): QuoteResponse {
    return QuoteResponseFromJSONTyped(json, false);
}

export function QuoteResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuoteResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'type': OrderTypeFromJSON(json['type']),
        'tradeType': TradeTypeFromJSON(json['tradeType']),
        'time': TimestampFromJSON(json['time']),
        'amount': json['amount'],
        'quote': json['quote'],
        'quoteId': json['quoteId'],
        'gasPrice': json['gasPrice'],
        'gasUseEstimate': json['gasUseEstimate'],
        'gasFeeEstimate': json['gasFeeEstimate'],
        'routeString': json['routeString'],
        'methodParameters': json['methodParameters'] == null ? undefined : MethodParametersFromJSON(json['methodParameters']),
        'route': ((json['route'] as Array<any>).map(RouteItemFromJSON)),
        'orderInfo': json['orderInfo'] == null ? undefined : OrderInfoFromJSON(json['orderInfo']),
        'encodedOrder': json['encodedOrder'] == null ? undefined : json['encodedOrder'],
        'orderHash': json['orderHash'] == null ? undefined : json['orderHash'],
        'permitData': json['permitData'] == null ? undefined : TypedDataFromJSON(json['permitData']),
    };
}

export function QuoteResponseToJSON(json: any): QuoteResponse {
    return QuoteResponseToJSONTyped(json, false);
}

export function QuoteResponseToJSONTyped(value?: QuoteResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': OrderTypeToJSON(value['type']),
        'tradeType': TradeTypeToJSON(value['tradeType']),
        'time': TimestampToJSON(value['time']),
        'amount': value['amount'],
        'quote': value['quote'],
        'quoteId': value['quoteId'],
        'gasPrice': value['gasPrice'],
        'gasUseEstimate': value['gasUseEstimate'],
        'gasFeeEstimate': value['gasFeeEstimate'],
        'routeString': value['routeString'],
        'methodParameters': MethodParametersToJSON(value['methodParameters']),
        'route': ((value['route'] as Array<any>).map(RouteItemToJSON)),
        'orderInfo': OrderInfoToJSON(value['orderInfo']),
        'encodedOrder': value['encodedOrder'],
        'orderHash': value['orderHash'],
        'permitData': TypedDataToJSON(value['permitData']),
    };
}

