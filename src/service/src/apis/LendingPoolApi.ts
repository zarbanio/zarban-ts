/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FormattedReserveData,
  LendingpoolBorrowTxRequest,
  LendingpoolBorrowTxResponse,
  LendingpoolDepositTxRequest,
  LendingpoolDepositTxResponse,
  LendingpoolRepayTxRequest,
  LendingpoolRepayTxResponse,
  LendingpoolUseAssetAsCollateralTxRequest,
  LendingpoolUseAssetAsCollateralTxResponse,
  LendingpoolWithdrawTxRequest,
  LendingpoolWithdrawTxResponse,
  UserBorrowsResponse,
  UserDepositsResponse,
  UserError,
} from '../models/index';
import {
    FormattedReserveDataFromJSON,
    FormattedReserveDataToJSON,
    LendingpoolBorrowTxRequestFromJSON,
    LendingpoolBorrowTxRequestToJSON,
    LendingpoolBorrowTxResponseFromJSON,
    LendingpoolBorrowTxResponseToJSON,
    LendingpoolDepositTxRequestFromJSON,
    LendingpoolDepositTxRequestToJSON,
    LendingpoolDepositTxResponseFromJSON,
    LendingpoolDepositTxResponseToJSON,
    LendingpoolRepayTxRequestFromJSON,
    LendingpoolRepayTxRequestToJSON,
    LendingpoolRepayTxResponseFromJSON,
    LendingpoolRepayTxResponseToJSON,
    LendingpoolUseAssetAsCollateralTxRequestFromJSON,
    LendingpoolUseAssetAsCollateralTxRequestToJSON,
    LendingpoolUseAssetAsCollateralTxResponseFromJSON,
    LendingpoolUseAssetAsCollateralTxResponseToJSON,
    LendingpoolWithdrawTxRequestFromJSON,
    LendingpoolWithdrawTxRequestToJSON,
    LendingpoolWithdrawTxResponseFromJSON,
    LendingpoolWithdrawTxResponseToJSON,
    UserBorrowsResponseFromJSON,
    UserBorrowsResponseToJSON,
    UserDepositsResponseFromJSON,
    UserDepositsResponseToJSON,
    UserErrorFromJSON,
    UserErrorToJSON,
} from '../models/index';

export interface CreateLendingPoolBorrowRequest {
    lendingpoolBorrowTxRequest: LendingpoolBorrowTxRequest;
}

export interface CreateLendingPoolDepositRequest {
    lendingpoolDepositTxRequest: LendingpoolDepositTxRequest;
}

export interface CreateLendingPoolRepayRequest {
    lendingpoolRepayTxRequest: LendingpoolRepayTxRequest;
}

export interface CreateLendingPoolWithdrawRequest {
    lendingpoolWithdrawTxRequest: LendingpoolWithdrawTxRequest;
}

export interface FetchReserveDataByAssetRequest {
    asset?: string;
}

export interface GetUserBorrowsRequest {
    user?: string;
    reserve?: string;
    cursor?: number;
    limit?: number;
}

export interface GetUserDepositsRequest {
    user?: string;
    reserve?: string;
    cursor?: number;
    limit?: number;
}

export interface SetLendingPoolAssetCollateralRequest {
    lendingpoolUseAssetAsCollateralTxRequest: LendingpoolUseAssetAsCollateralTxRequest;
}

/**
 * LendingPoolApi - interface
 * 
 * @export
 * @interface LendingPoolApiInterface
 */
export interface LendingPoolApiInterface {
    /**
     * Borrow from lending pool
     * @summary Borrow from lending pool
     * @param {LendingpoolBorrowTxRequest} lendingpoolBorrowTxRequest Borrow transaction request, if amount is not provided, it will be calculated based on the token balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApiInterface
     */
    createLendingPoolBorrowRaw(requestParameters: CreateLendingPoolBorrowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LendingpoolBorrowTxResponse>>;

    /**
     * Borrow from lending pool
     * Borrow from lending pool
     */
    createLendingPoolBorrow(requestParameters: CreateLendingPoolBorrowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LendingpoolBorrowTxResponse>;

    /**
     * Deposit to lending pool
     * @summary Deposit to lending pool
     * @param {LendingpoolDepositTxRequest} lendingpoolDepositTxRequest Deposit transaction request, if amount is not provided, it will be calculated based on the token balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApiInterface
     */
    createLendingPoolDepositRaw(requestParameters: CreateLendingPoolDepositRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LendingpoolDepositTxResponse>>;

    /**
     * Deposit to lending pool
     * Deposit to lending pool
     */
    createLendingPoolDeposit(requestParameters: CreateLendingPoolDepositRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LendingpoolDepositTxResponse>;

    /**
     * Repay to lending pool
     * @summary Repay to lending pool
     * @param {LendingpoolRepayTxRequest} lendingpoolRepayTxRequest Repay transaction request, if amount is not provided, it will repay the maximum possible amount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApiInterface
     */
    createLendingPoolRepayRaw(requestParameters: CreateLendingPoolRepayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LendingpoolRepayTxResponse>>;

    /**
     * Repay to lending pool
     * Repay to lending pool
     */
    createLendingPoolRepay(requestParameters: CreateLendingPoolRepayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LendingpoolRepayTxResponse>;

    /**
     * Withdraw from lending pool
     * @summary Withdraw from lending pool
     * @param {LendingpoolWithdrawTxRequest} lendingpoolWithdrawTxRequest Withdraw transaction request, if amount is not provided, it will be calculated based on the user account status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApiInterface
     */
    createLendingPoolWithdrawRaw(requestParameters: CreateLendingPoolWithdrawRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LendingpoolWithdrawTxResponse>>;

    /**
     * Withdraw from lending pool
     * Withdraw from lending pool
     */
    createLendingPoolWithdraw(requestParameters: CreateLendingPoolWithdrawRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LendingpoolWithdrawTxResponse>;

    /**
     * Retrieve data of reserves
     * @summary Fetch Reserve Data By Asset
     * @param {string} [asset] The asset address in hexadecimal format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApiInterface
     */
    fetchReserveDataByAssetRaw(requestParameters: FetchReserveDataByAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormattedReserveData>>;

    /**
     * Retrieve data of reserves
     * Fetch Reserve Data By Asset
     */
    fetchReserveDataByAsset(requestParameters: FetchReserveDataByAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormattedReserveData>;

    /**
     * Get user borrows of lendingpool
     * @summary Get user borrows of lendingpool
     * @param {string} [user] Ethereum address of the user
     * @param {string} [reserve] Ethereum address of the reserve
     * @param {number} [cursor] Cursor for pagination
     * @param {number} [limit] Limit the number of deposits returned (default is 50)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApiInterface
     */
    getUserBorrowsRaw(requestParameters: GetUserBorrowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserBorrowsResponse>>;

    /**
     * Get user borrows of lendingpool
     * Get user borrows of lendingpool
     */
    getUserBorrows(requestParameters: GetUserBorrowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserBorrowsResponse>;

    /**
     * Get user deposits of Lendingpool
     * @summary Get user deposits of Lendingpool
     * @param {string} [user] Ethereum address of the user
     * @param {string} [reserve] Ethereum address of the reserve
     * @param {number} [cursor] Cursor for pagination
     * @param {number} [limit] Limit the number of deposits returned (default is 50)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApiInterface
     */
    getUserDepositsRaw(requestParameters: GetUserDepositsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDepositsResponse>>;

    /**
     * Get user deposits of Lendingpool
     * Get user deposits of Lendingpool
     */
    getUserDeposits(requestParameters: GetUserDepositsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDepositsResponse>;

    /**
     * Allows to enable/disable a specific asset as collateral
     * @summary Enable/Disable asset as collateral
     * @param {LendingpoolUseAssetAsCollateralTxRequest} lendingpoolUseAssetAsCollateralTxRequest UseAssetAsCollateral transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApiInterface
     */
    setLendingPoolAssetCollateralRaw(requestParameters: SetLendingPoolAssetCollateralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LendingpoolUseAssetAsCollateralTxResponse>>;

    /**
     * Allows to enable/disable a specific asset as collateral
     * Enable/Disable asset as collateral
     */
    setLendingPoolAssetCollateral(requestParameters: SetLendingPoolAssetCollateralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LendingpoolUseAssetAsCollateralTxResponse>;

}

/**
 * 
 */
export class LendingPoolApi extends runtime.BaseAPI implements LendingPoolApiInterface {

    /**
     * Borrow from lending pool
     * Borrow from lending pool
     */
    async createLendingPoolBorrowRaw(requestParameters: CreateLendingPoolBorrowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LendingpoolBorrowTxResponse>> {
        if (requestParameters['lendingpoolBorrowTxRequest'] == null) {
            throw new runtime.RequiredError(
                'lendingpoolBorrowTxRequest',
                'Required parameter "lendingpoolBorrowTxRequest" was null or undefined when calling createLendingPoolBorrow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/lendingpool/tx/borrow`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LendingpoolBorrowTxRequestToJSON(requestParameters['lendingpoolBorrowTxRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LendingpoolBorrowTxResponseFromJSON(jsonValue));
    }

    /**
     * Borrow from lending pool
     * Borrow from lending pool
     */
    async createLendingPoolBorrow(requestParameters: CreateLendingPoolBorrowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LendingpoolBorrowTxResponse> {
        const response = await this.createLendingPoolBorrowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deposit to lending pool
     * Deposit to lending pool
     */
    async createLendingPoolDepositRaw(requestParameters: CreateLendingPoolDepositRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LendingpoolDepositTxResponse>> {
        if (requestParameters['lendingpoolDepositTxRequest'] == null) {
            throw new runtime.RequiredError(
                'lendingpoolDepositTxRequest',
                'Required parameter "lendingpoolDepositTxRequest" was null or undefined when calling createLendingPoolDeposit().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/lendingpool/tx/deposit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LendingpoolDepositTxRequestToJSON(requestParameters['lendingpoolDepositTxRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LendingpoolDepositTxResponseFromJSON(jsonValue));
    }

    /**
     * Deposit to lending pool
     * Deposit to lending pool
     */
    async createLendingPoolDeposit(requestParameters: CreateLendingPoolDepositRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LendingpoolDepositTxResponse> {
        const response = await this.createLendingPoolDepositRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Repay to lending pool
     * Repay to lending pool
     */
    async createLendingPoolRepayRaw(requestParameters: CreateLendingPoolRepayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LendingpoolRepayTxResponse>> {
        if (requestParameters['lendingpoolRepayTxRequest'] == null) {
            throw new runtime.RequiredError(
                'lendingpoolRepayTxRequest',
                'Required parameter "lendingpoolRepayTxRequest" was null or undefined when calling createLendingPoolRepay().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/lendingpool/tx/repay`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LendingpoolRepayTxRequestToJSON(requestParameters['lendingpoolRepayTxRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LendingpoolRepayTxResponseFromJSON(jsonValue));
    }

    /**
     * Repay to lending pool
     * Repay to lending pool
     */
    async createLendingPoolRepay(requestParameters: CreateLendingPoolRepayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LendingpoolRepayTxResponse> {
        const response = await this.createLendingPoolRepayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Withdraw from lending pool
     * Withdraw from lending pool
     */
    async createLendingPoolWithdrawRaw(requestParameters: CreateLendingPoolWithdrawRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LendingpoolWithdrawTxResponse>> {
        if (requestParameters['lendingpoolWithdrawTxRequest'] == null) {
            throw new runtime.RequiredError(
                'lendingpoolWithdrawTxRequest',
                'Required parameter "lendingpoolWithdrawTxRequest" was null or undefined when calling createLendingPoolWithdraw().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/lendingpool/tx/withdraw`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LendingpoolWithdrawTxRequestToJSON(requestParameters['lendingpoolWithdrawTxRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LendingpoolWithdrawTxResponseFromJSON(jsonValue));
    }

    /**
     * Withdraw from lending pool
     * Withdraw from lending pool
     */
    async createLendingPoolWithdraw(requestParameters: CreateLendingPoolWithdrawRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LendingpoolWithdrawTxResponse> {
        const response = await this.createLendingPoolWithdrawRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve data of reserves
     * Fetch Reserve Data By Asset
     */
    async fetchReserveDataByAssetRaw(requestParameters: FetchReserveDataByAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FormattedReserveData>> {
        const queryParameters: any = {};

        if (requestParameters['asset'] != null) {
            queryParameters['asset'] = requestParameters['asset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/lendingpool/reserves`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormattedReserveDataFromJSON(jsonValue));
    }

    /**
     * Retrieve data of reserves
     * Fetch Reserve Data By Asset
     */
    async fetchReserveDataByAsset(requestParameters: FetchReserveDataByAssetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FormattedReserveData> {
        const response = await this.fetchReserveDataByAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user borrows of lendingpool
     * Get user borrows of lendingpool
     */
    async getUserBorrowsRaw(requestParameters: GetUserBorrowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserBorrowsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        if (requestParameters['reserve'] != null) {
            queryParameters['reserve'] = requestParameters['reserve'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/lendingpool/borrows`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserBorrowsResponseFromJSON(jsonValue));
    }

    /**
     * Get user borrows of lendingpool
     * Get user borrows of lendingpool
     */
    async getUserBorrows(requestParameters: GetUserBorrowsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserBorrowsResponse> {
        const response = await this.getUserBorrowsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user deposits of Lendingpool
     * Get user deposits of Lendingpool
     */
    async getUserDepositsRaw(requestParameters: GetUserDepositsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDepositsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        if (requestParameters['reserve'] != null) {
            queryParameters['reserve'] = requestParameters['reserve'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/lendingpool/deposits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDepositsResponseFromJSON(jsonValue));
    }

    /**
     * Get user deposits of Lendingpool
     * Get user deposits of Lendingpool
     */
    async getUserDeposits(requestParameters: GetUserDepositsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDepositsResponse> {
        const response = await this.getUserDepositsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows to enable/disable a specific asset as collateral
     * Enable/Disable asset as collateral
     */
    async setLendingPoolAssetCollateralRaw(requestParameters: SetLendingPoolAssetCollateralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LendingpoolUseAssetAsCollateralTxResponse>> {
        if (requestParameters['lendingpoolUseAssetAsCollateralTxRequest'] == null) {
            throw new runtime.RequiredError(
                'lendingpoolUseAssetAsCollateralTxRequest',
                'Required parameter "lendingpoolUseAssetAsCollateralTxRequest" was null or undefined when calling setLendingPoolAssetCollateral().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v2/lendingpool/tx/useassetascollateral`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LendingpoolUseAssetAsCollateralTxRequestToJSON(requestParameters['lendingpoolUseAssetAsCollateralTxRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LendingpoolUseAssetAsCollateralTxResponseFromJSON(jsonValue));
    }

    /**
     * Allows to enable/disable a specific asset as collateral
     * Enable/Disable asset as collateral
     */
    async setLendingPoolAssetCollateral(requestParameters: SetLendingPoolAssetCollateralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LendingpoolUseAssetAsCollateralTxResponse> {
        const response = await this.setLendingPoolAssetCollateralRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
