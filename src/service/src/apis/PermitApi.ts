/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PermitSingle,
} from '../models/index';
import {
    PermitSingleFromJSON,
    PermitSingleToJSON,
} from '../models/index';

export interface GetSingleTokenPermitRequest {
    token: string;
    user: string;
}

/**
 * PermitApi - interface
 * 
 * @export
 * @interface PermitApiInterface
 */
export interface PermitApiInterface {
    /**
     * Get permit for single token
     * @summary Get permit for single token
     * @param {string} token Ethereum address of the token
     * @param {string} user Ethereum address of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermitApiInterface
     */
    getSingleTokenPermitRaw(requestParameters: GetSingleTokenPermitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermitSingle>>;

    /**
     * Get permit for single token
     * Get permit for single token
     */
    getSingleTokenPermit(requestParameters: GetSingleTokenPermitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermitSingle>;

}

/**
 * 
 */
export class PermitApi extends runtime.BaseAPI implements PermitApiInterface {

    /**
     * Get permit for single token
     * Get permit for single token
     */
    async getSingleTokenPermitRaw(requestParameters: GetSingleTokenPermitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermitSingle>> {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling getSingleTokenPermit().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling getSingleTokenPermit().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/permit/single`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermitSingleFromJSON(jsonValue));
    }

    /**
     * Get permit for single token
     * Get permit for single token
     */
    async getSingleTokenPermit(requestParameters: GetSingleTokenPermitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermitSingle> {
        const response = await this.getSingleTokenPermitRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
