/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Vault,
  VaultEventsResponse,
  VaultsResponse,
} from '../models/index';
import {
    VaultFromJSON,
    VaultToJSON,
    VaultEventsResponseFromJSON,
    VaultEventsResponseToJSON,
    VaultsResponseFromJSON,
    VaultsResponseToJSON,
} from '../models/index';

export interface GetVaultByIdRequest {
    id: number;
}

export interface GetVaultEventsByIdRequest {
    id: number;
    type?: GetVaultEventsByIdTypeEnum;
}

export interface GetVaultsByOwnerRequest {
    owner?: string;
}

/**
 * VaultsApi - interface
 * 
 * @export
 * @interface VaultsApiInterface
 */
export interface VaultsApiInterface {
    /**
     * 
     * @summary Get a vault by ID
     * @param {number} id Vault ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApiInterface
     */
    getVaultByIdRaw(requestParameters: GetVaultByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vault>>;

    /**
     * Get a vault by ID
     */
    getVaultById(requestParameters: GetVaultByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vault>;

    /**
     * 
     * @summary Get vault events by ID
     * @param {number} id Vault ID
     * @param {'repay' | 'deposit' | 'withdraw' | 'mint'} [type] Event type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApiInterface
     */
    getVaultEventsByIdRaw(requestParameters: GetVaultEventsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VaultEventsResponse>>;

    /**
     * Get vault events by ID
     */
    getVaultEventsById(requestParameters: GetVaultEventsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VaultEventsResponse>;

    /**
     * 
     * @summary Get vaults by owner query
     * @param {string} [owner] Ethereum address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApiInterface
     */
    getVaultsByOwnerRaw(requestParameters: GetVaultsByOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VaultsResponse>>;

    /**
     * Get vaults by owner query
     */
    getVaultsByOwner(requestParameters: GetVaultsByOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VaultsResponse>;

}

/**
 * 
 */
export class VaultsApi extends runtime.BaseAPI implements VaultsApiInterface {

    /**
     * Get a vault by ID
     */
    async getVaultByIdRaw(requestParameters: GetVaultByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vault>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getVaultById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/vaults/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VaultFromJSON(jsonValue));
    }

    /**
     * Get a vault by ID
     */
    async getVaultById(requestParameters: GetVaultByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vault> {
        const response = await this.getVaultByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get vault events by ID
     */
    async getVaultEventsByIdRaw(requestParameters: GetVaultEventsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VaultEventsResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getVaultEventsById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/vaults/{id}/events`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VaultEventsResponseFromJSON(jsonValue));
    }

    /**
     * Get vault events by ID
     */
    async getVaultEventsById(requestParameters: GetVaultEventsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VaultEventsResponse> {
        const response = await this.getVaultEventsByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get vaults by owner query
     */
    async getVaultsByOwnerRaw(requestParameters: GetVaultsByOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VaultsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['owner'] != null) {
            queryParameters['owner'] = requestParameters['owner'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2/vaults`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VaultsResponseFromJSON(jsonValue));
    }

    /**
     * Get vaults by owner query
     */
    async getVaultsByOwner(requestParameters: GetVaultsByOwnerRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VaultsResponse> {
        const response = await this.getVaultsByOwnerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetVaultEventsByIdTypeEnum = {
    REPAY: 'repay',
    DEPOSIT: 'deposit',
    WITHDRAW: 'withdraw',
    MINT: 'mint'
} as const;
export type GetVaultEventsByIdTypeEnum = typeof GetVaultEventsByIdTypeEnum[keyof typeof GetVaultEventsByIdTypeEnum];
