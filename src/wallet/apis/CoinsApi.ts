/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Coin,
  CoinResponse,
  Symbol,
} from '../models/index';
import {
    CoinFromJSON,
    CoinToJSON,
    CoinResponseFromJSON,
    CoinResponseToJSON,
    SymbolFromJSON,
    SymbolToJSON,
} from '../models/index';

export interface GetCoinDetailsRequest {
    symbol: Symbol;
}

/**
 * 
 */
export class CoinsApi extends runtime.BaseAPI {

    /**
     * Get the details of a coin.
     * Get coin
     */
    async getCoinDetailsRaw(requestParameters: GetCoinDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Coin>> {
        if (requestParameters['symbol'] == null) {
            throw new runtime.RequiredError(
                'symbol',
                'Required parameter "symbol" was null or undefined when calling getCoinDetails().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coins/{symbol}`.replace(`{${"symbol"}}`, encodeURIComponent(String(requestParameters['symbol']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoinFromJSON(jsonValue));
    }

    /**
     * Get the details of a coin.
     * Get coin
     */
    async getCoinDetails(requestParameters: GetCoinDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Coin> {
        const response = await this.getCoinDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the list of supported coins.
     * Get coins
     */
    async getSupportedCoinsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoinResponseFromJSON(jsonValue));
    }

    /**
     * Get the list of supported coins.
     * Get coins
     */
    async getSupportedCoins(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinResponse> {
        const response = await this.getSupportedCoinsRaw(initOverrides);
        return await response.value();
    }

}
