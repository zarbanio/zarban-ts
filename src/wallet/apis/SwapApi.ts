/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SwapRequest,
  SwapResponse,
} from '../models/index';
import {
    SwapRequestFromJSON,
    SwapRequestToJSON,
    SwapResponseFromJSON,
    SwapResponseToJSON,
} from '../models/index';

export interface SwapCoinsRequest {
    swapRequest: SwapRequest;
}

/**
 * 
 */
export class SwapApi extends runtime.BaseAPI {

    /**
     * Swap coins in the wallet.
     * Swap coins
     */
    async swapCoinsRaw(requestParameters: SwapCoinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SwapResponse>> {
        if (requestParameters['swapRequest'] == null) {
            throw new runtime.RequiredError(
                'swapRequest',
                'Required parameter "swapRequest" was null or undefined when calling swapCoins().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/swap`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SwapRequestToJSON(requestParameters['swapRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SwapResponseFromJSON(jsonValue));
    }

    /**
     * Swap coins in the wallet.
     * Swap coins
     */
    async swapCoins(requestParameters: SwapCoinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SwapResponse> {
        const response = await this.swapCoinsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
