/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TransactionResponse,
} from '../models/index';
import {
    TransactionResponseFromJSON,
    TransactionResponseToJSON,
} from '../models/index';

export interface GetUserTransactionsRequest {
    cursor?: number;
    limit?: number;
}

/**
 * 
 */
export class TransactionsApi extends runtime.BaseAPI {

    /**
     * Get a list of the recent transactions of the user.
     * Get user transactions
     */
    async getUserTransactionsRaw(requestParameters: GetUserTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionResponse>> {
        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of the recent transactions of the user.
     * Get user transactions
     */
    async getUserTransactions(requestParameters: GetUserTransactionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionResponse> {
        const response = await this.getUserTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
