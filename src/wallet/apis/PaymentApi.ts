/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Payment,
  PaymentRequest,
  UserError,
} from '../models/index';
import {
    PaymentFromJSON,
    PaymentToJSON,
    PaymentRequestFromJSON,
    PaymentRequestToJSON,
    UserErrorFromJSON,
    UserErrorToJSON,
} from '../models/index';

export interface CreatePaymentRequest {
    paymentRequest: PaymentRequest;
}

/**
 * 
 */
export class PaymentApi extends runtime.BaseAPI {

    /**
     * Create a new payment.
     * Create a payment
     */
    async createPaymentRaw(requestParameters: CreatePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payment>> {
        if (requestParameters['paymentRequest'] == null) {
            throw new runtime.RequiredError(
                'paymentRequest',
                'Required parameter "paymentRequest" was null or undefined when calling createPayment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/payments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentRequestToJSON(requestParameters['paymentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentFromJSON(jsonValue));
    }

    /**
     * Create a new payment.
     * Create a payment
     */
    async createPayment(requestParameters: CreatePaymentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payment> {
        const response = await this.createPaymentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
