/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UserError,
  WithdrawRequest,
  WithdrawRequestBody,
  WithdrawRequestPreview,
  WithdrawRequestResponse,
  WithdrawResponseBody,
} from '../models/index';
import {
    UserErrorFromJSON,
    UserErrorToJSON,
    WithdrawRequestFromJSON,
    WithdrawRequestToJSON,
    WithdrawRequestBodyFromJSON,
    WithdrawRequestBodyToJSON,
    WithdrawRequestPreviewFromJSON,
    WithdrawRequestPreviewToJSON,
    WithdrawRequestResponseFromJSON,
    WithdrawRequestResponseToJSON,
    WithdrawResponseBodyFromJSON,
    WithdrawResponseBodyToJSON,
} from '../models/index';

export interface GetWithdrawalStatusRequest {
    id: number;
}

export interface PreviewWithdrawalRequest {
    withdrawRequestBody: WithdrawRequestBody;
}

export interface RequestWithdrawalRequest {
    withdrawRequestBody: WithdrawRequestBody;
}

/**
 * 
 */
export class WithdrawApi extends runtime.BaseAPI {

    /**
     * Get user withdraw requests
     * Get user withdraw requests
     */
    async getUserWithdrawRequestsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WithdrawRequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/withdraws`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WithdrawRequestResponseFromJSON(jsonValue));
    }

    /**
     * Get user withdraw requests
     * Get user withdraw requests
     */
    async getUserWithdrawRequests(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WithdrawRequestResponse> {
        const response = await this.getUserWithdrawRequestsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the status of a withdrawal request.
     * Get withdrawal status
     */
    async getWithdrawalStatusRaw(requestParameters: GetWithdrawalStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WithdrawRequest>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWithdrawalStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/withdraws/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WithdrawRequestFromJSON(jsonValue));
    }

    /**
     * Get the status of a withdrawal request.
     * Get withdrawal status
     */
    async getWithdrawalStatus(requestParameters: GetWithdrawalStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WithdrawRequest> {
        const response = await this.getWithdrawalStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request a withdrawal from the wallet.
     * Withdraw request
     */
    async previewWithdrawalRaw(requestParameters: PreviewWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WithdrawRequestPreview>> {
        if (requestParameters['withdrawRequestBody'] == null) {
            throw new runtime.RequiredError(
                'withdrawRequestBody',
                'Required parameter "withdrawRequestBody" was null or undefined when calling previewWithdrawal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/withdraws/preview`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WithdrawRequestBodyToJSON(requestParameters['withdrawRequestBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WithdrawRequestPreviewFromJSON(jsonValue));
    }

    /**
     * Request a withdrawal from the wallet.
     * Withdraw request
     */
    async previewWithdrawal(requestParameters: PreviewWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WithdrawRequestPreview> {
        const response = await this.previewWithdrawalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request a withdrawal from the wallet.
     * Withdraw request
     */
    async requestWithdrawalRaw(requestParameters: RequestWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WithdrawResponseBody>> {
        if (requestParameters['withdrawRequestBody'] == null) {
            throw new runtime.RequiredError(
                'withdrawRequestBody',
                'Required parameter "withdrawRequestBody" was null or undefined when calling requestWithdrawal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/withdraws/request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WithdrawRequestBodyToJSON(requestParameters['withdrawRequestBody']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WithdrawResponseBodyFromJSON(jsonValue));
    }

    /**
     * Request a withdrawal from the wallet.
     * Withdraw request
     */
    async requestWithdrawal(requestParameters: RequestWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WithdrawResponseBody> {
        const response = await this.requestWithdrawalRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
