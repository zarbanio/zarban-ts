/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateChildUserRequest,
  EmailOtpSubmitRequest,
  KycConfirmRequest,
  KycRequest,
  KycResponse,
  PhoneOtpSubmitRequest,
  ProfileResponse,
  SimpleResponse,
  UpdateEmailRequest,
  UpdatePhoneRequest,
  User,
  UserError,
} from '../models/index';
import {
    CreateChildUserRequestFromJSON,
    CreateChildUserRequestToJSON,
    EmailOtpSubmitRequestFromJSON,
    EmailOtpSubmitRequestToJSON,
    KycConfirmRequestFromJSON,
    KycConfirmRequestToJSON,
    KycRequestFromJSON,
    KycRequestToJSON,
    KycResponseFromJSON,
    KycResponseToJSON,
    PhoneOtpSubmitRequestFromJSON,
    PhoneOtpSubmitRequestToJSON,
    ProfileResponseFromJSON,
    ProfileResponseToJSON,
    SimpleResponseFromJSON,
    SimpleResponseToJSON,
    UpdateEmailRequestFromJSON,
    UpdateEmailRequestToJSON,
    UpdatePhoneRequestFromJSON,
    UpdatePhoneRequestToJSON,
    UserFromJSON,
    UserToJSON,
    UserErrorFromJSON,
    UserErrorToJSON,
} from '../models/index';

export interface ConfirmKycRequest {
    kycConfirmRequest: KycConfirmRequest;
}

export interface ConfirmPhoneNumberRequest {
    phoneOtpSubmitRequest: PhoneOtpSubmitRequest;
}

export interface CreateChildUserOperationRequest {
    createChildUserRequest: CreateChildUserRequest;
}

export interface SubmitEmailConfirmationOtpRequest {
    emailOtpSubmitRequest: EmailOtpSubmitRequest;
}

export interface SubmitKycRequest {
    kycRequest: KycRequest;
}

export interface VerifyPhoneNumberRequest {
    updatePhoneRequest: UpdatePhoneRequest;
}

export interface VerifyUserEmailAddressRequest {
    updateEmailRequest: UpdateEmailRequest;
}

/**
 * UserApi - interface
 * 
 * @export
 * @interface UserApiInterface
 */
export interface UserApiInterface {
    /**
     * Confirm KYC for the user.
     * @summary Confirm KYC
     * @param {KycConfirmRequest} kycConfirmRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    confirmKycRaw(requestParameters: ConfirmKycRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleResponse>>;

    /**
     * Confirm KYC for the user.
     * Confirm KYC
     */
    confirmKyc(requestParameters: ConfirmKycRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleResponse>;

    /**
     * Confirm the phone number of the user.
     * @summary Confirm phone number
     * @param {PhoneOtpSubmitRequest} phoneOtpSubmitRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    confirmPhoneNumberRaw(requestParameters: ConfirmPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Confirm the phone number of the user.
     * Confirm phone number
     */
    confirmPhoneNumber(requestParameters: ConfirmPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * create a child user
     * @summary create a child user
     * @param {CreateChildUserRequest} createChildUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    createChildUserRaw(requestParameters: CreateChildUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>>;

    /**
     * create a child user
     * create a child user
     */
    createChildUser(requestParameters: CreateChildUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User>;

    /**
     * Get the profile of the user.
     * @summary Get profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getUserProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileResponse>>;

    /**
     * Get the profile of the user.
     * Get profile
     */
    getUserProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileResponse>;

    /**
     * Submit email confirmation OTP for the user.
     * @summary Submit email confirmation OTP
     * @param {EmailOtpSubmitRequest} emailOtpSubmitRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    submitEmailConfirmationOtpRaw(requestParameters: SubmitEmailConfirmationOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleResponse>>;

    /**
     * Submit email confirmation OTP for the user.
     * Submit email confirmation OTP
     */
    submitEmailConfirmationOtp(requestParameters: SubmitEmailConfirmationOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleResponse>;

    /**
     * Submit KYC for the user.
     * @summary Submit KYC
     * @param {KycRequest} kycRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    submitKycRaw(requestParameters: SubmitKycRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KycResponse>>;

    /**
     * Submit KYC for the user.
     * Submit KYC
     */
    submitKyc(requestParameters: SubmitKycRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KycResponse>;

    /**
     * Verify the phone number of the user.
     * @summary Verify phone number
     * @param {UpdatePhoneRequest} updatePhoneRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    verifyPhoneNumberRaw(requestParameters: VerifyPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Verify the phone number of the user.
     * Verify phone number
     */
    verifyPhoneNumber(requestParameters: VerifyPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Verify the email of the user.
     * @summary Verify email
     * @param {UpdateEmailRequest} updateEmailRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    verifyUserEmailAddressRaw(requestParameters: VerifyUserEmailAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleResponse>>;

    /**
     * Verify the email of the user.
     * Verify email
     */
    verifyUserEmailAddress(requestParameters: VerifyUserEmailAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleResponse>;

}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI implements UserApiInterface {

    /**
     * Confirm KYC for the user.
     * Confirm KYC
     */
    async confirmKycRaw(requestParameters: ConfirmKycRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleResponse>> {
        if (requestParameters['kycConfirmRequest'] == null) {
            throw new runtime.RequiredError(
                'kycConfirmRequest',
                'Required parameter "kycConfirmRequest" was null or undefined when calling confirmKyc().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/kyc/confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KycConfirmRequestToJSON(requestParameters['kycConfirmRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleResponseFromJSON(jsonValue));
    }

    /**
     * Confirm KYC for the user.
     * Confirm KYC
     */
    async confirmKyc(requestParameters: ConfirmKycRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleResponse> {
        const response = await this.confirmKycRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Confirm the phone number of the user.
     * Confirm phone number
     */
    async confirmPhoneNumberRaw(requestParameters: ConfirmPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['phoneOtpSubmitRequest'] == null) {
            throw new runtime.RequiredError(
                'phoneOtpSubmitRequest',
                'Required parameter "phoneOtpSubmitRequest" was null or undefined when calling confirmPhoneNumber().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/phone/confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PhoneOtpSubmitRequestToJSON(requestParameters['phoneOtpSubmitRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Confirm the phone number of the user.
     * Confirm phone number
     */
    async confirmPhoneNumber(requestParameters: ConfirmPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.confirmPhoneNumberRaw(requestParameters, initOverrides);
    }

    /**
     * create a child user
     * create a child user
     */
    async createChildUserRaw(requestParameters: CreateChildUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['createChildUserRequest'] == null) {
            throw new runtime.RequiredError(
                'createChildUserRequest',
                'Required parameter "createChildUserRequest" was null or undefined when calling createChildUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/children`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateChildUserRequestToJSON(requestParameters['createChildUserRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * create a child user
     * create a child user
     */
    async createChildUser(requestParameters: CreateChildUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.createChildUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the profile of the user.
     * Get profile
     */
    async getUserProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileResponseFromJSON(jsonValue));
    }

    /**
     * Get the profile of the user.
     * Get profile
     */
    async getUserProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileResponse> {
        const response = await this.getUserProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     * Submit email confirmation OTP for the user.
     * Submit email confirmation OTP
     */
    async submitEmailConfirmationOtpRaw(requestParameters: SubmitEmailConfirmationOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleResponse>> {
        if (requestParameters['emailOtpSubmitRequest'] == null) {
            throw new runtime.RequiredError(
                'emailOtpSubmitRequest',
                'Required parameter "emailOtpSubmitRequest" was null or undefined when calling submitEmailConfirmationOtp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/email/confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailOtpSubmitRequestToJSON(requestParameters['emailOtpSubmitRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleResponseFromJSON(jsonValue));
    }

    /**
     * Submit email confirmation OTP for the user.
     * Submit email confirmation OTP
     */
    async submitEmailConfirmationOtp(requestParameters: SubmitEmailConfirmationOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleResponse> {
        const response = await this.submitEmailConfirmationOtpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit KYC for the user.
     * Submit KYC
     */
    async submitKycRaw(requestParameters: SubmitKycRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KycResponse>> {
        if (requestParameters['kycRequest'] == null) {
            throw new runtime.RequiredError(
                'kycRequest',
                'Required parameter "kycRequest" was null or undefined when calling submitKyc().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/kyc`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KycRequestToJSON(requestParameters['kycRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KycResponseFromJSON(jsonValue));
    }

    /**
     * Submit KYC for the user.
     * Submit KYC
     */
    async submitKyc(requestParameters: SubmitKycRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KycResponse> {
        const response = await this.submitKycRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify the phone number of the user.
     * Verify phone number
     */
    async verifyPhoneNumberRaw(requestParameters: VerifyPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updatePhoneRequest'] == null) {
            throw new runtime.RequiredError(
                'updatePhoneRequest',
                'Required parameter "updatePhoneRequest" was null or undefined when calling verifyPhoneNumber().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/phone`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePhoneRequestToJSON(requestParameters['updatePhoneRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify the phone number of the user.
     * Verify phone number
     */
    async verifyPhoneNumber(requestParameters: VerifyPhoneNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.verifyPhoneNumberRaw(requestParameters, initOverrides);
    }

    /**
     * Verify the email of the user.
     * Verify email
     */
    async verifyUserEmailAddressRaw(requestParameters: VerifyUserEmailAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleResponse>> {
        if (requestParameters['updateEmailRequest'] == null) {
            throw new runtime.RequiredError(
                'updateEmailRequest',
                'Required parameter "updateEmailRequest" was null or undefined when calling verifyUserEmailAddress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEmailRequestToJSON(requestParameters['updateEmailRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleResponseFromJSON(jsonValue));
    }

    /**
     * Verify the email of the user.
     * Verify email
     */
    async verifyUserEmailAddress(requestParameters: VerifyUserEmailAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleResponse> {
        const response = await this.verifyUserEmailAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
