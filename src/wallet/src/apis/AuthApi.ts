/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthTelegramRequest,
  JwtResponse,
  LoginRequest,
  SignUpRequest,
  SimpleResponse,
  UserError,
} from '../models/index';
import {
    AuthTelegramRequestFromJSON,
    AuthTelegramRequestToJSON,
    JwtResponseFromJSON,
    JwtResponseToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    SignUpRequestFromJSON,
    SignUpRequestToJSON,
    SimpleResponseFromJSON,
    SimpleResponseToJSON,
    UserErrorFromJSON,
    UserErrorToJSON,
} from '../models/index';

export interface AuthenticateWithTelegramRequest {
    authTelegramRequest: AuthTelegramRequest;
}

export interface GenerateJwtTokenRequest {
    duration: GenerateJwtTokenDurationEnum;
}

export interface GetOtpRequest {
    channel: GetOtpChannelEnum;
}

export interface LoginWithEmailAndPasswordRequest {
    loginRequest: LoginRequest;
}

export interface SignupWithEmailAndPasswordRequest {
    signUpRequest: SignUpRequest;
}

export interface VerifyUserEmailRequest {
    token: string;
}

/**
 * AuthApi - interface
 * 
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     * Authenticate with Telegram and get a JWT token.
     * @summary Authenticate with Telegram
     * @param {AuthTelegramRequest} authTelegramRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authenticateWithTelegramRaw(requestParameters: AuthenticateWithTelegramRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>>;

    /**
     * Authenticate with Telegram and get a JWT token.
     * Authenticate with Telegram
     */
    authenticateWithTelegram(requestParameters: AuthenticateWithTelegramRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse>;

    /**
     * Generate a JWT token.
     * @summary Generate a JWT token
     * @param {7 | 15 | 30 | 90} duration Token duration in days
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    generateJwtTokenRaw(requestParameters: GenerateJwtTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>>;

    /**
     * Generate a JWT token.
     * Generate a JWT token
     */
    generateJwtToken(requestParameters: GenerateJwtTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse>;

    /**
     * Get OTP for the user.
     * @summary Get OTP
     * @param {'phone'} channel Channel to send OTP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    getOtpRaw(requestParameters: GetOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleResponse>>;

    /**
     * Get OTP for the user.
     * Get OTP
     */
    getOtp(requestParameters: GetOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleResponse>;

    /**
     * Login with email and password and get a JWT token.
     * @summary Login with email and password
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    loginWithEmailAndPasswordRaw(requestParameters: LoginWithEmailAndPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>>;

    /**
     * Login with email and password and get a JWT token.
     * Login with email and password
     */
    loginWithEmailAndPassword(requestParameters: LoginWithEmailAndPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse>;

    /**
     * signup with email and password and get a JWT token.
     * @summary signup with email and password
     * @param {SignUpRequest} signUpRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    signupWithEmailAndPasswordRaw(requestParameters: SignupWithEmailAndPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleResponse>>;

    /**
     * signup with email and password and get a JWT token.
     * signup with email and password
     */
    signupWithEmailAndPassword(requestParameters: SignupWithEmailAndPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleResponse>;

    /**
     * Verify the email of the user.
     * @summary Verify email
     * @param {string} token Verification token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    verifyUserEmailRaw(requestParameters: VerifyUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>>;

    /**
     * Verify the email of the user.
     * Verify email
     */
    verifyUserEmail(requestParameters: VerifyUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse>;

}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {

    /**
     * Authenticate with Telegram and get a JWT token.
     * Authenticate with Telegram
     */
    async authenticateWithTelegramRaw(requestParameters: AuthenticateWithTelegramRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>> {
        if (requestParameters['authTelegramRequest'] == null) {
            throw new runtime.RequiredError(
                'authTelegramRequest',
                'Required parameter "authTelegramRequest" was null or undefined when calling authenticateWithTelegram().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/telegram`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthTelegramRequestToJSON(requestParameters['authTelegramRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JwtResponseFromJSON(jsonValue));
    }

    /**
     * Authenticate with Telegram and get a JWT token.
     * Authenticate with Telegram
     */
    async authenticateWithTelegram(requestParameters: AuthenticateWithTelegramRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse> {
        const response = await this.authenticateWithTelegramRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate a JWT token.
     * Generate a JWT token
     */
    async generateJwtTokenRaw(requestParameters: GenerateJwtTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>> {
        if (requestParameters['duration'] == null) {
            throw new runtime.RequiredError(
                'duration',
                'Required parameter "duration" was null or undefined when calling generateJwtToken().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['duration'] != null) {
            queryParameters['duration'] = requestParameters['duration'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/token`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JwtResponseFromJSON(jsonValue));
    }

    /**
     * Generate a JWT token.
     * Generate a JWT token
     */
    async generateJwtToken(requestParameters: GenerateJwtTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse> {
        const response = await this.generateJwtTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get OTP for the user.
     * Get OTP
     */
    async getOtpRaw(requestParameters: GetOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleResponse>> {
        if (requestParameters['channel'] == null) {
            throw new runtime.RequiredError(
                'channel',
                'Required parameter "channel" was null or undefined when calling getOtp().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['channel'] != null) {
            queryParameters['channel'] = requestParameters['channel'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/otp`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleResponseFromJSON(jsonValue));
    }

    /**
     * Get OTP for the user.
     * Get OTP
     */
    async getOtp(requestParameters: GetOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleResponse> {
        const response = await this.getOtpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Login with email and password and get a JWT token.
     * Login with email and password
     */
    async loginWithEmailAndPasswordRaw(requestParameters: LoginWithEmailAndPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>> {
        if (requestParameters['loginRequest'] == null) {
            throw new runtime.RequiredError(
                'loginRequest',
                'Required parameter "loginRequest" was null or undefined when calling loginWithEmailAndPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters['loginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JwtResponseFromJSON(jsonValue));
    }

    /**
     * Login with email and password and get a JWT token.
     * Login with email and password
     */
    async loginWithEmailAndPassword(requestParameters: LoginWithEmailAndPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse> {
        const response = await this.loginWithEmailAndPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * signup with email and password and get a JWT token.
     * signup with email and password
     */
    async signupWithEmailAndPasswordRaw(requestParameters: SignupWithEmailAndPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleResponse>> {
        if (requestParameters['signUpRequest'] == null) {
            throw new runtime.RequiredError(
                'signUpRequest',
                'Required parameter "signUpRequest" was null or undefined when calling signupWithEmailAndPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignUpRequestToJSON(requestParameters['signUpRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleResponseFromJSON(jsonValue));
    }

    /**
     * signup with email and password and get a JWT token.
     * signup with email and password
     */
    async signupWithEmailAndPassword(requestParameters: SignupWithEmailAndPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleResponse> {
        const response = await this.signupWithEmailAndPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify the email of the user.
     * Verify email
     */
    async verifyUserEmailRaw(requestParameters: VerifyUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>> {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling verifyUserEmail().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/verify-email`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JwtResponseFromJSON(jsonValue));
    }

    /**
     * Verify the email of the user.
     * Verify email
     */
    async verifyUserEmail(requestParameters: VerifyUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse> {
        const response = await this.verifyUserEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GenerateJwtTokenDurationEnum = {
    NUMBER_7: 7,
    NUMBER_15: 15,
    NUMBER_30: 30,
    NUMBER_90: 90
} as const;
export type GenerateJwtTokenDurationEnum = typeof GenerateJwtTokenDurationEnum[keyof typeof GenerateJwtTokenDurationEnum];
/**
 * @export
 */
export const GetOtpChannelEnum = {
    PHONE: 'phone'
} as const;
export type GetOtpChannelEnum = typeof GetOtpChannelEnum[keyof typeof GetOtpChannelEnum];
