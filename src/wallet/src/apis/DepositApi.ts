/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DepositResponse,
} from '../models/index';
import {
    DepositResponseFromJSON,
    DepositResponseToJSON,
} from '../models/index';

export interface DepositMoneyRequest {
    network: string;
    symbol: string;
}

/**
 * DepositApi - interface
 * 
 * @export
 * @interface DepositApiInterface
 */
export interface DepositApiInterface {
    /**
     * Deposit money to the wallet.
     * @summary Deposit money
     * @param {string} network Network to deposit
     * @param {string} symbol Coin symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepositApiInterface
     */
    depositMoneyRaw(requestParameters: DepositMoneyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DepositResponse>>;

    /**
     * Deposit money to the wallet.
     * Deposit money
     */
    depositMoney(requestParameters: DepositMoneyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DepositResponse>;

}

/**
 * 
 */
export class DepositApi extends runtime.BaseAPI implements DepositApiInterface {

    /**
     * Deposit money to the wallet.
     * Deposit money
     */
    async depositMoneyRaw(requestParameters: DepositMoneyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DepositResponse>> {
        if (requestParameters['network'] == null) {
            throw new runtime.RequiredError(
                'network',
                'Required parameter "network" was null or undefined when calling depositMoney().'
            );
        }

        if (requestParameters['symbol'] == null) {
            throw new runtime.RequiredError(
                'symbol',
                'Required parameter "symbol" was null or undefined when calling depositMoney().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['network'] != null) {
            queryParameters['network'] = requestParameters['network'];
        }

        if (requestParameters['symbol'] != null) {
            queryParameters['symbol'] = requestParameters['symbol'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/deposit`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DepositResponseFromJSON(jsonValue));
    }

    /**
     * Deposit money to the wallet.
     * Deposit money
     */
    async depositMoney(requestParameters: DepositMoneyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DepositResponse> {
        const response = await this.depositMoneyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
