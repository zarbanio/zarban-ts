/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdminRedemptionUpdateRequest,
  Redemption,
  RedemptionRequest,
  RedemptionResponse,
  UserError,
} from '../models/index';
import {
    AdminRedemptionUpdateRequestFromJSON,
    AdminRedemptionUpdateRequestToJSON,
    RedemptionFromJSON,
    RedemptionToJSON,
    RedemptionRequestFromJSON,
    RedemptionRequestToJSON,
    RedemptionResponseFromJSON,
    RedemptionResponseToJSON,
    UserErrorFromJSON,
    UserErrorToJSON,
} from '../models/index';

export interface GetAllRedemptionsRequest {
    state?: GetAllRedemptionsStateEnum;
}

export interface GetRedemptionDetailsRequest {
    id: number;
}

export interface RedeemZarRequest {
    redemptionRequest: RedemptionRequest;
}

export interface UpdateRedemptionStatusRequest {
    id: string;
    adminRedemptionUpdateRequest: AdminRedemptionUpdateRequest;
}

/**
 * RedemptionsApi - interface
 * 
 * @export
 * @interface RedemptionsApiInterface
 */
export interface RedemptionsApiInterface {
    /**
     * Get a list of all redemptions.
     * @summary Get all redemptions
     * @param {'pending' | 'approved' | 'completed' | 'rejected'} [state] Cursor for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedemptionsApiInterface
     */
    getAllRedemptionsRaw(requestParameters: GetAllRedemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RedemptionResponse>>;

    /**
     * Get a list of all redemptions.
     * Get all redemptions
     */
    getAllRedemptions(requestParameters: GetAllRedemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RedemptionResponse>;

    /**
     * Get the details of a redemption.
     * @summary Get redemption
     * @param {number} id Redemption ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedemptionsApiInterface
     */
    getRedemptionDetailsRaw(requestParameters: GetRedemptionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Redemption>>;

    /**
     * Get the details of a redemption.
     * Get redemption
     */
    getRedemptionDetails(requestParameters: GetRedemptionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Redemption>;

    /**
     * Redeem zar
     * @summary Redeem zar
     * @param {RedemptionRequest} redemptionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedemptionsApiInterface
     */
    redeemZarRaw(requestParameters: RedeemZarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Redemption>>;

    /**
     * Redeem zar
     * Redeem zar
     */
    redeemZar(requestParameters: RedeemZarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Redemption>;

    /**
     * Update the status of a redemption.
     * @summary Update redemption
     * @param {string} id Redemption ID
     * @param {AdminRedemptionUpdateRequest} adminRedemptionUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedemptionsApiInterface
     */
    updateRedemptionStatusRaw(requestParameters: UpdateRedemptionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Redemption>>;

    /**
     * Update the status of a redemption.
     * Update redemption
     */
    updateRedemptionStatus(requestParameters: UpdateRedemptionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Redemption>;

}

/**
 * 
 */
export class RedemptionsApi extends runtime.BaseAPI implements RedemptionsApiInterface {

    /**
     * Get a list of all redemptions.
     * Get all redemptions
     */
    async getAllRedemptionsRaw(requestParameters: GetAllRedemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RedemptionResponse>> {
        const queryParameters: any = {};

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/redemptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RedemptionResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of all redemptions.
     * Get all redemptions
     */
    async getAllRedemptions(requestParameters: GetAllRedemptionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RedemptionResponse> {
        const response = await this.getAllRedemptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the details of a redemption.
     * Get redemption
     */
    async getRedemptionDetailsRaw(requestParameters: GetRedemptionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Redemption>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRedemptionDetails().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/redemptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RedemptionFromJSON(jsonValue));
    }

    /**
     * Get the details of a redemption.
     * Get redemption
     */
    async getRedemptionDetails(requestParameters: GetRedemptionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Redemption> {
        const response = await this.getRedemptionDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Redeem zar
     * Redeem zar
     */
    async redeemZarRaw(requestParameters: RedeemZarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Redemption>> {
        if (requestParameters['redemptionRequest'] == null) {
            throw new runtime.RequiredError(
                'redemptionRequest',
                'Required parameter "redemptionRequest" was null or undefined when calling redeemZar().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/redemptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RedemptionRequestToJSON(requestParameters['redemptionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RedemptionFromJSON(jsonValue));
    }

    /**
     * Redeem zar
     * Redeem zar
     */
    async redeemZar(requestParameters: RedeemZarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Redemption> {
        const response = await this.redeemZarRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the status of a redemption.
     * Update redemption
     */
    async updateRedemptionStatusRaw(requestParameters: UpdateRedemptionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Redemption>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateRedemptionStatus().'
            );
        }

        if (requestParameters['adminRedemptionUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'adminRedemptionUpdateRequest',
                'Required parameter "adminRedemptionUpdateRequest" was null or undefined when calling updateRedemptionStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/redemptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdminRedemptionUpdateRequestToJSON(requestParameters['adminRedemptionUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RedemptionFromJSON(jsonValue));
    }

    /**
     * Update the status of a redemption.
     * Update redemption
     */
    async updateRedemptionStatus(requestParameters: UpdateRedemptionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Redemption> {
        const response = await this.updateRedemptionStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAllRedemptionsStateEnum = {
    PENDING: 'pending',
    APPROVED: 'approved',
    COMPLETED: 'completed',
    REJECTED: 'rejected'
} as const;
export type GetAllRedemptionsStateEnum = typeof GetAllRedemptionsStateEnum[keyof typeof GetAllRedemptionsStateEnum];
