/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Symbol } from './Symbol';
import {
    SymbolFromJSON,
    SymbolFromJSONTyped,
    SymbolToJSON,
    SymbolToJSONTyped,
} from './Symbol';
import type { Currency } from './Currency';
import {
    CurrencyFromJSON,
    CurrencyFromJSONTyped,
    CurrencyToJSON,
    CurrencyToJSONTyped,
} from './Currency';
import type { Timestamp } from './Timestamp';
import {
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
    TimestampToJSONTyped,
} from './Timestamp';

/**
 * 
 * @export
 * @interface SwapResponse
 */
export interface SwapResponse {
    /**
     * 
     * @type {string}
     * @memberof SwapResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof SwapResponse
     */
    tradeType: SwapResponseTradeTypeEnum;
    /**
     * 
     * @type {Symbol}
     * @memberof SwapResponse
     */
    _in: Symbol;
    /**
     * 
     * @type {Symbol}
     * @memberof SwapResponse
     */
    out: Symbol;
    /**
     * 
     * @type {string}
     * @memberof SwapResponse
     */
    amount: string;
    /**
     * 
     * @type {string}
     * @memberof SwapResponse
     */
    quote: string;
    /**
     * 
     * @type {string}
     * @memberof SwapResponse
     */
    rate: string;
    /**
     * 
     * @type {string}
     * @memberof SwapResponse
     */
    inputBalanceAfterSwap?: string;
    /**
     * 
     * @type {string}
     * @memberof SwapResponse
     */
    outputBalanceAfterSwap?: string;
    /**
     * 
     * @type {Timestamp}
     * @memberof SwapResponse
     */
    createdAt: Timestamp;
    /**
     * 
     * @type {Timestamp}
     * @memberof SwapResponse
     */
    expiresAt: Timestamp;
    /**
     * 
     * @type {Timestamp}
     * @memberof SwapResponse
     */
    executedAt?: Timestamp;
    /**
     * 
     * @type {Currency}
     * @memberof SwapResponse
     */
    value: Currency;
}


/**
 * @export
 */
export const SwapResponseTradeTypeEnum = {
    EXACT_INPUT: 'ExactInput',
    EXACT_OUTPUT: 'ExactOutput'
} as const;
export type SwapResponseTradeTypeEnum = typeof SwapResponseTradeTypeEnum[keyof typeof SwapResponseTradeTypeEnum];


/**
 * Check if a given object implements the SwapResponse interface.
 */
export function instanceOfSwapResponse(value: object): value is SwapResponse {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('tradeType' in value) || value['tradeType'] === undefined) return false;
    if (!('_in' in value) || value['_in'] === undefined) return false;
    if (!('out' in value) || value['out'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('quote' in value) || value['quote'] === undefined) return false;
    if (!('rate' in value) || value['rate'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('expiresAt' in value) || value['expiresAt'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    return true;
}

export function SwapResponseFromJSON(json: any): SwapResponse {
    return SwapResponseFromJSONTyped(json, false);
}

export function SwapResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): SwapResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'tradeType': json['tradeType'],
        '_in': SymbolFromJSON(json['in']),
        'out': SymbolFromJSON(json['out']),
        'amount': json['amount'],
        'quote': json['quote'],
        'rate': json['rate'],
        'inputBalanceAfterSwap': json['inputBalanceAfterSwap'] == null ? undefined : json['inputBalanceAfterSwap'],
        'outputBalanceAfterSwap': json['outputBalanceAfterSwap'] == null ? undefined : json['outputBalanceAfterSwap'],
        'createdAt': TimestampFromJSON(json['createdAt']),
        'expiresAt': TimestampFromJSON(json['expiresAt']),
        'executedAt': json['executedAt'] == null ? undefined : TimestampFromJSON(json['executedAt']),
        'value': CurrencyFromJSON(json['value']),
    };
}

export function SwapResponseToJSON(json: any): SwapResponse {
    return SwapResponseToJSONTyped(json, false);
}

export function SwapResponseToJSONTyped(value?: SwapResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'tradeType': value['tradeType'],
        'in': SymbolToJSON(value['_in']),
        'out': SymbolToJSON(value['out']),
        'amount': value['amount'],
        'quote': value['quote'],
        'rate': value['rate'],
        'inputBalanceAfterSwap': value['inputBalanceAfterSwap'],
        'outputBalanceAfterSwap': value['outputBalanceAfterSwap'],
        'createdAt': TimestampToJSON(value['createdAt']),
        'expiresAt': TimestampToJSON(value['expiresAt']),
        'executedAt': TimestampToJSON(value['executedAt']),
        'value': CurrencyToJSON(value['value']),
    };
}

