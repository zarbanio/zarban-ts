/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Symbol } from './Symbol';
import {
    SymbolFromJSON,
    SymbolFromJSONTyped,
    SymbolToJSON,
    SymbolToJSONTyped,
} from './Symbol';
import type { Network } from './Network';
import {
    NetworkFromJSON,
    NetworkFromJSONTyped,
    NetworkToJSON,
    NetworkToJSONTyped,
} from './Network';
import type { Timestamp } from './Timestamp';
import {
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
    TimestampToJSONTyped,
} from './Timestamp';

/**
 * 
 * @export
 * @interface WithdrawRequest
 */
export interface WithdrawRequest {
    /**
     * 
     * @type {number}
     * @memberof WithdrawRequest
     */
    id: number;
    /**
     * 
     * @type {Timestamp}
     * @memberof WithdrawRequest
     */
    timeCreated: Timestamp;
    /**
     * 
     * @type {Network}
     * @memberof WithdrawRequest
     */
    network: Network;
    /**
     * 
     * @type {Symbol}
     * @memberof WithdrawRequest
     */
    symbol: Symbol;
    /**
     * 
     * @type {string}
     * @memberof WithdrawRequest
     */
    amount: string;
    /**
     * 
     * @type {string}
     * @memberof WithdrawRequest
     */
    to: string;
    /**
     * 
     * @type {string}
     * @memberof WithdrawRequest
     */
    comment?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WithdrawRequest
     */
    status: WithdrawRequestStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof WithdrawRequest
     */
    blockExplorerUrl?: string | null;
}


/**
 * @export
 */
export const WithdrawRequestStatusEnum = {
    Pending: 'Pending',
    Canceled: 'Canceled',
    Approved: 'Approved',
    Rejected: 'Rejected',
    Proccessing: 'Proccessing',
    Failed: 'Failed',
    Sent: 'Sent',
    AccountDebited: 'AccountDebited',
    AccountBalanceUnlocked: 'AccountBalanceUnlocked',
    Completed: 'Completed'
} as const;
export type WithdrawRequestStatusEnum = typeof WithdrawRequestStatusEnum[keyof typeof WithdrawRequestStatusEnum];


/**
 * Check if a given object implements the WithdrawRequest interface.
 */
export function instanceOfWithdrawRequest(value: object): value is WithdrawRequest {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('timeCreated' in value) || value['timeCreated'] === undefined) return false;
    if (!('network' in value) || value['network'] === undefined) return false;
    if (!('symbol' in value) || value['symbol'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('to' in value) || value['to'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function WithdrawRequestFromJSON(json: any): WithdrawRequest {
    return WithdrawRequestFromJSONTyped(json, false);
}

export function WithdrawRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): WithdrawRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'timeCreated': TimestampFromJSON(json['timeCreated']),
        'network': NetworkFromJSON(json['network']),
        'symbol': SymbolFromJSON(json['symbol']),
        'amount': json['amount'],
        'to': json['to'],
        'comment': json['comment'] == null ? undefined : json['comment'],
        'status': json['status'],
        'blockExplorerUrl': json['blockExplorerUrl'] == null ? undefined : json['blockExplorerUrl'],
    };
}

export function WithdrawRequestToJSON(json: any): WithdrawRequest {
    return WithdrawRequestToJSONTyped(json, false);
}

export function WithdrawRequestToJSONTyped(value?: WithdrawRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'timeCreated': TimestampToJSON(value['timeCreated']),
        'network': NetworkToJSON(value['network']),
        'symbol': SymbolToJSON(value['symbol']),
        'amount': value['amount'],
        'to': value['to'],
        'comment': value['comment'],
        'status': value['status'],
        'blockExplorerUrl': value['blockExplorerUrl'],
    };
}

