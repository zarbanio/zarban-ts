/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Coin } from './Coin';
import {
    CoinFromJSON,
    CoinFromJSONTyped,
    CoinToJSON,
    CoinToJSONTyped,
} from './Coin';
import type { Currency } from './Currency';
import {
    CurrencyFromJSON,
    CurrencyFromJSONTyped,
    CurrencyToJSON,
    CurrencyToJSONTyped,
} from './Currency';
import type { DetailedLoanToValueOptions } from './DetailedLoanToValueOptions';
import {
    DetailedLoanToValueOptionsFromJSON,
    DetailedLoanToValueOptionsFromJSONTyped,
    DetailedLoanToValueOptionsToJSON,
    DetailedLoanToValueOptionsToJSONTyped,
} from './DetailedLoanToValueOptions';

/**
 * 
 * @export
 * @interface LoanPlan
 */
export interface LoanPlan {
    /**
     * The name of the loan plan
     * @type {string}
     * @memberof LoanPlan
     */
    name: string;
    /**
     * The minimum collateralization ratio of the loan plan
     * @type {string}
     * @memberof LoanPlan
     */
    minCollateralizationRatio: string;
    /**
     * 
     * @type {Array<Coin>}
     * @memberof LoanPlan
     */
    acceptableCoins: Array<Coin>;
    /**
     * The annual fee of the loan plan
     * @type {string}
     * @memberof LoanPlan
     */
    fee: string;
    /**
     * 
     * @type {Currency}
     * @memberof LoanPlan
     */
    maxDebt: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof LoanPlan
     */
    minDebt: Currency;
    /**
     * 
     * @type {Array<DetailedLoanToValueOptions>}
     * @memberof LoanPlan
     */
    loanToValueOptions: Array<DetailedLoanToValueOptions>;
}

/**
 * Check if a given object implements the LoanPlan interface.
 */
export function instanceOfLoanPlan(value: object): value is LoanPlan {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('minCollateralizationRatio' in value) || value['minCollateralizationRatio'] === undefined) return false;
    if (!('acceptableCoins' in value) || value['acceptableCoins'] === undefined) return false;
    if (!('fee' in value) || value['fee'] === undefined) return false;
    if (!('maxDebt' in value) || value['maxDebt'] === undefined) return false;
    if (!('minDebt' in value) || value['minDebt'] === undefined) return false;
    if (!('loanToValueOptions' in value) || value['loanToValueOptions'] === undefined) return false;
    return true;
}

export function LoanPlanFromJSON(json: any): LoanPlan {
    return LoanPlanFromJSONTyped(json, false);
}

export function LoanPlanFromJSONTyped(json: any, ignoreDiscriminator: boolean): LoanPlan {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'minCollateralizationRatio': json['minCollateralizationRatio'],
        'acceptableCoins': ((json['acceptableCoins'] as Array<any>).map(CoinFromJSON)),
        'fee': json['fee'],
        'maxDebt': CurrencyFromJSON(json['maxDebt']),
        'minDebt': CurrencyFromJSON(json['minDebt']),
        'loanToValueOptions': ((json['loanToValueOptions'] as Array<any>).map(DetailedLoanToValueOptionsFromJSON)),
    };
}

export function LoanPlanToJSON(json: any): LoanPlan {
    return LoanPlanToJSONTyped(json, false);
}

export function LoanPlanToJSONTyped(value?: LoanPlan | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'minCollateralizationRatio': value['minCollateralizationRatio'],
        'acceptableCoins': ((value['acceptableCoins'] as Array<any>).map(CoinToJSON)),
        'fee': value['fee'],
        'maxDebt': CurrencyToJSON(value['maxDebt']),
        'minDebt': CurrencyToJSON(value['minDebt']),
        'loanToValueOptions': ((value['loanToValueOptions'] as Array<any>).map(DetailedLoanToValueOptionsToJSON)),
    };
}

