/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TransactionType } from './TransactionType';
import {
    TransactionTypeFromJSON,
    TransactionTypeFromJSONTyped,
    TransactionTypeToJSON,
    TransactionTypeToJSONTyped,
} from './TransactionType';
import type { Symbol } from './Symbol';
import {
    SymbolFromJSON,
    SymbolFromJSONTyped,
    SymbolToJSON,
    SymbolToJSONTyped,
} from './Symbol';
import type { Currency } from './Currency';
import {
    CurrencyFromJSON,
    CurrencyFromJSONTyped,
    CurrencyToJSON,
    CurrencyToJSONTyped,
} from './Currency';
import type { Network } from './Network';
import {
    NetworkFromJSON,
    NetworkFromJSONTyped,
    NetworkToJSON,
    NetworkToJSONTyped,
} from './Network';
import type { TransactionStatus } from './TransactionStatus';
import {
    TransactionStatusFromJSON,
    TransactionStatusFromJSONTyped,
    TransactionStatusToJSON,
    TransactionStatusToJSONTyped,
} from './TransactionStatus';
import type { Timestamp } from './Timestamp';
import {
    TimestampFromJSON,
    TimestampFromJSONTyped,
    TimestampToJSON,
    TimestampToJSONTyped,
} from './Timestamp';

/**
 * 
 * @export
 * @interface ExternalTransaction
 */
export interface ExternalTransaction {
    /**
     * Unique identifier of the transaction
     * @type {number}
     * @memberof ExternalTransaction
     */
    id: number;
    /**
     * 
     * @type {Timestamp}
     * @memberof ExternalTransaction
     */
    time: Timestamp;
    /**
     * 
     * @type {TransactionType}
     * @memberof ExternalTransaction
     */
    type: TransactionType;
    /**
     * The hash of the transaction
     * @type {string}
     * @memberof ExternalTransaction
     */
    hash: string;
    /**
     * The address from which the transaction originated
     * @type {string}
     * @memberof ExternalTransaction
     */
    from: string;
    /**
     * The address to which the transaction is sent
     * @type {string}
     * @memberof ExternalTransaction
     */
    to: string;
    /**
     * A comment associated with the transaction
     * @type {string}
     * @memberof ExternalTransaction
     */
    comment: string | null;
    /**
     * 
     * @type {Currency}
     * @memberof ExternalTransaction
     */
    amount: Currency;
    /**
     * 
     * @type {Symbol}
     * @memberof ExternalTransaction
     */
    symbol: Symbol;
    /**
     * 
     * @type {Network}
     * @memberof ExternalTransaction
     */
    network: Network;
    /**
     * 
     * @type {TransactionStatus}
     * @memberof ExternalTransaction
     */
    status: TransactionStatus;
}



/**
 * Check if a given object implements the ExternalTransaction interface.
 */
export function instanceOfExternalTransaction(value: object): value is ExternalTransaction {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('time' in value) || value['time'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('hash' in value) || value['hash'] === undefined) return false;
    if (!('from' in value) || value['from'] === undefined) return false;
    if (!('to' in value) || value['to'] === undefined) return false;
    if (!('comment' in value) || value['comment'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('symbol' in value) || value['symbol'] === undefined) return false;
    if (!('network' in value) || value['network'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function ExternalTransactionFromJSON(json: any): ExternalTransaction {
    return ExternalTransactionFromJSONTyped(json, false);
}

export function ExternalTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExternalTransaction {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['Id'],
        'time': TimestampFromJSON(json['Time']),
        'type': TransactionTypeFromJSON(json['Type']),
        'hash': json['Hash'],
        'from': json['From'],
        'to': json['To'],
        'comment': json['Comment'],
        'amount': CurrencyFromJSON(json['Amount']),
        'symbol': SymbolFromJSON(json['Symbol']),
        'network': NetworkFromJSON(json['Network']),
        'status': TransactionStatusFromJSON(json['Status']),
    };
}

export function ExternalTransactionToJSON(json: any): ExternalTransaction {
    return ExternalTransactionToJSONTyped(json, false);
}

export function ExternalTransactionToJSONTyped(value?: ExternalTransaction | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Id': value['id'],
        'Time': TimestampToJSON(value['time']),
        'Type': TransactionTypeToJSON(value['type']),
        'Hash': value['hash'],
        'From': value['from'],
        'To': value['to'],
        'Comment': value['comment'],
        'Amount': CurrencyToJSON(value['amount']),
        'Symbol': SymbolToJSON(value['symbol']),
        'Network': NetworkToJSON(value['network']),
        'Status': TransactionStatusToJSON(value['status']),
    };
}

