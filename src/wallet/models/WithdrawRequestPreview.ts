/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Symbol } from './Symbol';
import {
    SymbolFromJSON,
    SymbolFromJSONTyped,
    SymbolToJSON,
    SymbolToJSONTyped,
} from './Symbol';
import type { Currency } from './Currency';
import {
    CurrencyFromJSON,
    CurrencyFromJSONTyped,
    CurrencyToJSON,
    CurrencyToJSONTyped,
} from './Currency';
import type { Network } from './Network';
import {
    NetworkFromJSON,
    NetworkFromJSONTyped,
    NetworkToJSON,
    NetworkToJSONTyped,
} from './Network';

/**
 * 
 * @export
 * @interface WithdrawRequestPreview
 */
export interface WithdrawRequestPreview {
    /**
     * Withdrawal address
     * @type {string}
     * @memberof WithdrawRequestPreview
     */
    address: string;
    /**
     * 
     * @type {Network}
     * @memberof WithdrawRequestPreview
     */
    network: Network;
    /**
     * 
     * @type {Symbol}
     * @memberof WithdrawRequestPreview
     */
    symbol: Symbol;
    /**
     * 
     * @type {Currency}
     * @memberof WithdrawRequestPreview
     */
    amount: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof WithdrawRequestPreview
     */
    fee: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof WithdrawRequestPreview
     */
    balanceAfterWithdraw: Currency;
}



/**
 * Check if a given object implements the WithdrawRequestPreview interface.
 */
export function instanceOfWithdrawRequestPreview(value: object): value is WithdrawRequestPreview {
    if (!('address' in value) || value['address'] === undefined) return false;
    if (!('network' in value) || value['network'] === undefined) return false;
    if (!('symbol' in value) || value['symbol'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('fee' in value) || value['fee'] === undefined) return false;
    if (!('balanceAfterWithdraw' in value) || value['balanceAfterWithdraw'] === undefined) return false;
    return true;
}

export function WithdrawRequestPreviewFromJSON(json: any): WithdrawRequestPreview {
    return WithdrawRequestPreviewFromJSONTyped(json, false);
}

export function WithdrawRequestPreviewFromJSONTyped(json: any, ignoreDiscriminator: boolean): WithdrawRequestPreview {
    if (json == null) {
        return json;
    }
    return {
        
        'address': json['address'],
        'network': NetworkFromJSON(json['network']),
        'symbol': SymbolFromJSON(json['symbol']),
        'amount': CurrencyFromJSON(json['amount']),
        'fee': CurrencyFromJSON(json['fee']),
        'balanceAfterWithdraw': CurrencyFromJSON(json['balanceAfterWithdraw']),
    };
}

export function WithdrawRequestPreviewToJSON(json: any): WithdrawRequestPreview {
    return WithdrawRequestPreviewToJSONTyped(json, false);
}

export function WithdrawRequestPreviewToJSONTyped(value?: WithdrawRequestPreview | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'address': value['address'],
        'network': NetworkToJSON(value['network']),
        'symbol': SymbolToJSON(value['symbol']),
        'amount': CurrencyToJSON(value['amount']),
        'fee': CurrencyToJSON(value['fee']),
        'balanceAfterWithdraw': CurrencyToJSON(value['balanceAfterWithdraw']),
    };
}

