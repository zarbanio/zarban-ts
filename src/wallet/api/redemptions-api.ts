/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AdminRedemptionUpdateRequest } from '../model';
// @ts-ignore
import type { Redemption } from '../model';
// @ts-ignore
import type { RedemptionRequest } from '../model';
// @ts-ignore
import type { RedemptionResponse } from '../model';
// @ts-ignore
import type { UserError } from '../model';
/**
 * RedemptionsApi - axios parameter creator
 * @export
 */
export const RedemptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of all redemptions.
         * @summary Get all redemptions
         * @param {GetAllRedemptionsStateEnum} [state] Cursor for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRedemptions: async (state?: GetAllRedemptionsStateEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/redemptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the details of a redemption.
         * @summary Get redemption
         * @param {number} id Redemption ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedemptionDetails: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRedemptionDetails', 'id', id)
            const localVarPath = `/admin/redemptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Redeem zar
         * @summary Redeem zar
         * @param {RedemptionRequest} redemptionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemZar: async (redemptionRequest: RedemptionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'redemptionRequest' is not null or undefined
            assertParamExists('redeemZar', 'redemptionRequest', redemptionRequest)
            const localVarPath = `/redemptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(redemptionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the status of a redemption.
         * @summary Update redemption
         * @param {string} id Redemption ID
         * @param {AdminRedemptionUpdateRequest} adminRedemptionUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRedemptionStatus: async (id: string, adminRedemptionUpdateRequest: AdminRedemptionUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRedemptionStatus', 'id', id)
            // verify required parameter 'adminRedemptionUpdateRequest' is not null or undefined
            assertParamExists('updateRedemptionStatus', 'adminRedemptionUpdateRequest', adminRedemptionUpdateRequest)
            const localVarPath = `/admin/redemptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminRedemptionUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RedemptionsApi - functional programming interface
 * @export
 */
export const RedemptionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RedemptionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a list of all redemptions.
         * @summary Get all redemptions
         * @param {GetAllRedemptionsStateEnum} [state] Cursor for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRedemptions(state?: GetAllRedemptionsStateEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RedemptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRedemptions(state, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RedemptionsApi.getAllRedemptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the details of a redemption.
         * @summary Get redemption
         * @param {number} id Redemption ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRedemptionDetails(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Redemption>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRedemptionDetails(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RedemptionsApi.getRedemptionDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Redeem zar
         * @summary Redeem zar
         * @param {RedemptionRequest} redemptionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redeemZar(redemptionRequest: RedemptionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Redemption>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redeemZar(redemptionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RedemptionsApi.redeemZar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the status of a redemption.
         * @summary Update redemption
         * @param {string} id Redemption ID
         * @param {AdminRedemptionUpdateRequest} adminRedemptionUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRedemptionStatus(id: string, adminRedemptionUpdateRequest: AdminRedemptionUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Redemption>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRedemptionStatus(id, adminRedemptionUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RedemptionsApi.updateRedemptionStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RedemptionsApi - factory interface
 * @export
 */
export const RedemptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RedemptionsApiFp(configuration)
    return {
        /**
         * Get a list of all redemptions.
         * @summary Get all redemptions
         * @param {GetAllRedemptionsStateEnum} [state] Cursor for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRedemptions(state?: GetAllRedemptionsStateEnum, options?: RawAxiosRequestConfig): AxiosPromise<RedemptionResponse> {
            return localVarFp.getAllRedemptions(state, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the details of a redemption.
         * @summary Get redemption
         * @param {number} id Redemption ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedemptionDetails(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Redemption> {
            return localVarFp.getRedemptionDetails(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Redeem zar
         * @summary Redeem zar
         * @param {RedemptionRequest} redemptionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemZar(redemptionRequest: RedemptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<Redemption> {
            return localVarFp.redeemZar(redemptionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the status of a redemption.
         * @summary Update redemption
         * @param {string} id Redemption ID
         * @param {AdminRedemptionUpdateRequest} adminRedemptionUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRedemptionStatus(id: string, adminRedemptionUpdateRequest: AdminRedemptionUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Redemption> {
            return localVarFp.updateRedemptionStatus(id, adminRedemptionUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RedemptionsApi - interface
 * @export
 * @interface RedemptionsApi
 */
export interface RedemptionsApiInterface {
    /**
     * Get a list of all redemptions.
     * @summary Get all redemptions
     * @param {GetAllRedemptionsStateEnum} [state] Cursor for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedemptionsApiInterface
     */
    getAllRedemptions(state?: GetAllRedemptionsStateEnum, options?: RawAxiosRequestConfig): AxiosPromise<RedemptionResponse>;

    /**
     * Get the details of a redemption.
     * @summary Get redemption
     * @param {number} id Redemption ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedemptionsApiInterface
     */
    getRedemptionDetails(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Redemption>;

    /**
     * Redeem zar
     * @summary Redeem zar
     * @param {RedemptionRequest} redemptionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedemptionsApiInterface
     */
    redeemZar(redemptionRequest: RedemptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<Redemption>;

    /**
     * Update the status of a redemption.
     * @summary Update redemption
     * @param {string} id Redemption ID
     * @param {AdminRedemptionUpdateRequest} adminRedemptionUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedemptionsApiInterface
     */
    updateRedemptionStatus(id: string, adminRedemptionUpdateRequest: AdminRedemptionUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Redemption>;

}

/**
 * RedemptionsApi - object-oriented interface
 * @export
 * @class RedemptionsApi
 * @extends {BaseAPI}
 */
export class RedemptionsApi extends BaseAPI implements RedemptionsApiInterface {
    /**
     * Get a list of all redemptions.
     * @summary Get all redemptions
     * @param {GetAllRedemptionsStateEnum} [state] Cursor for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedemptionsApi
     */
    public getAllRedemptions(state?: GetAllRedemptionsStateEnum, options?: RawAxiosRequestConfig) {
        return RedemptionsApiFp(this.configuration).getAllRedemptions(state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the details of a redemption.
     * @summary Get redemption
     * @param {number} id Redemption ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedemptionsApi
     */
    public getRedemptionDetails(id: number, options?: RawAxiosRequestConfig) {
        return RedemptionsApiFp(this.configuration).getRedemptionDetails(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Redeem zar
     * @summary Redeem zar
     * @param {RedemptionRequest} redemptionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedemptionsApi
     */
    public redeemZar(redemptionRequest: RedemptionRequest, options?: RawAxiosRequestConfig) {
        return RedemptionsApiFp(this.configuration).redeemZar(redemptionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the status of a redemption.
     * @summary Update redemption
     * @param {string} id Redemption ID
     * @param {AdminRedemptionUpdateRequest} adminRedemptionUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedemptionsApi
     */
    public updateRedemptionStatus(id: string, adminRedemptionUpdateRequest: AdminRedemptionUpdateRequest, options?: RawAxiosRequestConfig) {
        return RedemptionsApiFp(this.configuration).updateRedemptionStatus(id, adminRedemptionUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetAllRedemptionsStateEnum = {
    PENDING: 'pending',
    APPROVED: 'approved',
    COMPLETED: 'completed',
    REJECTED: 'rejected'
} as const;
export type GetAllRedemptionsStateEnum = typeof GetAllRedemptionsStateEnum[keyof typeof GetAllRedemptionsStateEnum];
