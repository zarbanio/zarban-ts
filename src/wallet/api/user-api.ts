/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateChildUserRequest } from '../model';
// @ts-ignore
import type { EmailOtpSubmitRequest } from '../model';
// @ts-ignore
import type { KycConfirmRequest } from '../model';
// @ts-ignore
import type { KycRequest } from '../model';
// @ts-ignore
import type { KycResponse } from '../model';
// @ts-ignore
import type { PhoneOtpSubmitRequest } from '../model';
// @ts-ignore
import type { ProfileResponse } from '../model';
// @ts-ignore
import type { SimpleResponse } from '../model';
// @ts-ignore
import type { UpdateEmailRequest } from '../model';
// @ts-ignore
import type { UpdatePhoneRequest } from '../model';
// @ts-ignore
import type { User } from '../model';
// @ts-ignore
import type { UserError } from '../model';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Confirm KYC for the user.
         * @summary Confirm KYC
         * @param {KycConfirmRequest} kycConfirmRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmKyc: async (kycConfirmRequest: KycConfirmRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'kycConfirmRequest' is not null or undefined
            assertParamExists('confirmKyc', 'kycConfirmRequest', kycConfirmRequest)
            const localVarPath = `/users/kyc/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(kycConfirmRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirm the phone number of the user.
         * @summary Confirm phone number
         * @param {PhoneOtpSubmitRequest} phoneOtpSubmitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPhoneNumber: async (phoneOtpSubmitRequest: PhoneOtpSubmitRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneOtpSubmitRequest' is not null or undefined
            assertParamExists('confirmPhoneNumber', 'phoneOtpSubmitRequest', phoneOtpSubmitRequest)
            const localVarPath = `/users/phone/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phoneOtpSubmitRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create a child user
         * @summary create a child user
         * @param {CreateChildUserRequest} createChildUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildUser: async (createChildUserRequest: CreateChildUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createChildUserRequest' is not null or undefined
            assertParamExists('createChildUser', 'createChildUserRequest', createChildUserRequest)
            const localVarPath = `/users/children`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createChildUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the profile of the user.
         * @summary Get profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submit email confirmation OTP for the user.
         * @summary Submit email confirmation OTP
         * @param {EmailOtpSubmitRequest} emailOtpSubmitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitEmailConfirmationOtp: async (emailOtpSubmitRequest: EmailOtpSubmitRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailOtpSubmitRequest' is not null or undefined
            assertParamExists('submitEmailConfirmationOtp', 'emailOtpSubmitRequest', emailOtpSubmitRequest)
            const localVarPath = `/users/email/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailOtpSubmitRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submit KYC for the user.
         * @summary Submit KYC
         * @param {KycRequest} kycRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitKyc: async (kycRequest: KycRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'kycRequest' is not null or undefined
            assertParamExists('submitKyc', 'kycRequest', kycRequest)
            const localVarPath = `/users/kyc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(kycRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify the phone number of the user.
         * @summary Verify phone number
         * @param {UpdatePhoneRequest} updatePhoneRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyPhoneNumber: async (updatePhoneRequest: UpdatePhoneRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updatePhoneRequest' is not null or undefined
            assertParamExists('verifyPhoneNumber', 'updatePhoneRequest', updatePhoneRequest)
            const localVarPath = `/users/phone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updatePhoneRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify the email of the user.
         * @summary Verify email
         * @param {UpdateEmailRequest} updateEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserEmailAddress: async (updateEmailRequest: UpdateEmailRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateEmailRequest' is not null or undefined
            assertParamExists('verifyUserEmailAddress', 'updateEmailRequest', updateEmailRequest)
            const localVarPath = `/users/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEmailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Confirm KYC for the user.
         * @summary Confirm KYC
         * @param {KycConfirmRequest} kycConfirmRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmKyc(kycConfirmRequest: KycConfirmRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SimpleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmKyc(kycConfirmRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.confirmKyc']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Confirm the phone number of the user.
         * @summary Confirm phone number
         * @param {PhoneOtpSubmitRequest} phoneOtpSubmitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmPhoneNumber(phoneOtpSubmitRequest: PhoneOtpSubmitRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmPhoneNumber(phoneOtpSubmitRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.confirmPhoneNumber']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * create a child user
         * @summary create a child user
         * @param {CreateChildUserRequest} createChildUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createChildUser(createChildUserRequest: CreateChildUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createChildUser(createChildUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.createChildUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the profile of the user.
         * @summary Get profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserProfile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserProfile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUserProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Submit email confirmation OTP for the user.
         * @summary Submit email confirmation OTP
         * @param {EmailOtpSubmitRequest} emailOtpSubmitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitEmailConfirmationOtp(emailOtpSubmitRequest: EmailOtpSubmitRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SimpleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitEmailConfirmationOtp(emailOtpSubmitRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.submitEmailConfirmationOtp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Submit KYC for the user.
         * @summary Submit KYC
         * @param {KycRequest} kycRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitKyc(kycRequest: KycRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KycResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitKyc(kycRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.submitKyc']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Verify the phone number of the user.
         * @summary Verify phone number
         * @param {UpdatePhoneRequest} updatePhoneRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyPhoneNumber(updatePhoneRequest: UpdatePhoneRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyPhoneNumber(updatePhoneRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.verifyPhoneNumber']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Verify the email of the user.
         * @summary Verify email
         * @param {UpdateEmailRequest} updateEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyUserEmailAddress(updateEmailRequest: UpdateEmailRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SimpleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyUserEmailAddress(updateEmailRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.verifyUserEmailAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Confirm KYC for the user.
         * @summary Confirm KYC
         * @param {KycConfirmRequest} kycConfirmRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmKyc(kycConfirmRequest: KycConfirmRequest, options?: RawAxiosRequestConfig): AxiosPromise<SimpleResponse> {
            return localVarFp.confirmKyc(kycConfirmRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirm the phone number of the user.
         * @summary Confirm phone number
         * @param {PhoneOtpSubmitRequest} phoneOtpSubmitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPhoneNumber(phoneOtpSubmitRequest: PhoneOtpSubmitRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.confirmPhoneNumber(phoneOtpSubmitRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * create a child user
         * @summary create a child user
         * @param {CreateChildUserRequest} createChildUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildUser(createChildUserRequest: CreateChildUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.createChildUser(createChildUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the profile of the user.
         * @summary Get profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile(options?: RawAxiosRequestConfig): AxiosPromise<ProfileResponse> {
            return localVarFp.getUserProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * Submit email confirmation OTP for the user.
         * @summary Submit email confirmation OTP
         * @param {EmailOtpSubmitRequest} emailOtpSubmitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitEmailConfirmationOtp(emailOtpSubmitRequest: EmailOtpSubmitRequest, options?: RawAxiosRequestConfig): AxiosPromise<SimpleResponse> {
            return localVarFp.submitEmailConfirmationOtp(emailOtpSubmitRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Submit KYC for the user.
         * @summary Submit KYC
         * @param {KycRequest} kycRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitKyc(kycRequest: KycRequest, options?: RawAxiosRequestConfig): AxiosPromise<KycResponse> {
            return localVarFp.submitKyc(kycRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify the phone number of the user.
         * @summary Verify phone number
         * @param {UpdatePhoneRequest} updatePhoneRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyPhoneNumber(updatePhoneRequest: UpdatePhoneRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.verifyPhoneNumber(updatePhoneRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify the email of the user.
         * @summary Verify email
         * @param {UpdateEmailRequest} updateEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserEmailAddress(updateEmailRequest: UpdateEmailRequest, options?: RawAxiosRequestConfig): AxiosPromise<SimpleResponse> {
            return localVarFp.verifyUserEmailAddress(updateEmailRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - interface
 * @export
 * @interface UserApi
 */
export interface UserApiInterface {
    /**
     * Confirm KYC for the user.
     * @summary Confirm KYC
     * @param {KycConfirmRequest} kycConfirmRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    confirmKyc(kycConfirmRequest: KycConfirmRequest, options?: RawAxiosRequestConfig): AxiosPromise<SimpleResponse>;

    /**
     * Confirm the phone number of the user.
     * @summary Confirm phone number
     * @param {PhoneOtpSubmitRequest} phoneOtpSubmitRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    confirmPhoneNumber(phoneOtpSubmitRequest: PhoneOtpSubmitRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * create a child user
     * @summary create a child user
     * @param {CreateChildUserRequest} createChildUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    createChildUser(createChildUserRequest: CreateChildUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<User>;

    /**
     * Get the profile of the user.
     * @summary Get profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getUserProfile(options?: RawAxiosRequestConfig): AxiosPromise<ProfileResponse>;

    /**
     * Submit email confirmation OTP for the user.
     * @summary Submit email confirmation OTP
     * @param {EmailOtpSubmitRequest} emailOtpSubmitRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    submitEmailConfirmationOtp(emailOtpSubmitRequest: EmailOtpSubmitRequest, options?: RawAxiosRequestConfig): AxiosPromise<SimpleResponse>;

    /**
     * Submit KYC for the user.
     * @summary Submit KYC
     * @param {KycRequest} kycRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    submitKyc(kycRequest: KycRequest, options?: RawAxiosRequestConfig): AxiosPromise<KycResponse>;

    /**
     * Verify the phone number of the user.
     * @summary Verify phone number
     * @param {UpdatePhoneRequest} updatePhoneRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    verifyPhoneNumber(updatePhoneRequest: UpdatePhoneRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Verify the email of the user.
     * @summary Verify email
     * @param {UpdateEmailRequest} updateEmailRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    verifyUserEmailAddress(updateEmailRequest: UpdateEmailRequest, options?: RawAxiosRequestConfig): AxiosPromise<SimpleResponse>;

}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI implements UserApiInterface {
    /**
     * Confirm KYC for the user.
     * @summary Confirm KYC
     * @param {KycConfirmRequest} kycConfirmRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public confirmKyc(kycConfirmRequest: KycConfirmRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).confirmKyc(kycConfirmRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Confirm the phone number of the user.
     * @summary Confirm phone number
     * @param {PhoneOtpSubmitRequest} phoneOtpSubmitRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public confirmPhoneNumber(phoneOtpSubmitRequest: PhoneOtpSubmitRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).confirmPhoneNumber(phoneOtpSubmitRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create a child user
     * @summary create a child user
     * @param {CreateChildUserRequest} createChildUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createChildUser(createChildUserRequest: CreateChildUserRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).createChildUser(createChildUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the profile of the user.
     * @summary Get profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserProfile(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submit email confirmation OTP for the user.
     * @summary Submit email confirmation OTP
     * @param {EmailOtpSubmitRequest} emailOtpSubmitRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public submitEmailConfirmationOtp(emailOtpSubmitRequest: EmailOtpSubmitRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).submitEmailConfirmationOtp(emailOtpSubmitRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submit KYC for the user.
     * @summary Submit KYC
     * @param {KycRequest} kycRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public submitKyc(kycRequest: KycRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).submitKyc(kycRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify the phone number of the user.
     * @summary Verify phone number
     * @param {UpdatePhoneRequest} updatePhoneRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public verifyPhoneNumber(updatePhoneRequest: UpdatePhoneRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).verifyPhoneNumber(updatePhoneRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify the email of the user.
     * @summary Verify email
     * @param {UpdateEmailRequest} updateEmailRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public verifyUserEmailAddress(updateEmailRequest: UpdateEmailRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).verifyUserEmailAddress(updateEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

