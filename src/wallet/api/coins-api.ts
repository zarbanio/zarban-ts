/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Coin } from '../model';
// @ts-ignore
import type { CoinResponse } from '../model';
// @ts-ignore
import type { Symbol } from '../model';
/**
 * CoinsApi - axios parameter creator
 * @export
 */
export const CoinsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the details of a coin.
         * @summary Get coin
         * @param {Symbol} symbol Coin symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoinDetails: async (symbol: Symbol, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('getCoinDetails', 'symbol', symbol)
            const localVarPath = `/coins/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of supported coins.
         * @summary Get coins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportedCoins: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/coins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoinsApi - functional programming interface
 * @export
 */
export const CoinsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoinsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the details of a coin.
         * @summary Get coin
         * @param {Symbol} symbol Coin symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCoinDetails(symbol: Symbol, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Coin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCoinDetails(symbol, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoinsApi.getCoinDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the list of supported coins.
         * @summary Get coins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSupportedCoins(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoinResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSupportedCoins(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoinsApi.getSupportedCoins']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CoinsApi - factory interface
 * @export
 */
export const CoinsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoinsApiFp(configuration)
    return {
        /**
         * Get the details of a coin.
         * @summary Get coin
         * @param {Symbol} symbol Coin symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoinDetails(symbol: Symbol, options?: RawAxiosRequestConfig): AxiosPromise<Coin> {
            return localVarFp.getCoinDetails(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of supported coins.
         * @summary Get coins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportedCoins(options?: RawAxiosRequestConfig): AxiosPromise<CoinResponse> {
            return localVarFp.getSupportedCoins(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoinsApi - interface
 * @export
 * @interface CoinsApi
 */
export interface CoinsApiInterface {
    /**
     * Get the details of a coin.
     * @summary Get coin
     * @param {Symbol} symbol Coin symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApiInterface
     */
    getCoinDetails(symbol: Symbol, options?: RawAxiosRequestConfig): AxiosPromise<Coin>;

    /**
     * Get the list of supported coins.
     * @summary Get coins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApiInterface
     */
    getSupportedCoins(options?: RawAxiosRequestConfig): AxiosPromise<CoinResponse>;

}

/**
 * CoinsApi - object-oriented interface
 * @export
 * @class CoinsApi
 * @extends {BaseAPI}
 */
export class CoinsApi extends BaseAPI implements CoinsApiInterface {
    /**
     * Get the details of a coin.
     * @summary Get coin
     * @param {Symbol} symbol Coin symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApi
     */
    public getCoinDetails(symbol: Symbol, options?: RawAxiosRequestConfig) {
        return CoinsApiFp(this.configuration).getCoinDetails(symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of supported coins.
     * @summary Get coins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApi
     */
    public getSupportedCoins(options?: RawAxiosRequestConfig) {
        return CoinsApiFp(this.configuration).getSupportedCoins(options).then((request) => request(this.axios, this.basePath));
    }
}

