/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Referral } from '../model';
// @ts-ignore
import type { ReferralResponse } from '../model';
/**
 * ReferralsApi - axios parameter creator
 * @export
 */
export const ReferralsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a referral by its ID.
         * @summary Get referral by ID
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralById: async (referralId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referralId' is not null or undefined
            assertParamExists('getReferralById', 'referralId', referralId)
            const localVarPath = `/referrals/{referralId}`
                .replace(`{${"referralId"}}`, encodeURIComponent(String(referralId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get referrals by user ID or name.
         * @summary Get referrals
         * @param {string} [name] Referral name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferrals: async (name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/referrals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Redeem a referral for a user.
         * @summary Redeem a referral
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemReferral: async (referralId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referralId' is not null or undefined
            assertParamExists('redeemReferral', 'referralId', referralId)
            const localVarPath = `/referrals/{referralId}/redeem`
                .replace(`{${"referralId"}}`, encodeURIComponent(String(referralId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validate a referral to check if it can be redeemed.
         * @summary Validate a referral
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateReferral: async (referralId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referralId' is not null or undefined
            assertParamExists('validateReferral', 'referralId', referralId)
            const localVarPath = `/referrals/{referralId}/validate`
                .replace(`{${"referralId"}}`, encodeURIComponent(String(referralId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReferralsApi - functional programming interface
 * @export
 */
export const ReferralsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReferralsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a referral by its ID.
         * @summary Get referral by ID
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReferralById(referralId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Referral>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReferralById(referralId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReferralsApi.getReferralById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get referrals by user ID or name.
         * @summary Get referrals
         * @param {string} [name] Referral name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReferrals(name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReferralResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReferrals(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReferralsApi.getReferrals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Redeem a referral for a user.
         * @summary Redeem a referral
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redeemReferral(referralId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redeemReferral(referralId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReferralsApi.redeemReferral']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Validate a referral to check if it can be redeemed.
         * @summary Validate a referral
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateReferral(referralId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateReferral(referralId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReferralsApi.validateReferral']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReferralsApi - factory interface
 * @export
 */
export const ReferralsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReferralsApiFp(configuration)
    return {
        /**
         * Get a referral by its ID.
         * @summary Get referral by ID
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralById(referralId: number, options?: RawAxiosRequestConfig): AxiosPromise<Referral> {
            return localVarFp.getReferralById(referralId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get referrals by user ID or name.
         * @summary Get referrals
         * @param {string} [name] Referral name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferrals(name?: string, options?: RawAxiosRequestConfig): AxiosPromise<ReferralResponse> {
            return localVarFp.getReferrals(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Redeem a referral for a user.
         * @summary Redeem a referral
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemReferral(referralId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.redeemReferral(referralId, options).then((request) => request(axios, basePath));
        },
        /**
         * Validate a referral to check if it can be redeemed.
         * @summary Validate a referral
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateReferral(referralId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.validateReferral(referralId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReferralsApi - interface
 * @export
 * @interface ReferralsApi
 */
export interface ReferralsApiInterface {
    /**
     * Get a referral by its ID.
     * @summary Get referral by ID
     * @param {number} referralId Referral ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApiInterface
     */
    getReferralById(referralId: number, options?: RawAxiosRequestConfig): AxiosPromise<Referral>;

    /**
     * Get referrals by user ID or name.
     * @summary Get referrals
     * @param {string} [name] Referral name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApiInterface
     */
    getReferrals(name?: string, options?: RawAxiosRequestConfig): AxiosPromise<ReferralResponse>;

    /**
     * Redeem a referral for a user.
     * @summary Redeem a referral
     * @param {number} referralId Referral ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApiInterface
     */
    redeemReferral(referralId: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Validate a referral to check if it can be redeemed.
     * @summary Validate a referral
     * @param {number} referralId Referral ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApiInterface
     */
    validateReferral(referralId: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ReferralsApi - object-oriented interface
 * @export
 * @class ReferralsApi
 * @extends {BaseAPI}
 */
export class ReferralsApi extends BaseAPI implements ReferralsApiInterface {
    /**
     * Get a referral by its ID.
     * @summary Get referral by ID
     * @param {number} referralId Referral ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    public getReferralById(referralId: number, options?: RawAxiosRequestConfig) {
        return ReferralsApiFp(this.configuration).getReferralById(referralId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get referrals by user ID or name.
     * @summary Get referrals
     * @param {string} [name] Referral name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    public getReferrals(name?: string, options?: RawAxiosRequestConfig) {
        return ReferralsApiFp(this.configuration).getReferrals(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Redeem a referral for a user.
     * @summary Redeem a referral
     * @param {number} referralId Referral ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    public redeemReferral(referralId: number, options?: RawAxiosRequestConfig) {
        return ReferralsApiFp(this.configuration).redeemReferral(referralId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Validate a referral to check if it can be redeemed.
     * @summary Validate a referral
     * @param {number} referralId Referral ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    public validateReferral(referralId: number, options?: RawAxiosRequestConfig) {
        return ReferralsApiFp(this.configuration).validateReferral(referralId, options).then((request) => request(this.axios, this.basePath));
    }
}

