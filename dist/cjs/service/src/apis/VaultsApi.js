"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetVaultEventsByIdTypeEnum = exports.VaultsApi = void 0;
const tslib_1 = require("tslib");
const runtime = tslib_1.__importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class VaultsApi extends runtime.BaseAPI {
    /**
     * Get a vault by ID
     */
    async getVaultByIdRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling getVaultById().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/v2/vaults/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.VaultFromJSON)(jsonValue));
    }
    /**
     * Get a vault by ID
     */
    async getVaultById(requestParameters, initOverrides) {
        const response = await this.getVaultByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get vault events by ID
     */
    async getVaultEventsByIdRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling getVaultEventsById().');
        }
        const queryParameters = {};
        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/v2/vaults/{id}/events`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.VaultEventsResponseFromJSON)(jsonValue));
    }
    /**
     * Get vault events by ID
     */
    async getVaultEventsById(requestParameters, initOverrides) {
        const response = await this.getVaultEventsByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get vaults by owner query
     */
    async getVaultsByOwnerRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters['owner'] != null) {
            queryParameters['owner'] = requestParameters['owner'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/v2/vaults`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.VaultsResponseFromJSON)(jsonValue));
    }
    /**
     * Get vaults by owner query
     */
    async getVaultsByOwner(requestParameters = {}, initOverrides) {
        const response = await this.getVaultsByOwnerRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.VaultsApi = VaultsApi;
/**
 * @export
 */
exports.GetVaultEventsByIdTypeEnum = {
    REPAY: 'repay',
    DEPOSIT: 'deposit',
    WITHDRAW: 'withdraw',
    MINT: 'mint'
};
//# sourceMappingURL=VaultsApi.js.map