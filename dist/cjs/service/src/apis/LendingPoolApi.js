"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LendingPoolApi = void 0;
const tslib_1 = require("tslib");
const runtime = tslib_1.__importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class LendingPoolApi extends runtime.BaseAPI {
    /**
     * Borrow from lending pool
     * Borrow from lending pool
     */
    async createLendingPoolBorrowRaw(requestParameters, initOverrides) {
        if (requestParameters['lendingpoolBorrowTxRequest'] == null) {
            throw new runtime.RequiredError('lendingpoolBorrowTxRequest', 'Required parameter "lendingpoolBorrowTxRequest" was null or undefined when calling createLendingPoolBorrow().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/v2/lendingpool/tx/borrow`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.LendingpoolBorrowTxRequestToJSON)(requestParameters['lendingpoolBorrowTxRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.LendingpoolBorrowTxResponseFromJSON)(jsonValue));
    }
    /**
     * Borrow from lending pool
     * Borrow from lending pool
     */
    async createLendingPoolBorrow(requestParameters, initOverrides) {
        const response = await this.createLendingPoolBorrowRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Deposit to lending pool
     * Deposit to lending pool
     */
    async createLendingPoolDepositRaw(requestParameters, initOverrides) {
        if (requestParameters['lendingpoolDepositTxRequest'] == null) {
            throw new runtime.RequiredError('lendingpoolDepositTxRequest', 'Required parameter "lendingpoolDepositTxRequest" was null or undefined when calling createLendingPoolDeposit().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/v2/lendingpool/tx/deposit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.LendingpoolDepositTxRequestToJSON)(requestParameters['lendingpoolDepositTxRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.LendingpoolDepositTxResponseFromJSON)(jsonValue));
    }
    /**
     * Deposit to lending pool
     * Deposit to lending pool
     */
    async createLendingPoolDeposit(requestParameters, initOverrides) {
        const response = await this.createLendingPoolDepositRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Repay to lending pool
     * Repay to lending pool
     */
    async createLendingPoolRepayRaw(requestParameters, initOverrides) {
        if (requestParameters['lendingpoolRepayTxRequest'] == null) {
            throw new runtime.RequiredError('lendingpoolRepayTxRequest', 'Required parameter "lendingpoolRepayTxRequest" was null or undefined when calling createLendingPoolRepay().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/v2/lendingpool/tx/repay`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.LendingpoolRepayTxRequestToJSON)(requestParameters['lendingpoolRepayTxRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.LendingpoolRepayTxResponseFromJSON)(jsonValue));
    }
    /**
     * Repay to lending pool
     * Repay to lending pool
     */
    async createLendingPoolRepay(requestParameters, initOverrides) {
        const response = await this.createLendingPoolRepayRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Withdraw from lending pool
     * Withdraw from lending pool
     */
    async createLendingPoolWithdrawRaw(requestParameters, initOverrides) {
        if (requestParameters['lendingpoolWithdrawTxRequest'] == null) {
            throw new runtime.RequiredError('lendingpoolWithdrawTxRequest', 'Required parameter "lendingpoolWithdrawTxRequest" was null or undefined when calling createLendingPoolWithdraw().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/v2/lendingpool/tx/withdraw`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.LendingpoolWithdrawTxRequestToJSON)(requestParameters['lendingpoolWithdrawTxRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.LendingpoolWithdrawTxResponseFromJSON)(jsonValue));
    }
    /**
     * Withdraw from lending pool
     * Withdraw from lending pool
     */
    async createLendingPoolWithdraw(requestParameters, initOverrides) {
        const response = await this.createLendingPoolWithdrawRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieve data of reserves
     * Fetch Reserve Data By Asset
     */
    async fetchReserveDataByAssetRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters['asset'] != null) {
            queryParameters['asset'] = requestParameters['asset'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/v2/lendingpool/reserves`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FormattedReserveDataFromJSON)(jsonValue));
    }
    /**
     * Retrieve data of reserves
     * Fetch Reserve Data By Asset
     */
    async fetchReserveDataByAsset(requestParameters = {}, initOverrides) {
        const response = await this.fetchReserveDataByAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get user borrows of lendingpool
     * Get user borrows of lendingpool
     */
    async getUserBorrowsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }
        if (requestParameters['reserve'] != null) {
            queryParameters['reserve'] = requestParameters['reserve'];
        }
        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }
        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/v2/lendingpool/borrows`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UserBorrowsResponseFromJSON)(jsonValue));
    }
    /**
     * Get user borrows of lendingpool
     * Get user borrows of lendingpool
     */
    async getUserBorrows(requestParameters = {}, initOverrides) {
        const response = await this.getUserBorrowsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get user deposits of Lendingpool
     * Get user deposits of Lendingpool
     */
    async getUserDepositsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }
        if (requestParameters['reserve'] != null) {
            queryParameters['reserve'] = requestParameters['reserve'];
        }
        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }
        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/v2/lendingpool/deposits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UserDepositsResponseFromJSON)(jsonValue));
    }
    /**
     * Get user deposits of Lendingpool
     * Get user deposits of Lendingpool
     */
    async getUserDeposits(requestParameters = {}, initOverrides) {
        const response = await this.getUserDepositsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Allows to enable/disable a specific asset as collateral
     * Enable/Disable asset as collateral
     */
    async setLendingPoolAssetCollateralRaw(requestParameters, initOverrides) {
        if (requestParameters['lendingpoolUseAssetAsCollateralTxRequest'] == null) {
            throw new runtime.RequiredError('lendingpoolUseAssetAsCollateralTxRequest', 'Required parameter "lendingpoolUseAssetAsCollateralTxRequest" was null or undefined when calling setLendingPoolAssetCollateral().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/v2/lendingpool/tx/useassetascollateral`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.LendingpoolUseAssetAsCollateralTxRequestToJSON)(requestParameters['lendingpoolUseAssetAsCollateralTxRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.LendingpoolUseAssetAsCollateralTxResponseFromJSON)(jsonValue));
    }
    /**
     * Allows to enable/disable a specific asset as collateral
     * Enable/Disable asset as collateral
     */
    async setLendingPoolAssetCollateral(requestParameters, initOverrides) {
        const response = await this.setLendingPoolAssetCollateralRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.LendingPoolApi = LendingPoolApi;
//# sourceMappingURL=LendingPoolApi.js.map