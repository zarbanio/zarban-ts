"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfVaultEventItem = instanceOfVaultEventItem;
exports.VaultEventItemFromJSON = VaultEventItemFromJSON;
exports.VaultEventItemFromJSONTyped = VaultEventItemFromJSONTyped;
exports.VaultEventItemToJSON = VaultEventItemToJSON;
exports.VaultEventItemToJSONTyped = VaultEventItemToJSONTyped;
const VaultEvent_1 = require("./VaultEvent");
const EventDomain_1 = require("./EventDomain");
const EventType_1 = require("./EventType");
const Log_1 = require("./Log");
const EventName_1 = require("./EventName");
/**
 * Check if a given object implements the VaultEventItem interface.
 */
function instanceOfVaultEventItem(value) {
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('name' in value) || value['name'] === undefined)
        return false;
    if (!('type' in value) || value['type'] === undefined)
        return false;
    if (!('domain' in value) || value['domain'] === undefined)
        return false;
    if (!('raw' in value) || value['raw'] === undefined)
        return false;
    return true;
}
function VaultEventItemFromJSON(json) {
    return VaultEventItemFromJSONTyped(json, false);
}
function VaultEventItemFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': json['id'],
        'name': (0, EventName_1.EventNameFromJSON)(json['name']),
        'type': (0, EventType_1.EventTypeFromJSON)(json['type']),
        'domain': (0, EventDomain_1.EventDomainFromJSON)(json['domain']),
        'raw': (0, Log_1.LogFromJSON)(json['raw']),
        'payload': json['payload'] == null ? undefined : (0, VaultEvent_1.VaultEventFromJSON)(json['payload']),
    };
}
function VaultEventItemToJSON(json) {
    return VaultEventItemToJSONTyped(json, false);
}
function VaultEventItemToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'id': value['id'],
        'name': (0, EventName_1.EventNameToJSON)(value['name']),
        'type': (0, EventType_1.EventTypeToJSON)(value['type']),
        'domain': (0, EventDomain_1.EventDomainToJSON)(value['domain']),
        'raw': (0, Log_1.LogToJSON)(value['raw']),
        'payload': (0, VaultEvent_1.VaultEventToJSON)(value['payload']),
    };
}
//# sourceMappingURL=VaultEventItem.js.map