"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WithdrawRequestStatusEnum = void 0;
exports.instanceOfWithdrawRequest = instanceOfWithdrawRequest;
exports.WithdrawRequestFromJSON = WithdrawRequestFromJSON;
exports.WithdrawRequestFromJSONTyped = WithdrawRequestFromJSONTyped;
exports.WithdrawRequestToJSON = WithdrawRequestToJSON;
exports.WithdrawRequestToJSONTyped = WithdrawRequestToJSONTyped;
const Symbol_1 = require("./Symbol");
const Network_1 = require("./Network");
const Timestamp_1 = require("./Timestamp");
/**
 * @export
 */
exports.WithdrawRequestStatusEnum = {
    PENDING: 'Pending',
    CANCELED: 'Canceled',
    APPROVED: 'Approved',
    REJECTED: 'Rejected',
    PROCCESSING: 'Proccessing',
    FAILED: 'Failed',
    SENT: 'Sent',
    ACCOUNT_DEBITED: 'AccountDebited',
    ACCOUNT_BALANCE_UNLOCKED: 'AccountBalanceUnlocked',
    COMPLETED: 'Completed'
};
/**
 * Check if a given object implements the WithdrawRequest interface.
 */
function instanceOfWithdrawRequest(value) {
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('timeCreated' in value) || value['timeCreated'] === undefined)
        return false;
    if (!('network' in value) || value['network'] === undefined)
        return false;
    if (!('symbol' in value) || value['symbol'] === undefined)
        return false;
    if (!('amount' in value) || value['amount'] === undefined)
        return false;
    if (!('to' in value) || value['to'] === undefined)
        return false;
    if (!('status' in value) || value['status'] === undefined)
        return false;
    return true;
}
function WithdrawRequestFromJSON(json) {
    return WithdrawRequestFromJSONTyped(json, false);
}
function WithdrawRequestFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': json['id'],
        'timeCreated': (0, Timestamp_1.TimestampFromJSON)(json['timeCreated']),
        'network': (0, Network_1.NetworkFromJSON)(json['network']),
        'symbol': (0, Symbol_1.SymbolFromJSON)(json['symbol']),
        'amount': json['amount'],
        'to': json['to'],
        'comment': json['comment'] == null ? undefined : json['comment'],
        'status': json['status'],
        'blockExplorerUrl': json['blockExplorerUrl'] == null ? undefined : json['blockExplorerUrl'],
    };
}
function WithdrawRequestToJSON(json) {
    return WithdrawRequestToJSONTyped(json, false);
}
function WithdrawRequestToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'id': value['id'],
        'timeCreated': (0, Timestamp_1.TimestampToJSON)(value['timeCreated']),
        'network': (0, Network_1.NetworkToJSON)(value['network']),
        'symbol': (0, Symbol_1.SymbolToJSON)(value['symbol']),
        'amount': value['amount'],
        'to': value['to'],
        'comment': value['comment'],
        'status': value['status'],
        'blockExplorerUrl': value['blockExplorerUrl'],
    };
}
//# sourceMappingURL=WithdrawRequest.js.map