"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfCoin = instanceOfCoin;
exports.CoinFromJSON = CoinFromJSON;
exports.CoinFromJSONTyped = CoinFromJSONTyped;
exports.CoinToJSON = CoinToJSON;
exports.CoinToJSONTyped = CoinToJSONTyped;
const BulletContent_1 = require("./BulletContent");
const CoinConfig_1 = require("./CoinConfig");
const Symbol_1 = require("./Symbol");
const Network_1 = require("./Network");
/**
 * Check if a given object implements the Coin interface.
 */
function instanceOfCoin(value) {
    if (!('config' in value) || value['config'] === undefined)
        return false;
    if (!('symbol' in value) || value['symbol'] === undefined)
        return false;
    if (!('name' in value) || value['name'] === undefined)
        return false;
    if (!('logoUri' in value) || value['logoUri'] === undefined)
        return false;
    if (!('depositableNetworks' in value) || value['depositableNetworks'] === undefined)
        return false;
    if (!('withdrawableNetworks' in value) || value['withdrawableNetworks'] === undefined)
        return false;
    if (!('content' in value) || value['content'] === undefined)
        return false;
    return true;
}
function CoinFromJSON(json) {
    return CoinFromJSONTyped(json, false);
}
function CoinFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'config': (0, CoinConfig_1.CoinConfigFromJSON)(json['config']),
        'symbol': (0, Symbol_1.SymbolFromJSON)(json['symbol']),
        'name': json['name'],
        'logoUri': json['logoUri'],
        'depositableNetworks': (json['depositableNetworks'].map(Network_1.NetworkFromJSON)),
        'withdrawableNetworks': (json['withdrawableNetworks'].map(Network_1.NetworkFromJSON)),
        'content': (0, BulletContent_1.BulletContentFromJSON)(json['content']),
    };
}
function CoinToJSON(json) {
    return CoinToJSONTyped(json, false);
}
function CoinToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'config': (0, CoinConfig_1.CoinConfigToJSON)(value['config']),
        'symbol': (0, Symbol_1.SymbolToJSON)(value['symbol']),
        'name': value['name'],
        'logoUri': value['logoUri'],
        'depositableNetworks': (value['depositableNetworks'].map(Network_1.NetworkToJSON)),
        'withdrawableNetworks': (value['withdrawableNetworks'].map(Network_1.NetworkToJSON)),
        'content': (0, BulletContent_1.BulletContentToJSON)(value['content']),
    };
}
//# sourceMappingURL=Coin.js.map