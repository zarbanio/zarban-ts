/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AuthTelegramRequest, JwtResponse, LoginRequest, SignUpRequest, SimpleResponse } from '../models/index';
export interface AuthenticateWithTelegramRequest {
    authTelegramRequest: AuthTelegramRequest;
}
export interface GenerateJwtTokenRequest {
    duration: GenerateJwtTokenDurationEnum;
}
export interface GetOtpRequest {
    channel: GetOtpChannelEnum;
}
export interface LoginWithEmailAndPasswordRequest {
    loginRequest: LoginRequest;
}
export interface SignupWithEmailAndPasswordRequest {
    signUpRequest: SignUpRequest;
}
export interface VerifyUserEmailRequest {
    token: string;
}
/**
 * AuthApi - interface
 *
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     * Authenticate with Telegram and get a JWT token.
     * @summary Authenticate with Telegram
     * @param {AuthTelegramRequest} authTelegramRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authenticateWithTelegramRaw(requestParameters: AuthenticateWithTelegramRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>>;
    /**
     * Authenticate with Telegram and get a JWT token.
     * Authenticate with Telegram
     */
    authenticateWithTelegram(requestParameters: AuthenticateWithTelegramRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse>;
    /**
     * Generate a JWT token.
     * @summary Generate a JWT token
     * @param {7 | 15 | 30 | 90} duration Token duration in days
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    generateJwtTokenRaw(requestParameters: GenerateJwtTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>>;
    /**
     * Generate a JWT token.
     * Generate a JWT token
     */
    generateJwtToken(requestParameters: GenerateJwtTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse>;
    /**
     * Get OTP for the user.
     * @summary Get OTP
     * @param {'phone'} channel Channel to send OTP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    getOtpRaw(requestParameters: GetOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleResponse>>;
    /**
     * Get OTP for the user.
     * Get OTP
     */
    getOtp(requestParameters: GetOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleResponse>;
    /**
     * Login with email and password and get a JWT token.
     * @summary Login with email and password
     * @param {LoginRequest} loginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    loginWithEmailAndPasswordRaw(requestParameters: LoginWithEmailAndPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>>;
    /**
     * Login with email and password and get a JWT token.
     * Login with email and password
     */
    loginWithEmailAndPassword(requestParameters: LoginWithEmailAndPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse>;
    /**
     * signup with email and password and get a JWT token.
     * @summary signup with email and password
     * @param {SignUpRequest} signUpRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    signupWithEmailAndPasswordRaw(requestParameters: SignupWithEmailAndPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleResponse>>;
    /**
     * signup with email and password and get a JWT token.
     * signup with email and password
     */
    signupWithEmailAndPassword(requestParameters: SignupWithEmailAndPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleResponse>;
    /**
     * Verify the email of the user.
     * @summary Verify email
     * @param {string} token Verification token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    verifyUserEmailRaw(requestParameters: VerifyUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>>;
    /**
     * Verify the email of the user.
     * Verify email
     */
    verifyUserEmail(requestParameters: VerifyUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse>;
}
/**
 *
 */
export declare class AuthApi extends runtime.BaseAPI implements AuthApiInterface {
    /**
     * Authenticate with Telegram and get a JWT token.
     * Authenticate with Telegram
     */
    authenticateWithTelegramRaw(requestParameters: AuthenticateWithTelegramRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>>;
    /**
     * Authenticate with Telegram and get a JWT token.
     * Authenticate with Telegram
     */
    authenticateWithTelegram(requestParameters: AuthenticateWithTelegramRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse>;
    /**
     * Generate a JWT token.
     * Generate a JWT token
     */
    generateJwtTokenRaw(requestParameters: GenerateJwtTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>>;
    /**
     * Generate a JWT token.
     * Generate a JWT token
     */
    generateJwtToken(requestParameters: GenerateJwtTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse>;
    /**
     * Get OTP for the user.
     * Get OTP
     */
    getOtpRaw(requestParameters: GetOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleResponse>>;
    /**
     * Get OTP for the user.
     * Get OTP
     */
    getOtp(requestParameters: GetOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleResponse>;
    /**
     * Login with email and password and get a JWT token.
     * Login with email and password
     */
    loginWithEmailAndPasswordRaw(requestParameters: LoginWithEmailAndPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>>;
    /**
     * Login with email and password and get a JWT token.
     * Login with email and password
     */
    loginWithEmailAndPassword(requestParameters: LoginWithEmailAndPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse>;
    /**
     * signup with email and password and get a JWT token.
     * signup with email and password
     */
    signupWithEmailAndPasswordRaw(requestParameters: SignupWithEmailAndPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SimpleResponse>>;
    /**
     * signup with email and password and get a JWT token.
     * signup with email and password
     */
    signupWithEmailAndPassword(requestParameters: SignupWithEmailAndPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SimpleResponse>;
    /**
     * Verify the email of the user.
     * Verify email
     */
    verifyUserEmailRaw(requestParameters: VerifyUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JwtResponse>>;
    /**
     * Verify the email of the user.
     * Verify email
     */
    verifyUserEmail(requestParameters: VerifyUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JwtResponse>;
}
/**
 * @export
 */
export declare const GenerateJwtTokenDurationEnum: {
    readonly NUMBER_7: 7;
    readonly NUMBER_15: 15;
    readonly NUMBER_30: 30;
    readonly NUMBER_90: 90;
};
export type GenerateJwtTokenDurationEnum = typeof GenerateJwtTokenDurationEnum[keyof typeof GenerateJwtTokenDurationEnum];
/**
 * @export
 */
export declare const GetOtpChannelEnum: {
    readonly PHONE: "phone";
};
export type GetOtpChannelEnum = typeof GetOtpChannelEnum[keyof typeof GetOtpChannelEnum];
//# sourceMappingURL=AuthApi.d.ts.map