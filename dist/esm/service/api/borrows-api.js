/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { __awaiter } from "tslib";
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from '../base';
/**
 * BorrowsApi - axios parameter creator
 * @export
 */
export const BorrowsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get user borrows of lendingpool
         * @summary Get user borrows of lendingpool
         * @param {string} [user] Ethereum address of the user
         * @param {string} [reserve] Ethereum address of the reserve
         * @param {number} [cursor] Cursor for pagination
         * @param {number} [limit] Limit the number of deposits returned (default is 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserBorrows: (user_1, reserve_1, cursor_1, limit_1, ...args_1) => __awaiter(this, [user_1, reserve_1, cursor_1, limit_1, ...args_1], void 0, function* (user, reserve, cursor, limit, options = {}) {
            const localVarPath = `/v2/lendingpool/borrows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }
            if (reserve !== undefined) {
                localVarQueryParameter['reserve'] = reserve;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * BorrowsApi - functional programming interface
 * @export
 */
export const BorrowsApiFp = function (configuration) {
    const localVarAxiosParamCreator = BorrowsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get user borrows of lendingpool
         * @summary Get user borrows of lendingpool
         * @param {string} [user] Ethereum address of the user
         * @param {string} [reserve] Ethereum address of the reserve
         * @param {number} [cursor] Cursor for pagination
         * @param {number} [limit] Limit the number of deposits returned (default is 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserBorrows(user, reserve, cursor, limit, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserBorrows(user, reserve, cursor, limit, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['BorrowsApi.getUserBorrows']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * BorrowsApi - factory interface
 * @export
 */
export const BorrowsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = BorrowsApiFp(configuration);
    return {
        /**
         * Get user borrows of lendingpool
         * @summary Get user borrows of lendingpool
         * @param {string} [user] Ethereum address of the user
         * @param {string} [reserve] Ethereum address of the reserve
         * @param {number} [cursor] Cursor for pagination
         * @param {number} [limit] Limit the number of deposits returned (default is 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserBorrows(user, reserve, cursor, limit, options) {
            return localVarFp.getUserBorrows(user, reserve, cursor, limit, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * BorrowsApi - object-oriented interface
 * @export
 * @class BorrowsApi
 * @extends {BaseAPI}
 */
export class BorrowsApi extends BaseAPI {
    /**
     * Get user borrows of lendingpool
     * @summary Get user borrows of lendingpool
     * @param {string} [user] Ethereum address of the user
     * @param {string} [reserve] Ethereum address of the reserve
     * @param {number} [cursor] Cursor for pagination
     * @param {number} [limit] Limit the number of deposits returned (default is 50)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BorrowsApi
     */
    getUserBorrows(user, reserve, cursor, limit, options) {
        return BorrowsApiFp(this.configuration).getUserBorrows(user, reserve, cursor, limit, options).then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=borrows-api.js.map