/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { __awaiter } from "tslib";
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from '../base';
/**
 * ReferralsApi - axios parameter creator
 * @export
 */
export const ReferralsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get a referral by its ID.
         * @summary Get referral by ID
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralById: (referralId_1, ...args_1) => __awaiter(this, [referralId_1, ...args_1], void 0, function* (referralId, options = {}) {
            // verify required parameter 'referralId' is not null or undefined
            assertParamExists('getReferralById', 'referralId', referralId);
            const localVarPath = `/referrals/{referralId}`
                .replace(`{${"referralId"}}`, encodeURIComponent(String(referralId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get referrals by user ID or name.
         * @summary Get referrals
         * @param {string} [name] Referral name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferrals: (name_1, ...args_1) => __awaiter(this, [name_1, ...args_1], void 0, function* (name, options = {}) {
            const localVarPath = `/referrals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Redeem a referral for a user.
         * @summary Redeem a referral
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemReferral: (referralId_1, ...args_1) => __awaiter(this, [referralId_1, ...args_1], void 0, function* (referralId, options = {}) {
            // verify required parameter 'referralId' is not null or undefined
            assertParamExists('redeemReferral', 'referralId', referralId);
            const localVarPath = `/referrals/{referralId}/redeem`
                .replace(`{${"referralId"}}`, encodeURIComponent(String(referralId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Validate a referral to check if it can be redeemed.
         * @summary Validate a referral
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateReferral: (referralId_1, ...args_1) => __awaiter(this, [referralId_1, ...args_1], void 0, function* (referralId, options = {}) {
            // verify required parameter 'referralId' is not null or undefined
            assertParamExists('validateReferral', 'referralId', referralId);
            const localVarPath = `/referrals/{referralId}/validate`
                .replace(`{${"referralId"}}`, encodeURIComponent(String(referralId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ReferralsApi - functional programming interface
 * @export
 */
export const ReferralsApiFp = function (configuration) {
    const localVarAxiosParamCreator = ReferralsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get a referral by its ID.
         * @summary Get referral by ID
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralById(referralId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getReferralById(referralId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ReferralsApi.getReferralById']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get referrals by user ID or name.
         * @summary Get referrals
         * @param {string} [name] Referral name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferrals(name, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getReferrals(name, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ReferralsApi.getReferrals']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Redeem a referral for a user.
         * @summary Redeem a referral
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemReferral(referralId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.redeemReferral(referralId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ReferralsApi.redeemReferral']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Validate a referral to check if it can be redeemed.
         * @summary Validate a referral
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateReferral(referralId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.validateReferral(referralId, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = operationServerMap['ReferralsApi.validateReferral']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
/**
 * ReferralsApi - factory interface
 * @export
 */
export const ReferralsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ReferralsApiFp(configuration);
    return {
        /**
         * Get a referral by its ID.
         * @summary Get referral by ID
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralById(referralId, options) {
            return localVarFp.getReferralById(referralId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get referrals by user ID or name.
         * @summary Get referrals
         * @param {string} [name] Referral name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferrals(name, options) {
            return localVarFp.getReferrals(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Redeem a referral for a user.
         * @summary Redeem a referral
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemReferral(referralId, options) {
            return localVarFp.redeemReferral(referralId, options).then((request) => request(axios, basePath));
        },
        /**
         * Validate a referral to check if it can be redeemed.
         * @summary Validate a referral
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateReferral(referralId, options) {
            return localVarFp.validateReferral(referralId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ReferralsApi - object-oriented interface
 * @export
 * @class ReferralsApi
 * @extends {BaseAPI}
 */
export class ReferralsApi extends BaseAPI {
    /**
     * Get a referral by its ID.
     * @summary Get referral by ID
     * @param {number} referralId Referral ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    getReferralById(referralId, options) {
        return ReferralsApiFp(this.configuration).getReferralById(referralId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get referrals by user ID or name.
     * @summary Get referrals
     * @param {string} [name] Referral name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    getReferrals(name, options) {
        return ReferralsApiFp(this.configuration).getReferrals(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Redeem a referral for a user.
     * @summary Redeem a referral
     * @param {number} referralId Referral ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    redeemReferral(referralId, options) {
        return ReferralsApiFp(this.configuration).redeemReferral(referralId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Validate a referral to check if it can be redeemed.
     * @summary Validate a referral
     * @param {number} referralId Referral ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    validateReferral(referralId, options) {
        return ReferralsApiFp(this.configuration).validateReferral(referralId, options).then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=referrals-api.js.map