/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from '../base';
/**
 * RedemptionsApi - axios parameter creator
 * @export
 */
export const RedemptionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get a list of all redemptions.
         * @summary Get all redemptions
         * @param {GetAllRedemptionsStateEnum} [state] Cursor for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRedemptions: async (state, options = {}) => {
            const localVarPath = `/admin/redemptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the details of a redemption.
         * @summary Get redemption
         * @param {number} id Redemption ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedemptionDetails: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRedemptionDetails', 'id', id);
            const localVarPath = `/admin/redemptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Redeem zar
         * @summary Redeem zar
         * @param {RedemptionRequest} redemptionRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemZar: async (redemptionRequest, options = {}) => {
            // verify required parameter 'redemptionRequest' is not null or undefined
            assertParamExists('redeemZar', 'redemptionRequest', redemptionRequest);
            const localVarPath = `/redemptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(redemptionRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the status of a redemption.
         * @summary Update redemption
         * @param {string} id Redemption ID
         * @param {AdminRedemptionUpdateRequest} adminRedemptionUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRedemptionStatus: async (id, adminRedemptionUpdateRequest, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRedemptionStatus', 'id', id);
            // verify required parameter 'adminRedemptionUpdateRequest' is not null or undefined
            assertParamExists('updateRedemptionStatus', 'adminRedemptionUpdateRequest', adminRedemptionUpdateRequest);
            const localVarPath = `/admin/redemptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(adminRedemptionUpdateRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * RedemptionsApi - functional programming interface
 * @export
 */
export const RedemptionsApiFp = function (configuration) {
    const localVarAxiosParamCreator = RedemptionsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get a list of all redemptions.
         * @summary Get all redemptions
         * @param {GetAllRedemptionsStateEnum} [state] Cursor for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRedemptions(state, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRedemptions(state, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RedemptionsApi.getAllRedemptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the details of a redemption.
         * @summary Get redemption
         * @param {number} id Redemption ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRedemptionDetails(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRedemptionDetails(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RedemptionsApi.getRedemptionDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Redeem zar
         * @summary Redeem zar
         * @param {RedemptionRequest} redemptionRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redeemZar(redemptionRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redeemZar(redemptionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RedemptionsApi.redeemZar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the status of a redemption.
         * @summary Update redemption
         * @param {string} id Redemption ID
         * @param {AdminRedemptionUpdateRequest} adminRedemptionUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRedemptionStatus(id, adminRedemptionUpdateRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRedemptionStatus(id, adminRedemptionUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RedemptionsApi.updateRedemptionStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
/**
 * RedemptionsApi - factory interface
 * @export
 */
export const RedemptionsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = RedemptionsApiFp(configuration);
    return {
        /**
         * Get a list of all redemptions.
         * @summary Get all redemptions
         * @param {GetAllRedemptionsStateEnum} [state] Cursor for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRedemptions(state, options) {
            return localVarFp.getAllRedemptions(state, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the details of a redemption.
         * @summary Get redemption
         * @param {number} id Redemption ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRedemptionDetails(id, options) {
            return localVarFp.getRedemptionDetails(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Redeem zar
         * @summary Redeem zar
         * @param {RedemptionRequest} redemptionRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemZar(redemptionRequest, options) {
            return localVarFp.redeemZar(redemptionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the status of a redemption.
         * @summary Update redemption
         * @param {string} id Redemption ID
         * @param {AdminRedemptionUpdateRequest} adminRedemptionUpdateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRedemptionStatus(id, adminRedemptionUpdateRequest, options) {
            return localVarFp.updateRedemptionStatus(id, adminRedemptionUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * RedemptionsApi - object-oriented interface
 * @export
 * @class RedemptionsApi
 * @extends {BaseAPI}
 */
export class RedemptionsApi extends BaseAPI {
    /**
     * Get a list of all redemptions.
     * @summary Get all redemptions
     * @param {GetAllRedemptionsStateEnum} [state] Cursor for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedemptionsApi
     */
    getAllRedemptions(state, options) {
        return RedemptionsApiFp(this.configuration).getAllRedemptions(state, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the details of a redemption.
     * @summary Get redemption
     * @param {number} id Redemption ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedemptionsApi
     */
    getRedemptionDetails(id, options) {
        return RedemptionsApiFp(this.configuration).getRedemptionDetails(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Redeem zar
     * @summary Redeem zar
     * @param {RedemptionRequest} redemptionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedemptionsApi
     */
    redeemZar(redemptionRequest, options) {
        return RedemptionsApiFp(this.configuration).redeemZar(redemptionRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update the status of a redemption.
     * @summary Update redemption
     * @param {string} id Redemption ID
     * @param {AdminRedemptionUpdateRequest} adminRedemptionUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RedemptionsApi
     */
    updateRedemptionStatus(id, adminRedemptionUpdateRequest, options) {
        return RedemptionsApiFp(this.configuration).updateRedemptionStatus(id, adminRedemptionUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * @export
 */
export const GetAllRedemptionsStateEnum = {
    PENDING: 'pending',
    APPROVED: 'approved',
    COMPLETED: 'completed',
    REJECTED: 'rejected'
};
//# sourceMappingURL=redemptions-api.js.map