/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from '../base';
/**
 * CoinsApi - axios parameter creator
 * @export
 */
export const CoinsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get the details of a coin.
         * @summary Get coin
         * @param {Symbol} symbol Coin symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoinDetails: async (symbol, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('getCoinDetails', 'symbol', symbol);
            const localVarPath = `/coins/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of supported coins.
         * @summary Get coins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportedCoins: async (options = {}) => {
            const localVarPath = `/coins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CoinsApi - functional programming interface
 * @export
 */
export const CoinsApiFp = function (configuration) {
    const localVarAxiosParamCreator = CoinsApiAxiosParamCreator(configuration);
    return {
        /**
         * Get the details of a coin.
         * @summary Get coin
         * @param {Symbol} symbol Coin symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCoinDetails(symbol, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCoinDetails(symbol, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoinsApi.getCoinDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the list of supported coins.
         * @summary Get coins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSupportedCoins(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSupportedCoins(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CoinsApi.getSupportedCoins']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
/**
 * CoinsApi - factory interface
 * @export
 */
export const CoinsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = CoinsApiFp(configuration);
    return {
        /**
         * Get the details of a coin.
         * @summary Get coin
         * @param {Symbol} symbol Coin symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoinDetails(symbol, options) {
            return localVarFp.getCoinDetails(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of supported coins.
         * @summary Get coins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportedCoins(options) {
            return localVarFp.getSupportedCoins(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CoinsApi - object-oriented interface
 * @export
 * @class CoinsApi
 * @extends {BaseAPI}
 */
export class CoinsApi extends BaseAPI {
    /**
     * Get the details of a coin.
     * @summary Get coin
     * @param {Symbol} symbol Coin symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApi
     */
    getCoinDetails(symbol, options) {
        return CoinsApiFp(this.configuration).getCoinDetails(symbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the list of supported coins.
     * @summary Get coins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApi
     */
    getSupportedCoins(options) {
        return CoinsApiFp(this.configuration).getSupportedCoins(options).then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=coins-api.js.map