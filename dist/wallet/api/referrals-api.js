"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReferralsApi = exports.ReferralsApiFactory = exports.ReferralsApiFp = exports.ReferralsApiAxiosParamCreator = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
// URLSearchParams not necessarily used
// @ts-ignore
const url_1 = require("url");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ReferralsApi - axios parameter creator
 * @export
 */
const ReferralsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get a referral by its ID.
         * @summary Get referral by ID
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralById: async (referralId, options = {}) => {
            // verify required parameter 'referralId' is not null or undefined
            (0, common_1.assertParamExists)('getReferralById', 'referralId', referralId);
            const localVarPath = `/referrals/{referralId}`
                .replace(`{${"referralId"}}`, encodeURIComponent(String(referralId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get referrals by user ID or name.
         * @summary Get referrals
         * @param {string} [name] Referral name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferrals: async (name, options = {}) => {
            const localVarPath = `/referrals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Redeem a referral for a user.
         * @summary Redeem a referral
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemReferral: async (referralId, options = {}) => {
            // verify required parameter 'referralId' is not null or undefined
            (0, common_1.assertParamExists)('redeemReferral', 'referralId', referralId);
            const localVarPath = `/referrals/{referralId}/redeem`
                .replace(`{${"referralId"}}`, encodeURIComponent(String(referralId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validate a referral to check if it can be redeemed.
         * @summary Validate a referral
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateReferral: async (referralId, options = {}) => {
            // verify required parameter 'referralId' is not null or undefined
            (0, common_1.assertParamExists)('validateReferral', 'referralId', referralId);
            const localVarPath = `/referrals/{referralId}/validate`
                .replace(`{${"referralId"}}`, encodeURIComponent(String(referralId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ReferralsApiAxiosParamCreator = ReferralsApiAxiosParamCreator;
/**
 * ReferralsApi - functional programming interface
 * @export
 */
const ReferralsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ReferralsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get a referral by its ID.
         * @summary Get referral by ID
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReferralById(referralId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReferralById(referralId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ReferralsApi.getReferralById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get referrals by user ID or name.
         * @summary Get referrals
         * @param {string} [name] Referral name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReferrals(name, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReferrals(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ReferralsApi.getReferrals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Redeem a referral for a user.
         * @summary Redeem a referral
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redeemReferral(referralId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redeemReferral(referralId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ReferralsApi.redeemReferral']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Validate a referral to check if it can be redeemed.
         * @summary Validate a referral
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateReferral(referralId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateReferral(referralId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ReferralsApi.validateReferral']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.ReferralsApiFp = ReferralsApiFp;
/**
 * ReferralsApi - factory interface
 * @export
 */
const ReferralsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ReferralsApiFp)(configuration);
    return {
        /**
         * Get a referral by its ID.
         * @summary Get referral by ID
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferralById(referralId, options) {
            return localVarFp.getReferralById(referralId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get referrals by user ID or name.
         * @summary Get referrals
         * @param {string} [name] Referral name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReferrals(name, options) {
            return localVarFp.getReferrals(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Redeem a referral for a user.
         * @summary Redeem a referral
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemReferral(referralId, options) {
            return localVarFp.redeemReferral(referralId, options).then((request) => request(axios, basePath));
        },
        /**
         * Validate a referral to check if it can be redeemed.
         * @summary Validate a referral
         * @param {number} referralId Referral ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateReferral(referralId, options) {
            return localVarFp.validateReferral(referralId, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ReferralsApiFactory = ReferralsApiFactory;
/**
 * ReferralsApi - object-oriented interface
 * @export
 * @class ReferralsApi
 * @extends {BaseAPI}
 */
class ReferralsApi extends base_1.BaseAPI {
    /**
     * Get a referral by its ID.
     * @summary Get referral by ID
     * @param {number} referralId Referral ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    getReferralById(referralId, options) {
        return (0, exports.ReferralsApiFp)(this.configuration).getReferralById(referralId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get referrals by user ID or name.
     * @summary Get referrals
     * @param {string} [name] Referral name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    getReferrals(name, options) {
        return (0, exports.ReferralsApiFp)(this.configuration).getReferrals(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Redeem a referral for a user.
     * @summary Redeem a referral
     * @param {number} referralId Referral ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    redeemReferral(referralId, options) {
        return (0, exports.ReferralsApiFp)(this.configuration).redeemReferral(referralId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Validate a referral to check if it can be redeemed.
     * @summary Validate a referral
     * @param {number} referralId Referral ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    validateReferral(referralId, options) {
        return (0, exports.ReferralsApiFp)(this.configuration).validateReferral(referralId, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ReferralsApi = ReferralsApi;
//# sourceMappingURL=referrals-api.js.map