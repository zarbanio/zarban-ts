/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { Coin } from '../model';
import type { CoinResponse } from '../model';
import type { Symbol } from '../model';
/**
 * CoinsApi - axios parameter creator
 * @export
 */
export declare const CoinsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get the details of a coin.
     * @summary Get coin
     * @param {Symbol} symbol Coin symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCoinDetails: (symbol: Symbol, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the list of supported coins.
     * @summary Get coins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSupportedCoins: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CoinsApi - functional programming interface
 * @export
 */
export declare const CoinsApiFp: (configuration?: Configuration) => {
    /**
     * Get the details of a coin.
     * @summary Get coin
     * @param {Symbol} symbol Coin symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCoinDetails(symbol: Symbol, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Coin>>;
    /**
     * Get the list of supported coins.
     * @summary Get coins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSupportedCoins(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoinResponse>>;
};
/**
 * CoinsApi - factory interface
 * @export
 */
export declare const CoinsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get the details of a coin.
     * @summary Get coin
     * @param {Symbol} symbol Coin symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCoinDetails(symbol: Symbol, options?: RawAxiosRequestConfig): AxiosPromise<Coin>;
    /**
     * Get the list of supported coins.
     * @summary Get coins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSupportedCoins(options?: RawAxiosRequestConfig): AxiosPromise<CoinResponse>;
};
/**
 * CoinsApi - interface
 * @export
 * @interface CoinsApi
 */
export interface CoinsApiInterface {
    /**
     * Get the details of a coin.
     * @summary Get coin
     * @param {Symbol} symbol Coin symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApiInterface
     */
    getCoinDetails(symbol: Symbol, options?: RawAxiosRequestConfig): AxiosPromise<Coin>;
    /**
     * Get the list of supported coins.
     * @summary Get coins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApiInterface
     */
    getSupportedCoins(options?: RawAxiosRequestConfig): AxiosPromise<CoinResponse>;
}
/**
 * CoinsApi - object-oriented interface
 * @export
 * @class CoinsApi
 * @extends {BaseAPI}
 */
export declare class CoinsApi extends BaseAPI implements CoinsApiInterface {
    /**
     * Get the details of a coin.
     * @summary Get coin
     * @param {Symbol} symbol Coin symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApi
     */
    getCoinDetails(symbol: Symbol, options?: RawAxiosRequestConfig): Promise<globalAxios.AxiosResponse<Coin, any>>;
    /**
     * Get the list of supported coins.
     * @summary Get coins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoinsApi
     */
    getSupportedCoins(options?: RawAxiosRequestConfig): Promise<globalAxios.AxiosResponse<CoinResponse, any>>;
}
//# sourceMappingURL=coins-api.d.ts.map