"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserApi = exports.UserApiFactory = exports.UserApiFp = exports.UserApiAxiosParamCreator = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
// URLSearchParams not necessarily used
// @ts-ignore
const url_1 = require("url");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * UserApi - axios parameter creator
 * @export
 */
const UserApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Confirm KYC for the user.
         * @summary Confirm KYC
         * @param {KycConfirmRequest} kycConfirmRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmKyc: (kycConfirmRequest_1, ...args_1) => tslib_1.__awaiter(this, [kycConfirmRequest_1, ...args_1], void 0, function* (kycConfirmRequest, options = {}) {
            // verify required parameter 'kycConfirmRequest' is not null or undefined
            (0, common_1.assertParamExists)('confirmKyc', 'kycConfirmRequest', kycConfirmRequest);
            const localVarPath = `/users/kyc/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(kycConfirmRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Confirm the phone number of the user.
         * @summary Confirm phone number
         * @param {PhoneOtpSubmitRequest} phoneOtpSubmitRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPhoneNumber: (phoneOtpSubmitRequest_1, ...args_1) => tslib_1.__awaiter(this, [phoneOtpSubmitRequest_1, ...args_1], void 0, function* (phoneOtpSubmitRequest, options = {}) {
            // verify required parameter 'phoneOtpSubmitRequest' is not null or undefined
            (0, common_1.assertParamExists)('confirmPhoneNumber', 'phoneOtpSubmitRequest', phoneOtpSubmitRequest);
            const localVarPath = `/users/phone/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(phoneOtpSubmitRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * create a child user
         * @summary create a child user
         * @param {CreateChildUserRequest} createChildUserRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildUser: (createChildUserRequest_1, ...args_1) => tslib_1.__awaiter(this, [createChildUserRequest_1, ...args_1], void 0, function* (createChildUserRequest, options = {}) {
            // verify required parameter 'createChildUserRequest' is not null or undefined
            (0, common_1.assertParamExists)('createChildUser', 'createChildUserRequest', createChildUserRequest);
            const localVarPath = `/users/children`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createChildUserRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get the profile of the user.
         * @summary Get profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile: (...args_1) => tslib_1.__awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Submit email confirmation OTP for the user.
         * @summary Submit email confirmation OTP
         * @param {EmailOtpSubmitRequest} emailOtpSubmitRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitEmailConfirmationOtp: (emailOtpSubmitRequest_1, ...args_1) => tslib_1.__awaiter(this, [emailOtpSubmitRequest_1, ...args_1], void 0, function* (emailOtpSubmitRequest, options = {}) {
            // verify required parameter 'emailOtpSubmitRequest' is not null or undefined
            (0, common_1.assertParamExists)('submitEmailConfirmationOtp', 'emailOtpSubmitRequest', emailOtpSubmitRequest);
            const localVarPath = `/users/email/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(emailOtpSubmitRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Submit KYC for the user.
         * @summary Submit KYC
         * @param {KycRequest} kycRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitKyc: (kycRequest_1, ...args_1) => tslib_1.__awaiter(this, [kycRequest_1, ...args_1], void 0, function* (kycRequest, options = {}) {
            // verify required parameter 'kycRequest' is not null or undefined
            (0, common_1.assertParamExists)('submitKyc', 'kycRequest', kycRequest);
            const localVarPath = `/users/kyc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(kycRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Verify the phone number of the user.
         * @summary Verify phone number
         * @param {UpdatePhoneRequest} updatePhoneRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyPhoneNumber: (updatePhoneRequest_1, ...args_1) => tslib_1.__awaiter(this, [updatePhoneRequest_1, ...args_1], void 0, function* (updatePhoneRequest, options = {}) {
            // verify required parameter 'updatePhoneRequest' is not null or undefined
            (0, common_1.assertParamExists)('verifyPhoneNumber', 'updatePhoneRequest', updatePhoneRequest);
            const localVarPath = `/users/phone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updatePhoneRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Verify the email of the user.
         * @summary Verify email
         * @param {UpdateEmailRequest} updateEmailRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserEmailAddress: (updateEmailRequest_1, ...args_1) => tslib_1.__awaiter(this, [updateEmailRequest_1, ...args_1], void 0, function* (updateEmailRequest, options = {}) {
            // verify required parameter 'updateEmailRequest' is not null or undefined
            (0, common_1.assertParamExists)('verifyUserEmailAddress', 'updateEmailRequest', updateEmailRequest);
            const localVarPath = `/users/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(updateEmailRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.UserApiAxiosParamCreator = UserApiAxiosParamCreator;
/**
 * UserApi - functional programming interface
 * @export
 */
const UserApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.UserApiAxiosParamCreator)(configuration);
    return {
        /**
         * Confirm KYC for the user.
         * @summary Confirm KYC
         * @param {KycConfirmRequest} kycConfirmRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmKyc(kycConfirmRequest, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.confirmKyc(kycConfirmRequest, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserApi.confirmKyc']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Confirm the phone number of the user.
         * @summary Confirm phone number
         * @param {PhoneOtpSubmitRequest} phoneOtpSubmitRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPhoneNumber(phoneOtpSubmitRequest, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.confirmPhoneNumber(phoneOtpSubmitRequest, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserApi.confirmPhoneNumber']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * create a child user
         * @summary create a child user
         * @param {CreateChildUserRequest} createChildUserRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildUser(createChildUserRequest, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createChildUser(createChildUserRequest, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserApi.createChildUser']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get the profile of the user.
         * @summary Get profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile(options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserProfile(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserApi.getUserProfile']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Submit email confirmation OTP for the user.
         * @summary Submit email confirmation OTP
         * @param {EmailOtpSubmitRequest} emailOtpSubmitRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitEmailConfirmationOtp(emailOtpSubmitRequest, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.submitEmailConfirmationOtp(emailOtpSubmitRequest, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserApi.submitEmailConfirmationOtp']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Submit KYC for the user.
         * @summary Submit KYC
         * @param {KycRequest} kycRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitKyc(kycRequest, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.submitKyc(kycRequest, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserApi.submitKyc']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Verify the phone number of the user.
         * @summary Verify phone number
         * @param {UpdatePhoneRequest} updatePhoneRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyPhoneNumber(updatePhoneRequest, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.verifyPhoneNumber(updatePhoneRequest, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserApi.verifyPhoneNumber']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Verify the email of the user.
         * @summary Verify email
         * @param {UpdateEmailRequest} updateEmailRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserEmailAddress(updateEmailRequest, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.verifyUserEmailAddress(updateEmailRequest, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserApi.verifyUserEmailAddress']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.UserApiFp = UserApiFp;
/**
 * UserApi - factory interface
 * @export
 */
const UserApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.UserApiFp)(configuration);
    return {
        /**
         * Confirm KYC for the user.
         * @summary Confirm KYC
         * @param {KycConfirmRequest} kycConfirmRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmKyc(kycConfirmRequest, options) {
            return localVarFp.confirmKyc(kycConfirmRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirm the phone number of the user.
         * @summary Confirm phone number
         * @param {PhoneOtpSubmitRequest} phoneOtpSubmitRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPhoneNumber(phoneOtpSubmitRequest, options) {
            return localVarFp.confirmPhoneNumber(phoneOtpSubmitRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * create a child user
         * @summary create a child user
         * @param {CreateChildUserRequest} createChildUserRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildUser(createChildUserRequest, options) {
            return localVarFp.createChildUser(createChildUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the profile of the user.
         * @summary Get profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfile(options) {
            return localVarFp.getUserProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * Submit email confirmation OTP for the user.
         * @summary Submit email confirmation OTP
         * @param {EmailOtpSubmitRequest} emailOtpSubmitRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitEmailConfirmationOtp(emailOtpSubmitRequest, options) {
            return localVarFp.submitEmailConfirmationOtp(emailOtpSubmitRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Submit KYC for the user.
         * @summary Submit KYC
         * @param {KycRequest} kycRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitKyc(kycRequest, options) {
            return localVarFp.submitKyc(kycRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify the phone number of the user.
         * @summary Verify phone number
         * @param {UpdatePhoneRequest} updatePhoneRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyPhoneNumber(updatePhoneRequest, options) {
            return localVarFp.verifyPhoneNumber(updatePhoneRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify the email of the user.
         * @summary Verify email
         * @param {UpdateEmailRequest} updateEmailRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserEmailAddress(updateEmailRequest, options) {
            return localVarFp.verifyUserEmailAddress(updateEmailRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.UserApiFactory = UserApiFactory;
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
class UserApi extends base_1.BaseAPI {
    /**
     * Confirm KYC for the user.
     * @summary Confirm KYC
     * @param {KycConfirmRequest} kycConfirmRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    confirmKyc(kycConfirmRequest, options) {
        return (0, exports.UserApiFp)(this.configuration).confirmKyc(kycConfirmRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Confirm the phone number of the user.
     * @summary Confirm phone number
     * @param {PhoneOtpSubmitRequest} phoneOtpSubmitRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    confirmPhoneNumber(phoneOtpSubmitRequest, options) {
        return (0, exports.UserApiFp)(this.configuration).confirmPhoneNumber(phoneOtpSubmitRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * create a child user
     * @summary create a child user
     * @param {CreateChildUserRequest} createChildUserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    createChildUser(createChildUserRequest, options) {
        return (0, exports.UserApiFp)(this.configuration).createChildUser(createChildUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the profile of the user.
     * @summary Get profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserProfile(options) {
        return (0, exports.UserApiFp)(this.configuration).getUserProfile(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Submit email confirmation OTP for the user.
     * @summary Submit email confirmation OTP
     * @param {EmailOtpSubmitRequest} emailOtpSubmitRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    submitEmailConfirmationOtp(emailOtpSubmitRequest, options) {
        return (0, exports.UserApiFp)(this.configuration).submitEmailConfirmationOtp(emailOtpSubmitRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Submit KYC for the user.
     * @summary Submit KYC
     * @param {KycRequest} kycRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    submitKyc(kycRequest, options) {
        return (0, exports.UserApiFp)(this.configuration).submitKyc(kycRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Verify the phone number of the user.
     * @summary Verify phone number
     * @param {UpdatePhoneRequest} updatePhoneRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    verifyPhoneNumber(updatePhoneRequest, options) {
        return (0, exports.UserApiFp)(this.configuration).verifyPhoneNumber(updatePhoneRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Verify the email of the user.
     * @summary Verify email
     * @param {UpdateEmailRequest} updateEmailRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    verifyUserEmailAddress(updateEmailRequest, options) {
        return (0, exports.UserApiFp)(this.configuration).verifyUserEmailAddress(updateEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.UserApi = UserApi;
//# sourceMappingURL=user-api.js.map