/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from '../base';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Authenticate with Telegram and get a JWT token.
         * @summary Authenticate with Telegram
         * @param {AuthTelegramRequest} authTelegramRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateWithTelegram: async (authTelegramRequest, options = {}) => {
            // verify required parameter 'authTelegramRequest' is not null or undefined
            assertParamExists('authenticateWithTelegram', 'authTelegramRequest', authTelegramRequest);
            const localVarPath = `/auth/telegram`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(authTelegramRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a JWT token.
         * @summary Generate a JWT token
         * @param {GenerateJwtTokenDurationEnum} duration Token duration in days
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateJwtToken: async (duration, options = {}) => {
            // verify required parameter 'duration' is not null or undefined
            assertParamExists('generateJwtToken', 'duration', duration);
            const localVarPath = `/auth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get OTP for the user.
         * @summary Get OTP
         * @param {GetOtpChannelEnum} channel Channel to send OTP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOtp: async (channel, options = {}) => {
            // verify required parameter 'channel' is not null or undefined
            assertParamExists('getOtp', 'channel', channel);
            const localVarPath = `/auth/otp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login with email and password and get a JWT token.
         * @summary Login with email and password
         * @param {LoginRequest} loginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithEmailAndPassword: async (loginRequest, options = {}) => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('loginWithEmailAndPassword', 'loginRequest', loginRequest);
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * signup with email and password and get a JWT token.
         * @summary signup with email and password
         * @param {SignUpRequest} signUpRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupWithEmailAndPassword: async (signUpRequest, options = {}) => {
            // verify required parameter 'signUpRequest' is not null or undefined
            assertParamExists('signupWithEmailAndPassword', 'signUpRequest', signUpRequest);
            const localVarPath = `/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(signUpRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify the email of the user.
         * @summary Verify email
         * @param {string} token Verification token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserEmail: async (token, options = {}) => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('verifyUserEmail', 'token', token);
            const localVarPath = `/verify-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration);
    return {
        /**
         * Authenticate with Telegram and get a JWT token.
         * @summary Authenticate with Telegram
         * @param {AuthTelegramRequest} authTelegramRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticateWithTelegram(authTelegramRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticateWithTelegram(authTelegramRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authenticateWithTelegram']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate a JWT token.
         * @summary Generate a JWT token
         * @param {GenerateJwtTokenDurationEnum} duration Token duration in days
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateJwtToken(duration, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateJwtToken(duration, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.generateJwtToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get OTP for the user.
         * @summary Get OTP
         * @param {GetOtpChannelEnum} channel Channel to send OTP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOtp(channel, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOtp(channel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.getOtp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Login with email and password and get a JWT token.
         * @summary Login with email and password
         * @param {LoginRequest} loginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginWithEmailAndPassword(loginRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginWithEmailAndPassword(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.loginWithEmailAndPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * signup with email and password and get a JWT token.
         * @summary signup with email and password
         * @param {SignUpRequest} signUpRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signupWithEmailAndPassword(signUpRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signupWithEmailAndPassword(signUpRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.signupWithEmailAndPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Verify the email of the user.
         * @summary Verify email
         * @param {string} token Verification token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyUserEmail(token, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyUserEmail(token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.verifyUserEmail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration, basePath, axios) {
    const localVarFp = AuthApiFp(configuration);
    return {
        /**
         * Authenticate with Telegram and get a JWT token.
         * @summary Authenticate with Telegram
         * @param {AuthTelegramRequest} authTelegramRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateWithTelegram(authTelegramRequest, options) {
            return localVarFp.authenticateWithTelegram(authTelegramRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a JWT token.
         * @summary Generate a JWT token
         * @param {GenerateJwtTokenDurationEnum} duration Token duration in days
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateJwtToken(duration, options) {
            return localVarFp.generateJwtToken(duration, options).then((request) => request(axios, basePath));
        },
        /**
         * Get OTP for the user.
         * @summary Get OTP
         * @param {GetOtpChannelEnum} channel Channel to send OTP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOtp(channel, options) {
            return localVarFp.getOtp(channel, options).then((request) => request(axios, basePath));
        },
        /**
         * Login with email and password and get a JWT token.
         * @summary Login with email and password
         * @param {LoginRequest} loginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithEmailAndPassword(loginRequest, options) {
            return localVarFp.loginWithEmailAndPassword(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * signup with email and password and get a JWT token.
         * @summary signup with email and password
         * @param {SignUpRequest} signUpRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupWithEmailAndPassword(signUpRequest, options) {
            return localVarFp.signupWithEmailAndPassword(signUpRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify the email of the user.
         * @summary Verify email
         * @param {string} token Verification token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyUserEmail(token, options) {
            return localVarFp.verifyUserEmail(token, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Authenticate with Telegram and get a JWT token.
     * @summary Authenticate with Telegram
     * @param {AuthTelegramRequest} authTelegramRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authenticateWithTelegram(authTelegramRequest, options) {
        return AuthApiFp(this.configuration).authenticateWithTelegram(authTelegramRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Generate a JWT token.
     * @summary Generate a JWT token
     * @param {GenerateJwtTokenDurationEnum} duration Token duration in days
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    generateJwtToken(duration, options) {
        return AuthApiFp(this.configuration).generateJwtToken(duration, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get OTP for the user.
     * @summary Get OTP
     * @param {GetOtpChannelEnum} channel Channel to send OTP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    getOtp(channel, options) {
        return AuthApiFp(this.configuration).getOtp(channel, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Login with email and password and get a JWT token.
     * @summary Login with email and password
     * @param {LoginRequest} loginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    loginWithEmailAndPassword(loginRequest, options) {
        return AuthApiFp(this.configuration).loginWithEmailAndPassword(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * signup with email and password and get a JWT token.
     * @summary signup with email and password
     * @param {SignUpRequest} signUpRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    signupWithEmailAndPassword(signUpRequest, options) {
        return AuthApiFp(this.configuration).signupWithEmailAndPassword(signUpRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Verify the email of the user.
     * @summary Verify email
     * @param {string} token Verification token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    verifyUserEmail(token, options) {
        return AuthApiFp(this.configuration).verifyUserEmail(token, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * @export
 */
export const GenerateJwtTokenDurationEnum = {
    NUMBER_7: 7,
    NUMBER_15: 15,
    NUMBER_30: 30,
    NUMBER_90: 90
};
/**
 * @export
 */
export const GetOtpChannelEnum = {
    PHONE: 'phone'
};
//# sourceMappingURL=auth-api.js.map