"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BalanceApi = exports.BalanceApiFactory = exports.BalanceApiFp = exports.BalanceApiAxiosParamCreator = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
// URLSearchParams not necessarily used
// @ts-ignore
const url_1 = require("url");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * BalanceApi - axios parameter creator
 * @export
 */
const BalanceApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get the balance by a symbol.
         * @summary Get balance
         * @param {Symbol} symbol Coin symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalanceBySymbol: async (symbol, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('getBalanceBySymbol', 'symbol', symbol);
            const localVarPath = `/balance/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the balance of the wallet.
         * @summary Get wallet balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWalletBalance: async (options = {}) => {
            const localVarPath = `/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.BalanceApiAxiosParamCreator = BalanceApiAxiosParamCreator;
/**
 * BalanceApi - functional programming interface
 * @export
 */
const BalanceApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.BalanceApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get the balance by a symbol.
         * @summary Get balance
         * @param {Symbol} symbol Coin symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBalanceBySymbol(symbol, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBalanceBySymbol(symbol, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['BalanceApi.getBalanceBySymbol']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the balance of the wallet.
         * @summary Get wallet balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWalletBalance(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWalletBalance(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['BalanceApi.getWalletBalance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.BalanceApiFp = BalanceApiFp;
/**
 * BalanceApi - factory interface
 * @export
 */
const BalanceApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.BalanceApiFp)(configuration);
    return {
        /**
         * Get the balance by a symbol.
         * @summary Get balance
         * @param {Symbol} symbol Coin symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBalanceBySymbol(symbol, options) {
            return localVarFp.getBalanceBySymbol(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the balance of the wallet.
         * @summary Get wallet balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWalletBalance(options) {
            return localVarFp.getWalletBalance(options).then((request) => request(axios, basePath));
        },
    };
};
exports.BalanceApiFactory = BalanceApiFactory;
/**
 * BalanceApi - object-oriented interface
 * @export
 * @class BalanceApi
 * @extends {BaseAPI}
 */
class BalanceApi extends base_1.BaseAPI {
    /**
     * Get the balance by a symbol.
     * @summary Get balance
     * @param {Symbol} symbol Coin symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BalanceApi
     */
    getBalanceBySymbol(symbol, options) {
        return (0, exports.BalanceApiFp)(this.configuration).getBalanceBySymbol(symbol, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the balance of the wallet.
     * @summary Get wallet balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BalanceApi
     */
    getWalletBalance(options) {
        return (0, exports.BalanceApiFp)(this.configuration).getWalletBalance(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.BalanceApi = BalanceApi;
//# sourceMappingURL=balance-api.js.map