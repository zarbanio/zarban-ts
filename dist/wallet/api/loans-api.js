/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from '../base';
/**
 * LoansApi - axios parameter creator
 * @export
 */
export const LoansApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a vault
         * @summary Create vault
         * @param {LoanCreateRequest} loanCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoanVault: async (loanCreateRequest, options = {}) => {
            // verify required parameter 'loanCreateRequest' is not null or undefined
            assertParamExists('createLoanVault', 'loanCreateRequest', loanCreateRequest);
            const localVarPath = `/loans/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(loanCreateRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an estimate of required collateral for a specific loan amount, and vice versa.
         * @summary Get collateral and loan amount estimation
         * @param {string} planName The name of the loan plan
         * @param {LoanToValueOptions} loanToValueOption The desired loan to value option
         * @param {string} amount Loan/Collateral amount
         * @param {EstimateLoanCollateralInputTypeEnum} inputType The type of the input amount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        estimateLoanCollateral: async (planName, loanToValueOption, amount, inputType, options = {}) => {
            // verify required parameter 'planName' is not null or undefined
            assertParamExists('estimateLoanCollateral', 'planName', planName);
            // verify required parameter 'loanToValueOption' is not null or undefined
            assertParamExists('estimateLoanCollateral', 'loanToValueOption', loanToValueOption);
            // verify required parameter 'amount' is not null or undefined
            assertParamExists('estimateLoanCollateral', 'amount', amount);
            // verify required parameter 'inputType' is not null or undefined
            assertParamExists('estimateLoanCollateral', 'inputType', inputType);
            const localVarPath = `/loans/estimate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (planName !== undefined) {
                localVarQueryParameter['planName'] = planName;
            }
            if (loanToValueOption !== undefined) {
                localVarQueryParameter['loanToValueOption'] = loanToValueOption;
            }
            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }
            if (inputType !== undefined) {
                localVarQueryParameter['inputType'] = inputType;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the available plan loans.
         * @summary Get all plan loans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLoanPlans: async (options = {}) => {
            const localVarPath = `/loans/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the details of a loan.
         * @summary Get loan
         * @param {string} id Loan ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanDetails: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getLoanDetails', 'id', id);
            const localVarPath = `/loans/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the user\'s loans.
         * @summary Get user loans
         * @param {GetUserLoansStateEnum} [state] loan state
         * @param {string} [planName] loan plan name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserLoans: async (state, planName, options = {}) => {
            const localVarPath = `/loans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }
            if (planName !== undefined) {
                localVarQueryParameter['planName'] = planName;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Repay a loan totally
         * @summary Repay Loan
         * @param {RepayLoanRequest} repayLoanRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repayLoan: async (repayLoanRequest, options = {}) => {
            // verify required parameter 'repayLoanRequest' is not null or undefined
            assertParamExists('repayLoan', 'repayLoanRequest', repayLoanRequest);
            const localVarPath = `/loans/repay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(repayLoanRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * LoansApi - functional programming interface
 * @export
 */
export const LoansApiFp = function (configuration) {
    const localVarAxiosParamCreator = LoansApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a vault
         * @summary Create vault
         * @param {LoanCreateRequest} loanCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLoanVault(loanCreateRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLoanVault(loanCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoansApi.createLoanVault']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get an estimate of required collateral for a specific loan amount, and vice versa.
         * @summary Get collateral and loan amount estimation
         * @param {string} planName The name of the loan plan
         * @param {LoanToValueOptions} loanToValueOption The desired loan to value option
         * @param {string} amount Loan/Collateral amount
         * @param {EstimateLoanCollateralInputTypeEnum} inputType The type of the input amount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async estimateLoanCollateral(planName, loanToValueOption, amount, inputType, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.estimateLoanCollateral(planName, loanToValueOption, amount, inputType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoansApi.estimateLoanCollateral']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of the available plan loans.
         * @summary Get all plan loans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllLoanPlans(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllLoanPlans(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoansApi.getAllLoanPlans']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the details of a loan.
         * @summary Get loan
         * @param {string} id Loan ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoanDetails(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLoanDetails(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoansApi.getLoanDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of the user\'s loans.
         * @summary Get user loans
         * @param {GetUserLoansStateEnum} [state] loan state
         * @param {string} [planName] loan plan name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserLoans(state, planName, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserLoans(state, planName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoansApi.getUserLoans']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Repay a loan totally
         * @summary Repay Loan
         * @param {RepayLoanRequest} repayLoanRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repayLoan(repayLoanRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.repayLoan(repayLoanRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoansApi.repayLoan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
/**
 * LoansApi - factory interface
 * @export
 */
export const LoansApiFactory = function (configuration, basePath, axios) {
    const localVarFp = LoansApiFp(configuration);
    return {
        /**
         * Create a vault
         * @summary Create vault
         * @param {LoanCreateRequest} loanCreateRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLoanVault(loanCreateRequest, options) {
            return localVarFp.createLoanVault(loanCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an estimate of required collateral for a specific loan amount, and vice versa.
         * @summary Get collateral and loan amount estimation
         * @param {string} planName The name of the loan plan
         * @param {LoanToValueOptions} loanToValueOption The desired loan to value option
         * @param {string} amount Loan/Collateral amount
         * @param {EstimateLoanCollateralInputTypeEnum} inputType The type of the input amount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        estimateLoanCollateral(planName, loanToValueOption, amount, inputType, options) {
            return localVarFp.estimateLoanCollateral(planName, loanToValueOption, amount, inputType, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the available plan loans.
         * @summary Get all plan loans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLoanPlans(options) {
            return localVarFp.getAllLoanPlans(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the details of a loan.
         * @summary Get loan
         * @param {string} id Loan ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoanDetails(id, options) {
            return localVarFp.getLoanDetails(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the user\'s loans.
         * @summary Get user loans
         * @param {GetUserLoansStateEnum} [state] loan state
         * @param {string} [planName] loan plan name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserLoans(state, planName, options) {
            return localVarFp.getUserLoans(state, planName, options).then((request) => request(axios, basePath));
        },
        /**
         * Repay a loan totally
         * @summary Repay Loan
         * @param {RepayLoanRequest} repayLoanRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repayLoan(repayLoanRequest, options) {
            return localVarFp.repayLoan(repayLoanRequest, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * LoansApi - object-oriented interface
 * @export
 * @class LoansApi
 * @extends {BaseAPI}
 */
export class LoansApi extends BaseAPI {
    /**
     * Create a vault
     * @summary Create vault
     * @param {LoanCreateRequest} loanCreateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoansApi
     */
    createLoanVault(loanCreateRequest, options) {
        return LoansApiFp(this.configuration).createLoanVault(loanCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an estimate of required collateral for a specific loan amount, and vice versa.
     * @summary Get collateral and loan amount estimation
     * @param {string} planName The name of the loan plan
     * @param {LoanToValueOptions} loanToValueOption The desired loan to value option
     * @param {string} amount Loan/Collateral amount
     * @param {EstimateLoanCollateralInputTypeEnum} inputType The type of the input amount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoansApi
     */
    estimateLoanCollateral(planName, loanToValueOption, amount, inputType, options) {
        return LoansApiFp(this.configuration).estimateLoanCollateral(planName, loanToValueOption, amount, inputType, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of the available plan loans.
     * @summary Get all plan loans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoansApi
     */
    getAllLoanPlans(options) {
        return LoansApiFp(this.configuration).getAllLoanPlans(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the details of a loan.
     * @summary Get loan
     * @param {string} id Loan ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoansApi
     */
    getLoanDetails(id, options) {
        return LoansApiFp(this.configuration).getLoanDetails(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of the user\'s loans.
     * @summary Get user loans
     * @param {GetUserLoansStateEnum} [state] loan state
     * @param {string} [planName] loan plan name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoansApi
     */
    getUserLoans(state, planName, options) {
        return LoansApiFp(this.configuration).getUserLoans(state, planName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Repay a loan totally
     * @summary Repay Loan
     * @param {RepayLoanRequest} repayLoanRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoansApi
     */
    repayLoan(repayLoanRequest, options) {
        return LoansApiFp(this.configuration).repayLoan(repayLoanRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * @export
 */
export const EstimateLoanCollateralInputTypeEnum = {
    LOAN: 'loan',
    COLLATERAL: 'collateral'
};
/**
 * @export
 */
export const GetUserLoansStateEnum = {
    PENDING: 'pending',
    ACTIVE: 'active',
    REPAYMENT_ONGOING: 'repayment-ongoing',
    SETTLED: 'settled',
    CREATION_FAILED: 'creation-failed',
    SETTLEMENT_FAILED: 'settlement-failed'
};
//# sourceMappingURL=loans-api.js.map