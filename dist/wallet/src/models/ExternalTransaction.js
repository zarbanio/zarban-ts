"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfExternalTransaction = instanceOfExternalTransaction;
exports.ExternalTransactionFromJSON = ExternalTransactionFromJSON;
exports.ExternalTransactionFromJSONTyped = ExternalTransactionFromJSONTyped;
exports.ExternalTransactionToJSON = ExternalTransactionToJSON;
exports.ExternalTransactionToJSONTyped = ExternalTransactionToJSONTyped;
const TransactionType_1 = require("./TransactionType");
const Symbol_1 = require("./Symbol");
const Currency_1 = require("./Currency");
const Network_1 = require("./Network");
const TransactionStatus_1 = require("./TransactionStatus");
const Timestamp_1 = require("./Timestamp");
/**
 * Check if a given object implements the ExternalTransaction interface.
 */
function instanceOfExternalTransaction(value) {
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('time' in value) || value['time'] === undefined)
        return false;
    if (!('type' in value) || value['type'] === undefined)
        return false;
    if (!('hash' in value) || value['hash'] === undefined)
        return false;
    if (!('from' in value) || value['from'] === undefined)
        return false;
    if (!('to' in value) || value['to'] === undefined)
        return false;
    if (!('comment' in value) || value['comment'] === undefined)
        return false;
    if (!('amount' in value) || value['amount'] === undefined)
        return false;
    if (!('symbol' in value) || value['symbol'] === undefined)
        return false;
    if (!('network' in value) || value['network'] === undefined)
        return false;
    if (!('status' in value) || value['status'] === undefined)
        return false;
    return true;
}
function ExternalTransactionFromJSON(json) {
    return ExternalTransactionFromJSONTyped(json, false);
}
function ExternalTransactionFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': json['Id'],
        'time': (0, Timestamp_1.TimestampFromJSON)(json['Time']),
        'type': (0, TransactionType_1.TransactionTypeFromJSON)(json['Type']),
        'hash': json['Hash'],
        'from': json['From'],
        'to': json['To'],
        'comment': json['Comment'],
        'amount': (0, Currency_1.CurrencyFromJSON)(json['Amount']),
        'symbol': (0, Symbol_1.SymbolFromJSON)(json['Symbol']),
        'network': (0, Network_1.NetworkFromJSON)(json['Network']),
        'status': (0, TransactionStatus_1.TransactionStatusFromJSON)(json['Status']),
    };
}
function ExternalTransactionToJSON(json) {
    return ExternalTransactionToJSONTyped(json, false);
}
function ExternalTransactionToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'Id': value['id'],
        'Time': (0, Timestamp_1.TimestampToJSON)(value['time']),
        'Type': (0, TransactionType_1.TransactionTypeToJSON)(value['type']),
        'Hash': value['hash'],
        'From': value['from'],
        'To': value['to'],
        'Comment': value['comment'],
        'Amount': (0, Currency_1.CurrencyToJSON)(value['amount']),
        'Symbol': (0, Symbol_1.SymbolToJSON)(value['symbol']),
        'Network': (0, Network_1.NetworkToJSON)(value['network']),
        'Status': (0, TransactionStatus_1.TransactionStatusToJSON)(value['status']),
    };
}
//# sourceMappingURL=ExternalTransaction.js.map