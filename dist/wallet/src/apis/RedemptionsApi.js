"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetAllRedemptionsStateEnum = exports.RedemptionsApi = void 0;
const tslib_1 = require("tslib");
const runtime = tslib_1.__importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class RedemptionsApi extends runtime.BaseAPI {
    /**
     * Get a list of all redemptions.
     * Get all redemptions
     */
    async getAllRedemptionsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/redemptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RedemptionResponseFromJSON)(jsonValue));
    }
    /**
     * Get a list of all redemptions.
     * Get all redemptions
     */
    async getAllRedemptions(requestParameters = {}, initOverrides) {
        const response = await this.getAllRedemptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get the details of a redemption.
     * Get redemption
     */
    async getRedemptionDetailsRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling getRedemptionDetails().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/redemptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RedemptionFromJSON)(jsonValue));
    }
    /**
     * Get the details of a redemption.
     * Get redemption
     */
    async getRedemptionDetails(requestParameters, initOverrides) {
        const response = await this.getRedemptionDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Redeem zar
     * Redeem zar
     */
    async redeemZarRaw(requestParameters, initOverrides) {
        if (requestParameters['redemptionRequest'] == null) {
            throw new runtime.RequiredError('redemptionRequest', 'Required parameter "redemptionRequest" was null or undefined when calling redeemZar().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/redemptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.RedemptionRequestToJSON)(requestParameters['redemptionRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RedemptionFromJSON)(jsonValue));
    }
    /**
     * Redeem zar
     * Redeem zar
     */
    async redeemZar(requestParameters, initOverrides) {
        const response = await this.redeemZarRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Update the status of a redemption.
     * Update redemption
     */
    async updateRedemptionStatusRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling updateRedemptionStatus().');
        }
        if (requestParameters['adminRedemptionUpdateRequest'] == null) {
            throw new runtime.RequiredError('adminRedemptionUpdateRequest', 'Required parameter "adminRedemptionUpdateRequest" was null or undefined when calling updateRedemptionStatus().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/redemptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.AdminRedemptionUpdateRequestToJSON)(requestParameters['adminRedemptionUpdateRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RedemptionFromJSON)(jsonValue));
    }
    /**
     * Update the status of a redemption.
     * Update redemption
     */
    async updateRedemptionStatus(requestParameters, initOverrides) {
        const response = await this.updateRedemptionStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.RedemptionsApi = RedemptionsApi;
/**
 * @export
 */
exports.GetAllRedemptionsStateEnum = {
    PENDING: 'pending',
    APPROVED: 'approved',
    COMPLETED: 'completed',
    REJECTED: 'rejected'
};
//# sourceMappingURL=RedemptionsApi.js.map