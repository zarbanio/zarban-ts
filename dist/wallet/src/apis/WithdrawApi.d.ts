/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { WithdrawRequest, WithdrawRequestBody, WithdrawRequestPreview, WithdrawRequestResponse, WithdrawResponseBody } from '../models/index';
export interface GetWithdrawalStatusRequest {
    id: number;
}
export interface PreviewWithdrawalRequest {
    withdrawRequestBody: WithdrawRequestBody;
}
export interface RequestWithdrawalRequest {
    withdrawRequestBody: WithdrawRequestBody;
}
/**
 * WithdrawApi - interface
 *
 * @export
 * @interface WithdrawApiInterface
 */
export interface WithdrawApiInterface {
    /**
     * Get user withdraw requests
     * @summary Get user withdraw requests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WithdrawApiInterface
     */
    getUserWithdrawRequestsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WithdrawRequestResponse>>;
    /**
     * Get user withdraw requests
     * Get user withdraw requests
     */
    getUserWithdrawRequests(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WithdrawRequestResponse>;
    /**
     * Get the status of a withdrawal request.
     * @summary Get withdrawal status
     * @param {number} id Withdrawal request ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WithdrawApiInterface
     */
    getWithdrawalStatusRaw(requestParameters: GetWithdrawalStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WithdrawRequest>>;
    /**
     * Get the status of a withdrawal request.
     * Get withdrawal status
     */
    getWithdrawalStatus(requestParameters: GetWithdrawalStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WithdrawRequest>;
    /**
     * Request a withdrawal from the wallet.
     * @summary Withdraw request
     * @param {WithdrawRequestBody} withdrawRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WithdrawApiInterface
     */
    previewWithdrawalRaw(requestParameters: PreviewWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WithdrawRequestPreview>>;
    /**
     * Request a withdrawal from the wallet.
     * Withdraw request
     */
    previewWithdrawal(requestParameters: PreviewWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WithdrawRequestPreview>;
    /**
     * Request a withdrawal from the wallet.
     * @summary Withdraw request
     * @param {WithdrawRequestBody} withdrawRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WithdrawApiInterface
     */
    requestWithdrawalRaw(requestParameters: RequestWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WithdrawResponseBody>>;
    /**
     * Request a withdrawal from the wallet.
     * Withdraw request
     */
    requestWithdrawal(requestParameters: RequestWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WithdrawResponseBody>;
}
/**
 *
 */
export declare class WithdrawApi extends runtime.BaseAPI implements WithdrawApiInterface {
    /**
     * Get user withdraw requests
     * Get user withdraw requests
     */
    getUserWithdrawRequestsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WithdrawRequestResponse>>;
    /**
     * Get user withdraw requests
     * Get user withdraw requests
     */
    getUserWithdrawRequests(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WithdrawRequestResponse>;
    /**
     * Get the status of a withdrawal request.
     * Get withdrawal status
     */
    getWithdrawalStatusRaw(requestParameters: GetWithdrawalStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WithdrawRequest>>;
    /**
     * Get the status of a withdrawal request.
     * Get withdrawal status
     */
    getWithdrawalStatus(requestParameters: GetWithdrawalStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WithdrawRequest>;
    /**
     * Request a withdrawal from the wallet.
     * Withdraw request
     */
    previewWithdrawalRaw(requestParameters: PreviewWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WithdrawRequestPreview>>;
    /**
     * Request a withdrawal from the wallet.
     * Withdraw request
     */
    previewWithdrawal(requestParameters: PreviewWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WithdrawRequestPreview>;
    /**
     * Request a withdrawal from the wallet.
     * Withdraw request
     */
    requestWithdrawalRaw(requestParameters: RequestWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WithdrawResponseBody>>;
    /**
     * Request a withdrawal from the wallet.
     * Withdraw request
     */
    requestWithdrawal(requestParameters: RequestWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WithdrawResponseBody>;
}
//# sourceMappingURL=WithdrawApi.d.ts.map