"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetOtpChannelEnum = exports.GenerateJwtTokenDurationEnum = exports.AuthApi = void 0;
const tslib_1 = require("tslib");
const runtime = tslib_1.__importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class AuthApi extends runtime.BaseAPI {
    /**
     * Authenticate with Telegram and get a JWT token.
     * Authenticate with Telegram
     */
    async authenticateWithTelegramRaw(requestParameters, initOverrides) {
        if (requestParameters['authTelegramRequest'] == null) {
            throw new runtime.RequiredError('authTelegramRequest', 'Required parameter "authTelegramRequest" was null or undefined when calling authenticateWithTelegram().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/auth/telegram`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.AuthTelegramRequestToJSON)(requestParameters['authTelegramRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.JwtResponseFromJSON)(jsonValue));
    }
    /**
     * Authenticate with Telegram and get a JWT token.
     * Authenticate with Telegram
     */
    async authenticateWithTelegram(requestParameters, initOverrides) {
        const response = await this.authenticateWithTelegramRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Generate a JWT token.
     * Generate a JWT token
     */
    async generateJwtTokenRaw(requestParameters, initOverrides) {
        if (requestParameters['duration'] == null) {
            throw new runtime.RequiredError('duration', 'Required parameter "duration" was null or undefined when calling generateJwtToken().');
        }
        const queryParameters = {};
        if (requestParameters['duration'] != null) {
            queryParameters['duration'] = requestParameters['duration'];
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/token`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.JwtResponseFromJSON)(jsonValue));
    }
    /**
     * Generate a JWT token.
     * Generate a JWT token
     */
    async generateJwtToken(requestParameters, initOverrides) {
        const response = await this.generateJwtTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get OTP for the user.
     * Get OTP
     */
    async getOtpRaw(requestParameters, initOverrides) {
        if (requestParameters['channel'] == null) {
            throw new runtime.RequiredError('channel', 'Required parameter "channel" was null or undefined when calling getOtp().');
        }
        const queryParameters = {};
        if (requestParameters['channel'] != null) {
            queryParameters['channel'] = requestParameters['channel'];
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/otp`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SimpleResponseFromJSON)(jsonValue));
    }
    /**
     * Get OTP for the user.
     * Get OTP
     */
    async getOtp(requestParameters, initOverrides) {
        const response = await this.getOtpRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Login with email and password and get a JWT token.
     * Login with email and password
     */
    async loginWithEmailAndPasswordRaw(requestParameters, initOverrides) {
        if (requestParameters['loginRequest'] == null) {
            throw new runtime.RequiredError('loginRequest', 'Required parameter "loginRequest" was null or undefined when calling loginWithEmailAndPassword().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.LoginRequestToJSON)(requestParameters['loginRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.JwtResponseFromJSON)(jsonValue));
    }
    /**
     * Login with email and password and get a JWT token.
     * Login with email and password
     */
    async loginWithEmailAndPassword(requestParameters, initOverrides) {
        const response = await this.loginWithEmailAndPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * signup with email and password and get a JWT token.
     * signup with email and password
     */
    async signupWithEmailAndPasswordRaw(requestParameters, initOverrides) {
        if (requestParameters['signUpRequest'] == null) {
            throw new runtime.RequiredError('signUpRequest', 'Required parameter "signUpRequest" was null or undefined when calling signupWithEmailAndPassword().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/auth/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.SignUpRequestToJSON)(requestParameters['signUpRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SimpleResponseFromJSON)(jsonValue));
    }
    /**
     * signup with email and password and get a JWT token.
     * signup with email and password
     */
    async signupWithEmailAndPassword(requestParameters, initOverrides) {
        const response = await this.signupWithEmailAndPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Verify the email of the user.
     * Verify email
     */
    async verifyUserEmailRaw(requestParameters, initOverrides) {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError('token', 'Required parameter "token" was null or undefined when calling verifyUserEmail().');
        }
        const queryParameters = {};
        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/verify-email`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.JwtResponseFromJSON)(jsonValue));
    }
    /**
     * Verify the email of the user.
     * Verify email
     */
    async verifyUserEmail(requestParameters, initOverrides) {
        const response = await this.verifyUserEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.AuthApi = AuthApi;
/**
 * @export
 */
exports.GenerateJwtTokenDurationEnum = {
    NUMBER_7: 7,
    NUMBER_15: 15,
    NUMBER_30: 30,
    NUMBER_90: 90
};
/**
 * @export
 */
exports.GetOtpChannelEnum = {
    PHONE: 'phone'
};
//# sourceMappingURL=AuthApi.js.map