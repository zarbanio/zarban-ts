"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserApi = void 0;
const tslib_1 = require("tslib");
const runtime = tslib_1.__importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class UserApi extends runtime.BaseAPI {
    /**
     * Confirm KYC for the user.
     * Confirm KYC
     */
    async confirmKycRaw(requestParameters, initOverrides) {
        if (requestParameters['kycConfirmRequest'] == null) {
            throw new runtime.RequiredError('kycConfirmRequest', 'Required parameter "kycConfirmRequest" was null or undefined when calling confirmKyc().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/kyc/confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.KycConfirmRequestToJSON)(requestParameters['kycConfirmRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SimpleResponseFromJSON)(jsonValue));
    }
    /**
     * Confirm KYC for the user.
     * Confirm KYC
     */
    async confirmKyc(requestParameters, initOverrides) {
        const response = await this.confirmKycRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Confirm the phone number of the user.
     * Confirm phone number
     */
    async confirmPhoneNumberRaw(requestParameters, initOverrides) {
        if (requestParameters['phoneOtpSubmitRequest'] == null) {
            throw new runtime.RequiredError('phoneOtpSubmitRequest', 'Required parameter "phoneOtpSubmitRequest" was null or undefined when calling confirmPhoneNumber().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/phone/confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.PhoneOtpSubmitRequestToJSON)(requestParameters['phoneOtpSubmitRequest']),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Confirm the phone number of the user.
     * Confirm phone number
     */
    async confirmPhoneNumber(requestParameters, initOverrides) {
        await this.confirmPhoneNumberRaw(requestParameters, initOverrides);
    }
    /**
     * create a child user
     * create a child user
     */
    async createChildUserRaw(requestParameters, initOverrides) {
        if (requestParameters['createChildUserRequest'] == null) {
            throw new runtime.RequiredError('createChildUserRequest', 'Required parameter "createChildUserRequest" was null or undefined when calling createChildUser().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/children`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.CreateChildUserRequestToJSON)(requestParameters['createChildUserRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UserFromJSON)(jsonValue));
    }
    /**
     * create a child user
     * create a child user
     */
    async createChildUser(requestParameters, initOverrides) {
        const response = await this.createChildUserRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get the profile of the user.
     * Get profile
     */
    async getUserProfileRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ProfileResponseFromJSON)(jsonValue));
    }
    /**
     * Get the profile of the user.
     * Get profile
     */
    async getUserProfile(initOverrides) {
        const response = await this.getUserProfileRaw(initOverrides);
        return await response.value();
    }
    /**
     * Submit email confirmation OTP for the user.
     * Submit email confirmation OTP
     */
    async submitEmailConfirmationOtpRaw(requestParameters, initOverrides) {
        if (requestParameters['emailOtpSubmitRequest'] == null) {
            throw new runtime.RequiredError('emailOtpSubmitRequest', 'Required parameter "emailOtpSubmitRequest" was null or undefined when calling submitEmailConfirmationOtp().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/email/confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.EmailOtpSubmitRequestToJSON)(requestParameters['emailOtpSubmitRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SimpleResponseFromJSON)(jsonValue));
    }
    /**
     * Submit email confirmation OTP for the user.
     * Submit email confirmation OTP
     */
    async submitEmailConfirmationOtp(requestParameters, initOverrides) {
        const response = await this.submitEmailConfirmationOtpRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Submit KYC for the user.
     * Submit KYC
     */
    async submitKycRaw(requestParameters, initOverrides) {
        if (requestParameters['kycRequest'] == null) {
            throw new runtime.RequiredError('kycRequest', 'Required parameter "kycRequest" was null or undefined when calling submitKyc().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/kyc`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.KycRequestToJSON)(requestParameters['kycRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.KycResponseFromJSON)(jsonValue));
    }
    /**
     * Submit KYC for the user.
     * Submit KYC
     */
    async submitKyc(requestParameters, initOverrides) {
        const response = await this.submitKycRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Verify the phone number of the user.
     * Verify phone number
     */
    async verifyPhoneNumberRaw(requestParameters, initOverrides) {
        if (requestParameters['updatePhoneRequest'] == null) {
            throw new runtime.RequiredError('updatePhoneRequest', 'Required parameter "updatePhoneRequest" was null or undefined when calling verifyPhoneNumber().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/phone`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.UpdatePhoneRequestToJSON)(requestParameters['updatePhoneRequest']),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Verify the phone number of the user.
     * Verify phone number
     */
    async verifyPhoneNumber(requestParameters, initOverrides) {
        await this.verifyPhoneNumberRaw(requestParameters, initOverrides);
    }
    /**
     * Verify the email of the user.
     * Verify email
     */
    async verifyUserEmailAddressRaw(requestParameters, initOverrides) {
        if (requestParameters['updateEmailRequest'] == null) {
            throw new runtime.RequiredError('updateEmailRequest', 'Required parameter "updateEmailRequest" was null or undefined when calling verifyUserEmailAddress().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.UpdateEmailRequestToJSON)(requestParameters['updateEmailRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SimpleResponseFromJSON)(jsonValue));
    }
    /**
     * Verify the email of the user.
     * Verify email
     */
    async verifyUserEmailAddress(requestParameters, initOverrides) {
        const response = await this.verifyUserEmailAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.UserApi = UserApi;
//# sourceMappingURL=UserApi.js.map