"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Zarban Wallet API
 * API for Zarban wallet services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BalanceApi = void 0;
const tslib_1 = require("tslib");
const runtime = tslib_1.__importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class BalanceApi extends runtime.BaseAPI {
    /**
     * Get the balance by a symbol.
     * Get balance
     */
    async getBalanceBySymbolRaw(requestParameters, initOverrides) {
        if (requestParameters['symbol'] == null) {
            throw new runtime.RequiredError('symbol', 'Required parameter "symbol" was null or undefined when calling getBalanceBySymbol().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/balance/{symbol}`.replace(`{${"symbol"}}`, encodeURIComponent(String(requestParameters['symbol']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BalanceFromJSON)(jsonValue));
    }
    /**
     * Get the balance by a symbol.
     * Get balance
     */
    async getBalanceBySymbol(requestParameters, initOverrides) {
        const response = await this.getBalanceBySymbolRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get the balance of the wallet.
     * Get wallet balance
     */
    async getWalletBalanceRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/balance`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.WalletBalanceFromJSON)(jsonValue));
    }
    /**
     * Get the balance of the wallet.
     * Get wallet balance
     */
    async getWalletBalance(initOverrides) {
        const response = await this.getWalletBalanceRaw(initOverrides);
        return await response.value();
    }
}
exports.BalanceApi = BalanceApi;
//# sourceMappingURL=BalanceApi.js.map