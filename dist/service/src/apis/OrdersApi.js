"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetUnfilledOrdersStatusEnum = exports.GetUnfilledOrdersTypeEnum = exports.OrdersApi = void 0;
const tslib_1 = require("tslib");
const runtime = tslib_1.__importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class OrdersApi extends runtime.BaseAPI {
    /**
     * Get a list of unfilled orders filtered by different parameters.
     * Fetch Unfilled Orders
     */
    async getUnfilledOrdersRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }
        if (requestParameters['hash'] != null) {
            queryParameters['hash'] = requestParameters['hash'];
        }
        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }
        if (requestParameters['offerer'] != null) {
            queryParameters['offerer'] = requestParameters['offerer'];
        }
        if (requestParameters['filler'] != null) {
            queryParameters['filler'] = requestParameters['filler'];
        }
        if (requestParameters['decayStartTime'] != null) {
            queryParameters['decayStartTime'] = requestParameters['decayStartTime'];
        }
        if (requestParameters['decayEndTime'] != null) {
            queryParameters['decayEndTime'] = requestParameters['decayEndTime'];
        }
        if (requestParameters['deadline'] != null) {
            queryParameters['deadline'] = requestParameters['deadline'];
        }
        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }
        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/v2/orders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.OrderResponseFromJSON)(jsonValue));
    }
    /**
     * Get a list of unfilled orders filtered by different parameters.
     * Fetch Unfilled Orders
     */
    async getUnfilledOrders(requestParameters = {}, initOverrides) {
        const response = await this.getUnfilledOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * updates an order entity in database
     * Updates Order Entity
     */
    async syncOrderRaw(requestParameters, initOverrides) {
        if (requestParameters['updateOrderRequest'] == null) {
            throw new runtime.RequiredError('updateOrderRequest', 'Required parameter "updateOrderRequest" was null or undefined when calling syncOrder().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/v2/orders/sync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.UpdateOrderRequestToJSON)(requestParameters['updateOrderRequest']),
        }, initOverrides);
        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     * updates an order entity in database
     * Updates Order Entity
     */
    async syncOrder(requestParameters, initOverrides) {
        const response = await this.syncOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.OrdersApi = OrdersApi;
/**
 * @export
 */
exports.GetUnfilledOrdersTypeEnum = {
    LIMIT: 'limit',
    DUTCH: 'dutch'
};
/**
 * @export
 */
exports.GetUnfilledOrdersStatusEnum = {
    OPEN: 'open',
    EXPIRED: 'expired',
    ERROR: 'error',
    CANCELLED: 'cancelled',
    FILLED: 'filled',
    INSUFFICIENT_FUNDS: 'insufficient-funds'
};
//# sourceMappingURL=OrdersApi.js.map