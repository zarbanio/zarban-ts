"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetVaultEventsByIdTypeEnum = exports.StableCoinSystemApi = void 0;
const tslib_1 = require("tslib");
const runtime = tslib_1.__importStar(require("../runtime"));
const index_1 = require("../models/index");
/**
 *
 */
class StableCoinSystemApi extends runtime.BaseAPI {
    /**
     * approve and join ZAR token into Vat contract
     * approve and join ZAR token into Vat contract
     */
    async approveAndJoinZarTransactionRaw(requestParameters, initOverrides) {
        if (requestParameters['stablecoinSystemZarjoinTxRequest'] == null) {
            throw new runtime.RequiredError('stablecoinSystemZarjoinTxRequest', 'Required parameter "stablecoinSystemZarjoinTxRequest" was null or undefined when calling approveAndJoinZarTransaction().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/v2/stablecoinsystem/auctions/tx/zarjoin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.StablecoinSystemZarjoinTxRequestToJSON)(requestParameters['stablecoinSystemZarjoinTxRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChainActivityFromJSON)(jsonValue));
    }
    /**
     * approve and join ZAR token into Vat contract
     * approve and join ZAR token into Vat contract
     */
    async approveAndJoinZarTransaction(requestParameters, initOverrides) {
        const response = await this.approveAndJoinZarTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Create vault
     * Create vault
     */
    async createStableCoinVaultRaw(requestParameters, initOverrides) {
        if (requestParameters['stablecoinSystemCreateVaultTxRequest'] == null) {
            throw new runtime.RequiredError('stablecoinSystemCreateVaultTxRequest', 'Required parameter "stablecoinSystemCreateVaultTxRequest" was null or undefined when calling createStableCoinVault().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/v2/stablecoinsystem/tx/createvault`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.StablecoinSystemCreateVaultTxRequestToJSON)(requestParameters['stablecoinSystemCreateVaultTxRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChainActivityFromJSON)(jsonValue));
    }
    /**
     * Create vault
     * Create vault
     */
    async createStableCoinVault(requestParameters, initOverrides) {
        const response = await this.createStableCoinVaultRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Deposit collateral
     * Deposit collateral
     */
    async depositStableCoinCollateralRaw(requestParameters, initOverrides) {
        if (requestParameters['stablecoinSystemDepositCollateralTxRequest'] == null) {
            throw new runtime.RequiredError('stablecoinSystemDepositCollateralTxRequest', 'Required parameter "stablecoinSystemDepositCollateralTxRequest" was null or undefined when calling depositStableCoinCollateral().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/v2/stablecoinsystem/tx/depositcollateral`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.StablecoinSystemDepositCollateralTxRequestToJSON)(requestParameters['stablecoinSystemDepositCollateralTxRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChainActivityFromJSON)(jsonValue));
    }
    /**
     * Deposit collateral
     * Deposit collateral
     */
    async depositStableCoinCollateral(requestParameters, initOverrides) {
        const response = await this.depositStableCoinCollateralRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * exit Gem token (which can be used as collateral) from Vat contract
     * exit Gem token (which can be used as collateral) from Vat contract
     */
    async exitGemTransactionRaw(requestParameters, initOverrides) {
        if (requestParameters['stablecoinSystemGemexitTxRequest'] == null) {
            throw new runtime.RequiredError('stablecoinSystemGemexitTxRequest', 'Required parameter "stablecoinSystemGemexitTxRequest" was null or undefined when calling exitGemTransaction().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/v2/stablecoinsystem/auctions/tx/gemexit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.StablecoinSystemGemexitTxRequestToJSON)(requestParameters['stablecoinSystemGemexitTxRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChainActivityFromJSON)(jsonValue));
    }
    /**
     * exit Gem token (which can be used as collateral) from Vat contract
     * exit Gem token (which can be used as collateral) from Vat contract
     */
    async exitGemTransaction(requestParameters, initOverrides) {
        const response = await this.exitGemTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * exit ZAR token from Vat contract
     * exit ZAR token from Vat contract
     */
    async exitZarTransactionRaw(requestParameters, initOverrides) {
        if (requestParameters['stablecoinSystemZarexitTxRequest'] == null) {
            throw new runtime.RequiredError('stablecoinSystemZarexitTxRequest', 'Required parameter "stablecoinSystemZarexitTxRequest" was null or undefined when calling exitZarTransaction().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/v2/stablecoinsystem/auctions/tx/zarexit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.StablecoinSystemZarexitTxRequestToJSON)(requestParameters['stablecoinSystemZarexitTxRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChainActivityFromJSON)(jsonValue));
    }
    /**
     * exit ZAR token from Vat contract
     * exit ZAR token from Vat contract
     */
    async exitZarTransaction(requestParameters, initOverrides) {
        const response = await this.exitZarTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Retrieve a list of all available ilks.
     * Get all Ilks
     */
    async getAllIlksRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/v2/ilks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.IlksResponseFromJSON)(jsonValue));
    }
    /**
     * Retrieve a list of all available ilks.
     * Get all Ilks
     */
    async getAllIlks(initOverrides) {
        const response = await this.getAllIlksRaw(initOverrides);
        return await response.value();
    }
    /**
     * Get collector data
     * Get collector data
     */
    async getCollectorDataRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/v2/stats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatsFromJSON)(jsonValue));
    }
    /**
     * Get collector data
     * Get collector data
     */
    async getCollectorData(initOverrides) {
        const response = await this.getCollectorDataRaw(initOverrides);
        return await response.value();
    }
    /**
     * Retrieve an Ilk by providing its name.
     * Get Ilk by name
     */
    async getIlkByNameRaw(requestParameters, initOverrides) {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling getIlkByName().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/v2/ilks/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.IlkFromJSON)(jsonValue));
    }
    /**
     * Retrieve an Ilk by providing its name.
     * Get Ilk by name
     */
    async getIlkByName(requestParameters, initOverrides) {
        const response = await this.getIlkByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get a vault by ID
     */
    async getVaultByIdRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling getVaultById().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/v2/vaults/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.VaultFromJSON)(jsonValue));
    }
    /**
     * Get a vault by ID
     */
    async getVaultById(requestParameters, initOverrides) {
        const response = await this.getVaultByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get vault events by ID
     */
    async getVaultEventsByIdRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling getVaultEventsById().');
        }
        const queryParameters = {};
        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/v2/vaults/{id}/events`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.VaultEventsResponseFromJSON)(jsonValue));
    }
    /**
     * Get vault events by ID
     */
    async getVaultEventsById(requestParameters, initOverrides) {
        const response = await this.getVaultEventsByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get vaults by owner query
     */
    async getVaultsByOwnerRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters['owner'] != null) {
            queryParameters['owner'] = requestParameters['owner'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/v2/vaults`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.VaultsResponseFromJSON)(jsonValue));
    }
    /**
     * Get vaults by owner query
     */
    async getVaultsByOwner(requestParameters = {}, initOverrides) {
        const response = await this.getVaultsByOwnerRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * liquidate a vault
     * liquidate a vault
     */
    async liquidateVaultTransactionRaw(requestParameters, initOverrides) {
        if (requestParameters['stablecoinSystemBarkTxRequest'] == null) {
            throw new runtime.RequiredError('stablecoinSystemBarkTxRequest', 'Required parameter "stablecoinSystemBarkTxRequest" was null or undefined when calling liquidateVaultTransaction().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/v2/stablecoinsystem/tx/bark`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.StablecoinSystemBarkTxRequestToJSON)(requestParameters['stablecoinSystemBarkTxRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChainActivityFromJSON)(jsonValue));
    }
    /**
     * liquidate a vault
     * liquidate a vault
     */
    async liquidateVaultTransaction(requestParameters, initOverrides) {
        const response = await this.liquidateVaultTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Mint ZAR
     * Mint ZAR
     */
    async mintZarTransactionRaw(requestParameters, initOverrides) {
        if (requestParameters['stablecoinSystemMintZarTxRequest'] == null) {
            throw new runtime.RequiredError('stablecoinSystemMintZarTxRequest', 'Required parameter "stablecoinSystemMintZarTxRequest" was null or undefined when calling mintZarTransaction().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/v2/stablecoinsystem/tx/mintzar`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.StablecoinSystemMintZarTxRequestToJSON)(requestParameters['stablecoinSystemMintZarTxRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChainActivityFromJSON)(jsonValue));
    }
    /**
     * Mint ZAR
     * Mint ZAR
     */
    async mintZarTransaction(requestParameters, initOverrides) {
        const response = await this.mintZarTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Repay ZAR
     * Repay ZAR
     */
    async repayZarTransactionRaw(requestParameters, initOverrides) {
        if (requestParameters['stablecoinSystemRepayZarTxRequest'] == null) {
            throw new runtime.RequiredError('stablecoinSystemRepayZarTxRequest', 'Required parameter "stablecoinSystemRepayZarTxRequest" was null or undefined when calling repayZarTransaction().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/v2/stablecoinsystem/tx/repayzar`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.StablecoinSystemRepayZarTxRequestToJSON)(requestParameters['stablecoinSystemRepayZarTxRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChainActivityFromJSON)(jsonValue));
    }
    /**
     * Repay ZAR
     * Repay ZAR
     */
    async repayZarTransaction(requestParameters, initOverrides) {
        const response = await this.repayZarTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * reset a auction
     * reset a auction
     */
    async resetAuctionTransactionRaw(requestParameters, initOverrides) {
        if (requestParameters['stablecoinSystemRedoTxRequest'] == null) {
            throw new runtime.RequiredError('stablecoinSystemRedoTxRequest', 'Required parameter "stablecoinSystemRedoTxRequest" was null or undefined when calling resetAuctionTransaction().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/v2/stablecoinsystem/auctions/tx/redo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.StablecoinSystemRedoTxRequestToJSON)(requestParameters['stablecoinSystemRedoTxRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChainActivityFromJSON)(jsonValue));
    }
    /**
     * reset a auction
     * reset a auction
     */
    async resetAuctionTransaction(requestParameters, initOverrides) {
        const response = await this.resetAuctionTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * take a auction
     * take a auction
     */
    async takeAuctionTransactionRaw(requestParameters, initOverrides) {
        if (requestParameters['stablecoinSystemTakeTxRequest'] == null) {
            throw new runtime.RequiredError('stablecoinSystemTakeTxRequest', 'Required parameter "stablecoinSystemTakeTxRequest" was null or undefined when calling takeAuctionTransaction().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/v2/stablecoinsystem/auctions/tx/take`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.StablecoinSystemTakeTxRequestToJSON)(requestParameters['stablecoinSystemTakeTxRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChainActivityFromJSON)(jsonValue));
    }
    /**
     * take a auction
     * take a auction
     */
    async takeAuctionTransaction(requestParameters, initOverrides) {
        const response = await this.takeAuctionTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Withdraw collateral
     * Withdraw collateral
     */
    async withdrawCollateralTransactionRaw(requestParameters, initOverrides) {
        if (requestParameters['stablecoinSystemWithdrawCollateralTxRequest'] == null) {
            throw new runtime.RequiredError('stablecoinSystemWithdrawCollateralTxRequest', 'Required parameter "stablecoinSystemWithdrawCollateralTxRequest" was null or undefined when calling withdrawCollateralTransaction().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/v2/stablecoinsystem/tx/withdrawcollateral`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.StablecoinSystemWithdrawCollateralTxRequestToJSON)(requestParameters['stablecoinSystemWithdrawCollateralTxRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ChainActivityFromJSON)(jsonValue));
    }
    /**
     * Withdraw collateral
     * Withdraw collateral
     */
    async withdrawCollateralTransaction(requestParameters, initOverrides) {
        const response = await this.withdrawCollateralTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.StableCoinSystemApi = StableCoinSystemApi;
/**
 * @export
 */
exports.GetVaultEventsByIdTypeEnum = {
    REPAY: 'repay',
    DEPOSIT: 'deposit',
    WITHDRAW: 'withdraw',
    MINT: 'mint'
};
//# sourceMappingURL=StableCoinSystemApi.js.map