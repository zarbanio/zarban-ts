/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { OrderResponse, TimeRange, UpdateOrderRequest } from '../models/index';
export interface GetUnfilledOrdersRequest {
    type?: GetUnfilledOrdersTypeEnum;
    hash?: string;
    status?: GetUnfilledOrdersStatusEnum;
    offerer?: string;
    filler?: string;
    decayStartTime?: TimeRange;
    decayEndTime?: TimeRange;
    deadline?: TimeRange;
    cursor?: number;
    limit?: number;
}
export interface SyncOrderRequest {
    updateOrderRequest: UpdateOrderRequest;
}
/**
 * OrdersApi - interface
 *
 * @export
 * @interface OrdersApiInterface
 */
export interface OrdersApiInterface {
    /**
     * Get a list of unfilled orders filtered by different parameters.
     * @summary Fetch Unfilled Orders
     * @param {'limit' | 'dutch'} [type] Type of the order
     * @param {string} [hash] order hash
     * @param {'open' | 'expired' | 'error' | 'cancelled' | 'filled' | 'insufficient-funds'} [status] Status of the order
     * @param {string} [offerer] Ethereum address of the offerer
     * @param {string} [filler] Ethereum address of the filler
     * @param {TimeRange} [decayStartTime] Decay start time
     * @param {TimeRange} [decayEndTime] Decay end time
     * @param {TimeRange} [deadline] Order deadline
     * @param {number} [cursor] Cursor for pagination
     * @param {number} [limit] Limit the number of orders returned (default is 10)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    getUnfilledOrdersRaw(requestParameters: GetUnfilledOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>>;
    /**
     * Get a list of unfilled orders filtered by different parameters.
     * Fetch Unfilled Orders
     */
    getUnfilledOrders(requestParameters: GetUnfilledOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse>;
    /**
     * updates an order entity in database
     * @summary Updates Order Entity
     * @param {UpdateOrderRequest} updateOrderRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    syncOrderRaw(requestParameters: SyncOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Error>>;
    /**
     * updates an order entity in database
     * Updates Order Entity
     */
    syncOrder(requestParameters: SyncOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Error>;
}
/**
 *
 */
export declare class OrdersApi extends runtime.BaseAPI implements OrdersApiInterface {
    /**
     * Get a list of unfilled orders filtered by different parameters.
     * Fetch Unfilled Orders
     */
    getUnfilledOrdersRaw(requestParameters: GetUnfilledOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponse>>;
    /**
     * Get a list of unfilled orders filtered by different parameters.
     * Fetch Unfilled Orders
     */
    getUnfilledOrders(requestParameters?: GetUnfilledOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponse>;
    /**
     * updates an order entity in database
     * Updates Order Entity
     */
    syncOrderRaw(requestParameters: SyncOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Error>>;
    /**
     * updates an order entity in database
     * Updates Order Entity
     */
    syncOrder(requestParameters: SyncOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Error>;
}
/**
 * @export
 */
export declare const GetUnfilledOrdersTypeEnum: {
    readonly LIMIT: "limit";
    readonly DUTCH: "dutch";
};
export type GetUnfilledOrdersTypeEnum = typeof GetUnfilledOrdersTypeEnum[keyof typeof GetUnfilledOrdersTypeEnum];
/**
 * @export
 */
export declare const GetUnfilledOrdersStatusEnum: {
    readonly OPEN: "open";
    readonly EXPIRED: "expired";
    readonly ERROR: "error";
    readonly CANCELLED: "cancelled";
    readonly FILLED: "filled";
    readonly INSUFFICIENT_FUNDS: "insufficient-funds";
};
export type GetUnfilledOrdersStatusEnum = typeof GetUnfilledOrdersStatusEnum[keyof typeof GetUnfilledOrdersStatusEnum];
//# sourceMappingURL=OrdersApi.d.ts.map