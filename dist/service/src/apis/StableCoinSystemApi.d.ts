/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { ChainActivity, Ilk, IlksResponse, StablecoinSystemBarkTxRequest, StablecoinSystemCreateVaultTxRequest, StablecoinSystemDepositCollateralTxRequest, StablecoinSystemGemexitTxRequest, StablecoinSystemMintZarTxRequest, StablecoinSystemRedoTxRequest, StablecoinSystemRepayZarTxRequest, StablecoinSystemTakeTxRequest, StablecoinSystemWithdrawCollateralTxRequest, StablecoinSystemZarexitTxRequest, StablecoinSystemZarjoinTxRequest, Stats, Vault, VaultEventsResponse, VaultsResponse } from '../models/index';
export interface ApproveAndJoinZarTransactionRequest {
    stablecoinSystemZarjoinTxRequest: StablecoinSystemZarjoinTxRequest;
}
export interface CreateStableCoinVaultRequest {
    stablecoinSystemCreateVaultTxRequest: StablecoinSystemCreateVaultTxRequest;
}
export interface DepositStableCoinCollateralRequest {
    stablecoinSystemDepositCollateralTxRequest: StablecoinSystemDepositCollateralTxRequest;
}
export interface ExitGemTransactionRequest {
    stablecoinSystemGemexitTxRequest: StablecoinSystemGemexitTxRequest;
}
export interface ExitZarTransactionRequest {
    stablecoinSystemZarexitTxRequest: StablecoinSystemZarexitTxRequest;
}
export interface GetIlkByNameRequest {
    name: string;
}
export interface GetVaultByIdRequest {
    id: number;
}
export interface GetVaultEventsByIdRequest {
    id: number;
    type?: GetVaultEventsByIdTypeEnum;
}
export interface GetVaultsByOwnerRequest {
    owner?: string;
}
export interface LiquidateVaultTransactionRequest {
    stablecoinSystemBarkTxRequest: StablecoinSystemBarkTxRequest;
}
export interface MintZarTransactionRequest {
    stablecoinSystemMintZarTxRequest: StablecoinSystemMintZarTxRequest;
}
export interface RepayZarTransactionRequest {
    stablecoinSystemRepayZarTxRequest: StablecoinSystemRepayZarTxRequest;
}
export interface ResetAuctionTransactionRequest {
    stablecoinSystemRedoTxRequest: StablecoinSystemRedoTxRequest;
}
export interface TakeAuctionTransactionRequest {
    stablecoinSystemTakeTxRequest: StablecoinSystemTakeTxRequest;
}
export interface WithdrawCollateralTransactionRequest {
    stablecoinSystemWithdrawCollateralTxRequest: StablecoinSystemWithdrawCollateralTxRequest;
}
/**
 * StableCoinSystemApi - interface
 *
 * @export
 * @interface StableCoinSystemApiInterface
 */
export interface StableCoinSystemApiInterface {
    /**
     * approve and join ZAR token into Vat contract
     * @summary approve and join ZAR token into Vat contract
     * @param {StablecoinSystemZarjoinTxRequest} stablecoinSystemZarjoinTxRequest Approve and join Zar token into Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    approveAndJoinZarTransactionRaw(requestParameters: ApproveAndJoinZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>>;
    /**
     * approve and join ZAR token into Vat contract
     * approve and join ZAR token into Vat contract
     */
    approveAndJoinZarTransaction(requestParameters: ApproveAndJoinZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity>;
    /**
     * Create vault
     * @summary Create vault
     * @param {StablecoinSystemCreateVaultTxRequest} stablecoinSystemCreateVaultTxRequest Create vault transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    createStableCoinVaultRaw(requestParameters: CreateStableCoinVaultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>>;
    /**
     * Create vault
     * Create vault
     */
    createStableCoinVault(requestParameters: CreateStableCoinVaultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity>;
    /**
     * Deposit collateral
     * @summary Deposit collateral
     * @param {StablecoinSystemDepositCollateralTxRequest} stablecoinSystemDepositCollateralTxRequest Deposit collateral transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    depositStableCoinCollateralRaw(requestParameters: DepositStableCoinCollateralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>>;
    /**
     * Deposit collateral
     * Deposit collateral
     */
    depositStableCoinCollateral(requestParameters: DepositStableCoinCollateralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity>;
    /**
     * exit Gem token (which can be used as collateral) from Vat contract
     * @summary exit Gem token (which can be used as collateral) from Vat contract
     * @param {StablecoinSystemGemexitTxRequest} stablecoinSystemGemexitTxRequest exit Zar token from Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    exitGemTransactionRaw(requestParameters: ExitGemTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>>;
    /**
     * exit Gem token (which can be used as collateral) from Vat contract
     * exit Gem token (which can be used as collateral) from Vat contract
     */
    exitGemTransaction(requestParameters: ExitGemTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity>;
    /**
     * exit ZAR token from Vat contract
     * @summary exit ZAR token from Vat contract
     * @param {StablecoinSystemZarexitTxRequest} stablecoinSystemZarexitTxRequest exit Zar token from Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    exitZarTransactionRaw(requestParameters: ExitZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>>;
    /**
     * exit ZAR token from Vat contract
     * exit ZAR token from Vat contract
     */
    exitZarTransaction(requestParameters: ExitZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity>;
    /**
     * Retrieve a list of all available ilks.
     * @summary Get all Ilks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    getAllIlksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IlksResponse>>;
    /**
     * Retrieve a list of all available ilks.
     * Get all Ilks
     */
    getAllIlks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IlksResponse>;
    /**
     * Get collector data
     * @summary Get collector data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    getCollectorDataRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Stats>>;
    /**
     * Get collector data
     * Get collector data
     */
    getCollectorData(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Stats>;
    /**
     * Retrieve an Ilk by providing its name.
     * @summary Get Ilk by name
     * @param {string} name Name of the ILK
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    getIlkByNameRaw(requestParameters: GetIlkByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ilk>>;
    /**
     * Retrieve an Ilk by providing its name.
     * Get Ilk by name
     */
    getIlkByName(requestParameters: GetIlkByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ilk>;
    /**
     *
     * @summary Get a vault by ID
     * @param {number} id Vault ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    getVaultByIdRaw(requestParameters: GetVaultByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vault>>;
    /**
     * Get a vault by ID
     */
    getVaultById(requestParameters: GetVaultByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vault>;
    /**
     *
     * @summary Get vault events by ID
     * @param {number} id Vault ID
     * @param {'repay' | 'deposit' | 'withdraw' | 'mint'} [type] Event type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    getVaultEventsByIdRaw(requestParameters: GetVaultEventsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VaultEventsResponse>>;
    /**
     * Get vault events by ID
     */
    getVaultEventsById(requestParameters: GetVaultEventsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VaultEventsResponse>;
    /**
     *
     * @summary Get vaults by owner query
     * @param {string} [owner] Ethereum address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    getVaultsByOwnerRaw(requestParameters: GetVaultsByOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VaultsResponse>>;
    /**
     * Get vaults by owner query
     */
    getVaultsByOwner(requestParameters: GetVaultsByOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VaultsResponse>;
    /**
     * liquidate a vault
     * @summary liquidate a vault
     * @param {StablecoinSystemBarkTxRequest} stablecoinSystemBarkTxRequest Liquidate a Vault transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    liquidateVaultTransactionRaw(requestParameters: LiquidateVaultTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>>;
    /**
     * liquidate a vault
     * liquidate a vault
     */
    liquidateVaultTransaction(requestParameters: LiquidateVaultTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity>;
    /**
     * Mint ZAR
     * @summary Mint ZAR
     * @param {StablecoinSystemMintZarTxRequest} stablecoinSystemMintZarTxRequest Mint ZAR transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    mintZarTransactionRaw(requestParameters: MintZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>>;
    /**
     * Mint ZAR
     * Mint ZAR
     */
    mintZarTransaction(requestParameters: MintZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity>;
    /**
     * Repay ZAR
     * @summary Repay ZAR
     * @param {StablecoinSystemRepayZarTxRequest} stablecoinSystemRepayZarTxRequest Repay ZAR transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    repayZarTransactionRaw(requestParameters: RepayZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>>;
    /**
     * Repay ZAR
     * Repay ZAR
     */
    repayZarTransaction(requestParameters: RepayZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity>;
    /**
     * reset a auction
     * @summary reset a auction
     * @param {StablecoinSystemRedoTxRequest} stablecoinSystemRedoTxRequest Reset a Auction transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    resetAuctionTransactionRaw(requestParameters: ResetAuctionTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>>;
    /**
     * reset a auction
     * reset a auction
     */
    resetAuctionTransaction(requestParameters: ResetAuctionTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity>;
    /**
     * take a auction
     * @summary take a auction
     * @param {StablecoinSystemTakeTxRequest} stablecoinSystemTakeTxRequest Take a Auction transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    takeAuctionTransactionRaw(requestParameters: TakeAuctionTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>>;
    /**
     * take a auction
     * take a auction
     */
    takeAuctionTransaction(requestParameters: TakeAuctionTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity>;
    /**
     * Withdraw collateral
     * @summary Withdraw collateral
     * @param {StablecoinSystemWithdrawCollateralTxRequest} stablecoinSystemWithdrawCollateralTxRequest Withdraw collateral transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    withdrawCollateralTransactionRaw(requestParameters: WithdrawCollateralTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>>;
    /**
     * Withdraw collateral
     * Withdraw collateral
     */
    withdrawCollateralTransaction(requestParameters: WithdrawCollateralTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity>;
}
/**
 *
 */
export declare class StableCoinSystemApi extends runtime.BaseAPI implements StableCoinSystemApiInterface {
    /**
     * approve and join ZAR token into Vat contract
     * approve and join ZAR token into Vat contract
     */
    approveAndJoinZarTransactionRaw(requestParameters: ApproveAndJoinZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>>;
    /**
     * approve and join ZAR token into Vat contract
     * approve and join ZAR token into Vat contract
     */
    approveAndJoinZarTransaction(requestParameters: ApproveAndJoinZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity>;
    /**
     * Create vault
     * Create vault
     */
    createStableCoinVaultRaw(requestParameters: CreateStableCoinVaultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>>;
    /**
     * Create vault
     * Create vault
     */
    createStableCoinVault(requestParameters: CreateStableCoinVaultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity>;
    /**
     * Deposit collateral
     * Deposit collateral
     */
    depositStableCoinCollateralRaw(requestParameters: DepositStableCoinCollateralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>>;
    /**
     * Deposit collateral
     * Deposit collateral
     */
    depositStableCoinCollateral(requestParameters: DepositStableCoinCollateralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity>;
    /**
     * exit Gem token (which can be used as collateral) from Vat contract
     * exit Gem token (which can be used as collateral) from Vat contract
     */
    exitGemTransactionRaw(requestParameters: ExitGemTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>>;
    /**
     * exit Gem token (which can be used as collateral) from Vat contract
     * exit Gem token (which can be used as collateral) from Vat contract
     */
    exitGemTransaction(requestParameters: ExitGemTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity>;
    /**
     * exit ZAR token from Vat contract
     * exit ZAR token from Vat contract
     */
    exitZarTransactionRaw(requestParameters: ExitZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>>;
    /**
     * exit ZAR token from Vat contract
     * exit ZAR token from Vat contract
     */
    exitZarTransaction(requestParameters: ExitZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity>;
    /**
     * Retrieve a list of all available ilks.
     * Get all Ilks
     */
    getAllIlksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IlksResponse>>;
    /**
     * Retrieve a list of all available ilks.
     * Get all Ilks
     */
    getAllIlks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IlksResponse>;
    /**
     * Get collector data
     * Get collector data
     */
    getCollectorDataRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Stats>>;
    /**
     * Get collector data
     * Get collector data
     */
    getCollectorData(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Stats>;
    /**
     * Retrieve an Ilk by providing its name.
     * Get Ilk by name
     */
    getIlkByNameRaw(requestParameters: GetIlkByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ilk>>;
    /**
     * Retrieve an Ilk by providing its name.
     * Get Ilk by name
     */
    getIlkByName(requestParameters: GetIlkByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ilk>;
    /**
     * Get a vault by ID
     */
    getVaultByIdRaw(requestParameters: GetVaultByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Vault>>;
    /**
     * Get a vault by ID
     */
    getVaultById(requestParameters: GetVaultByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Vault>;
    /**
     * Get vault events by ID
     */
    getVaultEventsByIdRaw(requestParameters: GetVaultEventsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VaultEventsResponse>>;
    /**
     * Get vault events by ID
     */
    getVaultEventsById(requestParameters: GetVaultEventsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VaultEventsResponse>;
    /**
     * Get vaults by owner query
     */
    getVaultsByOwnerRaw(requestParameters: GetVaultsByOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VaultsResponse>>;
    /**
     * Get vaults by owner query
     */
    getVaultsByOwner(requestParameters?: GetVaultsByOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VaultsResponse>;
    /**
     * liquidate a vault
     * liquidate a vault
     */
    liquidateVaultTransactionRaw(requestParameters: LiquidateVaultTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>>;
    /**
     * liquidate a vault
     * liquidate a vault
     */
    liquidateVaultTransaction(requestParameters: LiquidateVaultTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity>;
    /**
     * Mint ZAR
     * Mint ZAR
     */
    mintZarTransactionRaw(requestParameters: MintZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>>;
    /**
     * Mint ZAR
     * Mint ZAR
     */
    mintZarTransaction(requestParameters: MintZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity>;
    /**
     * Repay ZAR
     * Repay ZAR
     */
    repayZarTransactionRaw(requestParameters: RepayZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>>;
    /**
     * Repay ZAR
     * Repay ZAR
     */
    repayZarTransaction(requestParameters: RepayZarTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity>;
    /**
     * reset a auction
     * reset a auction
     */
    resetAuctionTransactionRaw(requestParameters: ResetAuctionTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>>;
    /**
     * reset a auction
     * reset a auction
     */
    resetAuctionTransaction(requestParameters: ResetAuctionTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity>;
    /**
     * take a auction
     * take a auction
     */
    takeAuctionTransactionRaw(requestParameters: TakeAuctionTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>>;
    /**
     * take a auction
     * take a auction
     */
    takeAuctionTransaction(requestParameters: TakeAuctionTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity>;
    /**
     * Withdraw collateral
     * Withdraw collateral
     */
    withdrawCollateralTransactionRaw(requestParameters: WithdrawCollateralTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainActivity>>;
    /**
     * Withdraw collateral
     * Withdraw collateral
     */
    withdrawCollateralTransaction(requestParameters: WithdrawCollateralTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainActivity>;
}
/**
 * @export
 */
export declare const GetVaultEventsByIdTypeEnum: {
    readonly REPAY: "repay";
    readonly DEPOSIT: "deposit";
    readonly WITHDRAW: "withdraw";
    readonly MINT: "mint";
};
export type GetVaultEventsByIdTypeEnum = typeof GetVaultEventsByIdTypeEnum[keyof typeof GetVaultEventsByIdTypeEnum];
//# sourceMappingURL=StableCoinSystemApi.d.ts.map