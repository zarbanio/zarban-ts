/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { StakePlansResponse, StakingCollectRewardTxRequest, StakingCollectRewardTxResponse, StakingStakeTxRequest, StakingStakeTxResponse, StakingWithdrawTxRequest, StakingWithdrawTxResponse, UserStakesResponse } from '../models/index';
export interface CollectStakingRewardRequest {
    stakingCollectRewardTxRequest: StakingCollectRewardTxRequest;
}
export interface GetUserStakingStatsRequest {
    user?: string;
    address?: string;
    active?: boolean;
    cursor?: number;
    limit?: number;
}
export interface StakeToStakingContractRequest {
    stakingStakeTxRequest: StakingStakeTxRequest;
}
export interface WithdrawStakedAssetRequest {
    stakingWithdrawTxRequest: StakingWithdrawTxRequest;
}
/**
 * StakingApi - interface
 *
 * @export
 * @interface StakingApiInterface
 */
export interface StakingApiInterface {
    /**
     * Collect staking reward
     * @summary Collect staking reward
     * @param {StakingCollectRewardTxRequest} stakingCollectRewardTxRequest Collect reward transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    collectStakingRewardRaw(requestParameters: CollectStakingRewardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StakingCollectRewardTxResponse>>;
    /**
     * Collect staking reward
     * Collect staking reward
     */
    collectStakingReward(requestParameters: CollectStakingRewardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StakingCollectRewardTxResponse>;
    /**
     * Get staking plans
     * @summary Get staking plans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getStakingPlansRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StakePlansResponse>>;
    /**
     * Get staking plans
     * Get staking plans
     */
    getStakingPlans(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StakePlansResponse>;
    /**
     * Get user staking stats
     * @summary Get user staking stats
     * @param {string} [user] Ethereum address of the user
     * @param {string} [address] Ethereum address of the staking contract
     * @param {boolean} [active] Filter by active stakes
     * @param {number} [cursor] Cursor for pagination
     * @param {number} [limit] Limit the number of stakes returned (default is 50)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getUserStakingStatsRaw(requestParameters: GetUserStakingStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserStakesResponse>>;
    /**
     * Get user staking stats
     * Get user staking stats
     */
    getUserStakingStats(requestParameters: GetUserStakingStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserStakesResponse>;
    /**
     * Stake to staking contract
     * @summary Stake to staking contract
     * @param {StakingStakeTxRequest} stakingStakeTxRequest Stake transaction request, if amount is not provided, then the whole wallet balance will be used
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    stakeToStakingContractRaw(requestParameters: StakeToStakingContractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StakingStakeTxResponse>>;
    /**
     * Stake to staking contract
     * Stake to staking contract
     */
    stakeToStakingContract(requestParameters: StakeToStakingContractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StakingStakeTxResponse>;
    /**
     * Withdraw staked asset
     * @summary Withdraw staked asset
     * @param {StakingWithdrawTxRequest} stakingWithdrawTxRequest Withdraw transaction request, if amount is not provided, then the whole staked amount will be withdrawn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    withdrawStakedAssetRaw(requestParameters: WithdrawStakedAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StakingWithdrawTxResponse>>;
    /**
     * Withdraw staked asset
     * Withdraw staked asset
     */
    withdrawStakedAsset(requestParameters: WithdrawStakedAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StakingWithdrawTxResponse>;
}
/**
 *
 */
export declare class StakingApi extends runtime.BaseAPI implements StakingApiInterface {
    /**
     * Collect staking reward
     * Collect staking reward
     */
    collectStakingRewardRaw(requestParameters: CollectStakingRewardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StakingCollectRewardTxResponse>>;
    /**
     * Collect staking reward
     * Collect staking reward
     */
    collectStakingReward(requestParameters: CollectStakingRewardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StakingCollectRewardTxResponse>;
    /**
     * Get staking plans
     * Get staking plans
     */
    getStakingPlansRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StakePlansResponse>>;
    /**
     * Get staking plans
     * Get staking plans
     */
    getStakingPlans(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StakePlansResponse>;
    /**
     * Get user staking stats
     * Get user staking stats
     */
    getUserStakingStatsRaw(requestParameters: GetUserStakingStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserStakesResponse>>;
    /**
     * Get user staking stats
     * Get user staking stats
     */
    getUserStakingStats(requestParameters?: GetUserStakingStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserStakesResponse>;
    /**
     * Stake to staking contract
     * Stake to staking contract
     */
    stakeToStakingContractRaw(requestParameters: StakeToStakingContractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StakingStakeTxResponse>>;
    /**
     * Stake to staking contract
     * Stake to staking contract
     */
    stakeToStakingContract(requestParameters: StakeToStakingContractRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StakingStakeTxResponse>;
    /**
     * Withdraw staked asset
     * Withdraw staked asset
     */
    withdrawStakedAssetRaw(requestParameters: WithdrawStakedAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StakingWithdrawTxResponse>>;
    /**
     * Withdraw staked asset
     * Withdraw staked asset
     */
    withdrawStakedAsset(requestParameters: WithdrawStakedAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StakingWithdrawTxResponse>;
}
//# sourceMappingURL=StakingApi.d.ts.map