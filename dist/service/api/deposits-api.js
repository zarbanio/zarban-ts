"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DepositsApi = exports.DepositsApiFactory = exports.DepositsApiFp = exports.DepositsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// URLSearchParams not necessarily used
// @ts-ignore
const url_1 = require("url");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * DepositsApi - axios parameter creator
 * @export
 */
const DepositsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get user deposits of Lendingpool
         * @summary Get user deposits of Lendingpool
         * @param {string} [user] Ethereum address of the user
         * @param {string} [reserve] Ethereum address of the reserve
         * @param {number} [cursor] Cursor for pagination
         * @param {number} [limit] Limit the number of deposits returned (default is 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDeposits: async (user, reserve, cursor, limit, options = {}) => {
            const localVarPath = `/v2/lendingpool/deposits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }
            if (reserve !== undefined) {
                localVarQueryParameter['reserve'] = reserve;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DepositsApiAxiosParamCreator = DepositsApiAxiosParamCreator;
/**
 * DepositsApi - functional programming interface
 * @export
 */
const DepositsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DepositsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get user deposits of Lendingpool
         * @summary Get user deposits of Lendingpool
         * @param {string} [user] Ethereum address of the user
         * @param {string} [reserve] Ethereum address of the reserve
         * @param {number} [cursor] Cursor for pagination
         * @param {number} [limit] Limit the number of deposits returned (default is 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserDeposits(user, reserve, cursor, limit, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserDeposits(user, reserve, cursor, limit, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DepositsApi.getUserDeposits']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.DepositsApiFp = DepositsApiFp;
/**
 * DepositsApi - factory interface
 * @export
 */
const DepositsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DepositsApiFp)(configuration);
    return {
        /**
         * Get user deposits of Lendingpool
         * @summary Get user deposits of Lendingpool
         * @param {string} [user] Ethereum address of the user
         * @param {string} [reserve] Ethereum address of the reserve
         * @param {number} [cursor] Cursor for pagination
         * @param {number} [limit] Limit the number of deposits returned (default is 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDeposits(user, reserve, cursor, limit, options) {
            return localVarFp.getUserDeposits(user, reserve, cursor, limit, options).then((request) => request(axios, basePath));
        },
    };
};
exports.DepositsApiFactory = DepositsApiFactory;
/**
 * DepositsApi - object-oriented interface
 * @export
 * @class DepositsApi
 * @extends {BaseAPI}
 */
class DepositsApi extends base_1.BaseAPI {
    /**
     * Get user deposits of Lendingpool
     * @summary Get user deposits of Lendingpool
     * @param {string} [user] Ethereum address of the user
     * @param {string} [reserve] Ethereum address of the reserve
     * @param {number} [cursor] Cursor for pagination
     * @param {number} [limit] Limit the number of deposits returned (default is 50)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepositsApi
     */
    getUserDeposits(user, reserve, cursor, limit, options) {
        return (0, exports.DepositsApiFp)(this.configuration).getUserDeposits(user, reserve, cursor, limit, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DepositsApi = DepositsApi;
