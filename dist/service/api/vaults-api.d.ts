/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { Vault } from '../model';
import type { VaultEventsResponse } from '../model';
import type { VaultsResponse } from '../model';
/**
 * VaultsApi - axios parameter creator
 * @export
 */
export declare const VaultsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get a vault by ID
     * @param {number} id Vault ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultById: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get vault events by ID
     * @param {number} id Vault ID
     * @param {GetVaultEventsByIdTypeEnum} [type] Event type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultEventsById: (id: number, type?: GetVaultEventsByIdTypeEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get vaults by owner query
     * @param {string} [owner] Ethereum address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultsByOwner: (owner?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * VaultsApi - functional programming interface
 * @export
 */
export declare const VaultsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get a vault by ID
     * @param {number} id Vault ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vault>>;
    /**
     *
     * @summary Get vault events by ID
     * @param {number} id Vault ID
     * @param {GetVaultEventsByIdTypeEnum} [type] Event type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultEventsById(id: number, type?: GetVaultEventsByIdTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultEventsResponse>>;
    /**
     *
     * @summary Get vaults by owner query
     * @param {string} [owner] Ethereum address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultsByOwner(owner?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultsResponse>>;
};
/**
 * VaultsApi - factory interface
 * @export
 */
export declare const VaultsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get a vault by ID
     * @param {number} id Vault ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Vault>;
    /**
     *
     * @summary Get vault events by ID
     * @param {number} id Vault ID
     * @param {GetVaultEventsByIdTypeEnum} [type] Event type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultEventsById(id: number, type?: GetVaultEventsByIdTypeEnum, options?: RawAxiosRequestConfig): AxiosPromise<VaultEventsResponse>;
    /**
     *
     * @summary Get vaults by owner query
     * @param {string} [owner] Ethereum address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultsByOwner(owner?: string, options?: RawAxiosRequestConfig): AxiosPromise<VaultsResponse>;
};
/**
 * VaultsApi - interface
 * @export
 * @interface VaultsApi
 */
export interface VaultsApiInterface {
    /**
     *
     * @summary Get a vault by ID
     * @param {number} id Vault ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApiInterface
     */
    getVaultById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Vault>;
    /**
     *
     * @summary Get vault events by ID
     * @param {number} id Vault ID
     * @param {GetVaultEventsByIdTypeEnum} [type] Event type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApiInterface
     */
    getVaultEventsById(id: number, type?: GetVaultEventsByIdTypeEnum, options?: RawAxiosRequestConfig): AxiosPromise<VaultEventsResponse>;
    /**
     *
     * @summary Get vaults by owner query
     * @param {string} [owner] Ethereum address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApiInterface
     */
    getVaultsByOwner(owner?: string, options?: RawAxiosRequestConfig): AxiosPromise<VaultsResponse>;
}
/**
 * VaultsApi - object-oriented interface
 * @export
 * @class VaultsApi
 * @extends {BaseAPI}
 */
export declare class VaultsApi extends BaseAPI implements VaultsApiInterface {
    /**
     *
     * @summary Get a vault by ID
     * @param {number} id Vault ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    getVaultById(id: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Vault, any>>;
    /**
     *
     * @summary Get vault events by ID
     * @param {number} id Vault ID
     * @param {GetVaultEventsByIdTypeEnum} [type] Event type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    getVaultEventsById(id: number, type?: GetVaultEventsByIdTypeEnum, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VaultEventsResponse, any>>;
    /**
     *
     * @summary Get vaults by owner query
     * @param {string} [owner] Ethereum address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    getVaultsByOwner(owner?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VaultsResponse, any>>;
}
/**
 * @export
 */
export declare const GetVaultEventsByIdTypeEnum: {
    readonly REPAY: "repay";
    readonly DEPOSIT: "deposit";
    readonly WITHDRAW: "withdraw";
    readonly MINT: "mint";
};
export type GetVaultEventsByIdTypeEnum = typeof GetVaultEventsByIdTypeEnum[keyof typeof GetVaultEventsByIdTypeEnum];
//# sourceMappingURL=vaults-api.d.ts.map