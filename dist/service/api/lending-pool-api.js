"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LendingPoolApi = exports.LendingPoolApiFactory = exports.LendingPoolApiFp = exports.LendingPoolApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// URLSearchParams not necessarily used
// @ts-ignore
const url_1 = require("url");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * LendingPoolApi - axios parameter creator
 * @export
 */
const LendingPoolApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Borrow from lending pool
         * @summary Borrow from lending pool
         * @param {LendingpoolBorrowTxRequest} lendingpoolBorrowTxRequest Borrow transaction request, if amount is not provided, it will be calculated based on the token balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLendingPoolBorrow: async (lendingpoolBorrowTxRequest, options = {}) => {
            // verify required parameter 'lendingpoolBorrowTxRequest' is not null or undefined
            (0, common_1.assertParamExists)('createLendingPoolBorrow', 'lendingpoolBorrowTxRequest', lendingpoolBorrowTxRequest);
            const localVarPath = `/v2/lendingpool/tx/borrow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(lendingpoolBorrowTxRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deposit to lending pool
         * @summary Deposit to lending pool
         * @param {LendingpoolDepositTxRequest} lendingpoolDepositTxRequest Deposit transaction request, if amount is not provided, it will be calculated based on the token balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLendingPoolDeposit: async (lendingpoolDepositTxRequest, options = {}) => {
            // verify required parameter 'lendingpoolDepositTxRequest' is not null or undefined
            (0, common_1.assertParamExists)('createLendingPoolDeposit', 'lendingpoolDepositTxRequest', lendingpoolDepositTxRequest);
            const localVarPath = `/v2/lendingpool/tx/deposit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(lendingpoolDepositTxRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Repay to lending pool
         * @summary Repay to lending pool
         * @param {LendingpoolRepayTxRequest} lendingpoolRepayTxRequest Repay transaction request, if amount is not provided, it will repay the maximum possible amount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLendingPoolRepay: async (lendingpoolRepayTxRequest, options = {}) => {
            // verify required parameter 'lendingpoolRepayTxRequest' is not null or undefined
            (0, common_1.assertParamExists)('createLendingPoolRepay', 'lendingpoolRepayTxRequest', lendingpoolRepayTxRequest);
            const localVarPath = `/v2/lendingpool/tx/repay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(lendingpoolRepayTxRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Withdraw from lending pool
         * @summary Withdraw from lending pool
         * @param {LendingpoolWithdrawTxRequest} lendingpoolWithdrawTxRequest Withdraw transaction request, if amount is not provided, it will be calculated based on the user account status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLendingPoolWithdraw: async (lendingpoolWithdrawTxRequest, options = {}) => {
            // verify required parameter 'lendingpoolWithdrawTxRequest' is not null or undefined
            (0, common_1.assertParamExists)('createLendingPoolWithdraw', 'lendingpoolWithdrawTxRequest', lendingpoolWithdrawTxRequest);
            const localVarPath = `/v2/lendingpool/tx/withdraw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(lendingpoolWithdrawTxRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve data of reserves
         * @summary Fetch Reserve Data By Asset
         * @param {string} [asset] The asset address in hexadecimal format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchReserveDataByAsset: async (asset, options = {}) => {
            const localVarPath = `/v2/lendingpool/reserves`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user borrows of lendingpool
         * @summary Get user borrows of lendingpool
         * @param {string} [user] Ethereum address of the user
         * @param {string} [reserve] Ethereum address of the reserve
         * @param {number} [cursor] Cursor for pagination
         * @param {number} [limit] Limit the number of deposits returned (default is 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserBorrows: async (user, reserve, cursor, limit, options = {}) => {
            const localVarPath = `/v2/lendingpool/borrows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }
            if (reserve !== undefined) {
                localVarQueryParameter['reserve'] = reserve;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user deposits of Lendingpool
         * @summary Get user deposits of Lendingpool
         * @param {string} [user] Ethereum address of the user
         * @param {string} [reserve] Ethereum address of the reserve
         * @param {number} [cursor] Cursor for pagination
         * @param {number} [limit] Limit the number of deposits returned (default is 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDeposits: async (user, reserve, cursor, limit, options = {}) => {
            const localVarPath = `/v2/lendingpool/deposits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }
            if (reserve !== undefined) {
                localVarQueryParameter['reserve'] = reserve;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows to enable/disable a specific asset as collateral
         * @summary Enable/Disable asset as collateral
         * @param {LendingpoolUseAssetAsCollateralTxRequest} lendingpoolUseAssetAsCollateralTxRequest UseAssetAsCollateral transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLendingPoolAssetCollateral: async (lendingpoolUseAssetAsCollateralTxRequest, options = {}) => {
            // verify required parameter 'lendingpoolUseAssetAsCollateralTxRequest' is not null or undefined
            (0, common_1.assertParamExists)('setLendingPoolAssetCollateral', 'lendingpoolUseAssetAsCollateralTxRequest', lendingpoolUseAssetAsCollateralTxRequest);
            const localVarPath = `/v2/lendingpool/tx/useassetascollateral`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new url_1.URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(lendingpoolUseAssetAsCollateralTxRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.LendingPoolApiAxiosParamCreator = LendingPoolApiAxiosParamCreator;
/**
 * LendingPoolApi - functional programming interface
 * @export
 */
const LendingPoolApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.LendingPoolApiAxiosParamCreator)(configuration);
    return {
        /**
         * Borrow from lending pool
         * @summary Borrow from lending pool
         * @param {LendingpoolBorrowTxRequest} lendingpoolBorrowTxRequest Borrow transaction request, if amount is not provided, it will be calculated based on the token balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLendingPoolBorrow(lendingpoolBorrowTxRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLendingPoolBorrow(lendingpoolBorrowTxRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['LendingPoolApi.createLendingPoolBorrow']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deposit to lending pool
         * @summary Deposit to lending pool
         * @param {LendingpoolDepositTxRequest} lendingpoolDepositTxRequest Deposit transaction request, if amount is not provided, it will be calculated based on the token balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLendingPoolDeposit(lendingpoolDepositTxRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLendingPoolDeposit(lendingpoolDepositTxRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['LendingPoolApi.createLendingPoolDeposit']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Repay to lending pool
         * @summary Repay to lending pool
         * @param {LendingpoolRepayTxRequest} lendingpoolRepayTxRequest Repay transaction request, if amount is not provided, it will repay the maximum possible amount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLendingPoolRepay(lendingpoolRepayTxRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLendingPoolRepay(lendingpoolRepayTxRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['LendingPoolApi.createLendingPoolRepay']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Withdraw from lending pool
         * @summary Withdraw from lending pool
         * @param {LendingpoolWithdrawTxRequest} lendingpoolWithdrawTxRequest Withdraw transaction request, if amount is not provided, it will be calculated based on the user account status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLendingPoolWithdraw(lendingpoolWithdrawTxRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLendingPoolWithdraw(lendingpoolWithdrawTxRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['LendingPoolApi.createLendingPoolWithdraw']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve data of reserves
         * @summary Fetch Reserve Data By Asset
         * @param {string} [asset] The asset address in hexadecimal format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchReserveDataByAsset(asset, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchReserveDataByAsset(asset, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['LendingPoolApi.fetchReserveDataByAsset']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get user borrows of lendingpool
         * @summary Get user borrows of lendingpool
         * @param {string} [user] Ethereum address of the user
         * @param {string} [reserve] Ethereum address of the reserve
         * @param {number} [cursor] Cursor for pagination
         * @param {number} [limit] Limit the number of deposits returned (default is 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserBorrows(user, reserve, cursor, limit, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserBorrows(user, reserve, cursor, limit, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['LendingPoolApi.getUserBorrows']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get user deposits of Lendingpool
         * @summary Get user deposits of Lendingpool
         * @param {string} [user] Ethereum address of the user
         * @param {string} [reserve] Ethereum address of the reserve
         * @param {number} [cursor] Cursor for pagination
         * @param {number} [limit] Limit the number of deposits returned (default is 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserDeposits(user, reserve, cursor, limit, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserDeposits(user, reserve, cursor, limit, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['LendingPoolApi.getUserDeposits']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Allows to enable/disable a specific asset as collateral
         * @summary Enable/Disable asset as collateral
         * @param {LendingpoolUseAssetAsCollateralTxRequest} lendingpoolUseAssetAsCollateralTxRequest UseAssetAsCollateral transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setLendingPoolAssetCollateral(lendingpoolUseAssetAsCollateralTxRequest, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.setLendingPoolAssetCollateral(lendingpoolUseAssetAsCollateralTxRequest, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['LendingPoolApi.setLendingPoolAssetCollateral']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.LendingPoolApiFp = LendingPoolApiFp;
/**
 * LendingPoolApi - factory interface
 * @export
 */
const LendingPoolApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.LendingPoolApiFp)(configuration);
    return {
        /**
         * Borrow from lending pool
         * @summary Borrow from lending pool
         * @param {LendingpoolBorrowTxRequest} lendingpoolBorrowTxRequest Borrow transaction request, if amount is not provided, it will be calculated based on the token balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLendingPoolBorrow(lendingpoolBorrowTxRequest, options) {
            return localVarFp.createLendingPoolBorrow(lendingpoolBorrowTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deposit to lending pool
         * @summary Deposit to lending pool
         * @param {LendingpoolDepositTxRequest} lendingpoolDepositTxRequest Deposit transaction request, if amount is not provided, it will be calculated based on the token balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLendingPoolDeposit(lendingpoolDepositTxRequest, options) {
            return localVarFp.createLendingPoolDeposit(lendingpoolDepositTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Repay to lending pool
         * @summary Repay to lending pool
         * @param {LendingpoolRepayTxRequest} lendingpoolRepayTxRequest Repay transaction request, if amount is not provided, it will repay the maximum possible amount
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLendingPoolRepay(lendingpoolRepayTxRequest, options) {
            return localVarFp.createLendingPoolRepay(lendingpoolRepayTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Withdraw from lending pool
         * @summary Withdraw from lending pool
         * @param {LendingpoolWithdrawTxRequest} lendingpoolWithdrawTxRequest Withdraw transaction request, if amount is not provided, it will be calculated based on the user account status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLendingPoolWithdraw(lendingpoolWithdrawTxRequest, options) {
            return localVarFp.createLendingPoolWithdraw(lendingpoolWithdrawTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve data of reserves
         * @summary Fetch Reserve Data By Asset
         * @param {string} [asset] The asset address in hexadecimal format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchReserveDataByAsset(asset, options) {
            return localVarFp.fetchReserveDataByAsset(asset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user borrows of lendingpool
         * @summary Get user borrows of lendingpool
         * @param {string} [user] Ethereum address of the user
         * @param {string} [reserve] Ethereum address of the reserve
         * @param {number} [cursor] Cursor for pagination
         * @param {number} [limit] Limit the number of deposits returned (default is 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserBorrows(user, reserve, cursor, limit, options) {
            return localVarFp.getUserBorrows(user, reserve, cursor, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user deposits of Lendingpool
         * @summary Get user deposits of Lendingpool
         * @param {string} [user] Ethereum address of the user
         * @param {string} [reserve] Ethereum address of the reserve
         * @param {number} [cursor] Cursor for pagination
         * @param {number} [limit] Limit the number of deposits returned (default is 50)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDeposits(user, reserve, cursor, limit, options) {
            return localVarFp.getUserDeposits(user, reserve, cursor, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows to enable/disable a specific asset as collateral
         * @summary Enable/Disable asset as collateral
         * @param {LendingpoolUseAssetAsCollateralTxRequest} lendingpoolUseAssetAsCollateralTxRequest UseAssetAsCollateral transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLendingPoolAssetCollateral(lendingpoolUseAssetAsCollateralTxRequest, options) {
            return localVarFp.setLendingPoolAssetCollateral(lendingpoolUseAssetAsCollateralTxRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.LendingPoolApiFactory = LendingPoolApiFactory;
/**
 * LendingPoolApi - object-oriented interface
 * @export
 * @class LendingPoolApi
 * @extends {BaseAPI}
 */
class LendingPoolApi extends base_1.BaseAPI {
    /**
     * Borrow from lending pool
     * @summary Borrow from lending pool
     * @param {LendingpoolBorrowTxRequest} lendingpoolBorrowTxRequest Borrow transaction request, if amount is not provided, it will be calculated based on the token balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApi
     */
    createLendingPoolBorrow(lendingpoolBorrowTxRequest, options) {
        return (0, exports.LendingPoolApiFp)(this.configuration).createLendingPoolBorrow(lendingpoolBorrowTxRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deposit to lending pool
     * @summary Deposit to lending pool
     * @param {LendingpoolDepositTxRequest} lendingpoolDepositTxRequest Deposit transaction request, if amount is not provided, it will be calculated based on the token balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApi
     */
    createLendingPoolDeposit(lendingpoolDepositTxRequest, options) {
        return (0, exports.LendingPoolApiFp)(this.configuration).createLendingPoolDeposit(lendingpoolDepositTxRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Repay to lending pool
     * @summary Repay to lending pool
     * @param {LendingpoolRepayTxRequest} lendingpoolRepayTxRequest Repay transaction request, if amount is not provided, it will repay the maximum possible amount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApi
     */
    createLendingPoolRepay(lendingpoolRepayTxRequest, options) {
        return (0, exports.LendingPoolApiFp)(this.configuration).createLendingPoolRepay(lendingpoolRepayTxRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Withdraw from lending pool
     * @summary Withdraw from lending pool
     * @param {LendingpoolWithdrawTxRequest} lendingpoolWithdrawTxRequest Withdraw transaction request, if amount is not provided, it will be calculated based on the user account status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApi
     */
    createLendingPoolWithdraw(lendingpoolWithdrawTxRequest, options) {
        return (0, exports.LendingPoolApiFp)(this.configuration).createLendingPoolWithdraw(lendingpoolWithdrawTxRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve data of reserves
     * @summary Fetch Reserve Data By Asset
     * @param {string} [asset] The asset address in hexadecimal format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApi
     */
    fetchReserveDataByAsset(asset, options) {
        return (0, exports.LendingPoolApiFp)(this.configuration).fetchReserveDataByAsset(asset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get user borrows of lendingpool
     * @summary Get user borrows of lendingpool
     * @param {string} [user] Ethereum address of the user
     * @param {string} [reserve] Ethereum address of the reserve
     * @param {number} [cursor] Cursor for pagination
     * @param {number} [limit] Limit the number of deposits returned (default is 50)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApi
     */
    getUserBorrows(user, reserve, cursor, limit, options) {
        return (0, exports.LendingPoolApiFp)(this.configuration).getUserBorrows(user, reserve, cursor, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get user deposits of Lendingpool
     * @summary Get user deposits of Lendingpool
     * @param {string} [user] Ethereum address of the user
     * @param {string} [reserve] Ethereum address of the reserve
     * @param {number} [cursor] Cursor for pagination
     * @param {number} [limit] Limit the number of deposits returned (default is 50)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApi
     */
    getUserDeposits(user, reserve, cursor, limit, options) {
        return (0, exports.LendingPoolApiFp)(this.configuration).getUserDeposits(user, reserve, cursor, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Allows to enable/disable a specific asset as collateral
     * @summary Enable/Disable asset as collateral
     * @param {LendingpoolUseAssetAsCollateralTxRequest} lendingpoolUseAssetAsCollateralTxRequest UseAssetAsCollateral transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LendingPoolApi
     */
    setLendingPoolAssetCollateral(lendingpoolUseAssetAsCollateralTxRequest, options) {
        return (0, exports.LendingPoolApiFp)(this.configuration).setLendingPoolAssetCollateral(lendingpoolUseAssetAsCollateralTxRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.LendingPoolApi = LendingPoolApi;
