/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { OrderResponse } from '../model';
import type { TimeRange } from '../model';
import type { UpdateOrderRequest } from '../model';
/**
 * OrdersApi - axios parameter creator
 * @export
 */
export declare const OrdersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get a list of unfilled orders filtered by different parameters.
     * @summary Fetch Unfilled Orders
     * @param {GetUnfilledOrdersTypeEnum} [type] Type of the order
     * @param {string} [hash] order hash
     * @param {GetUnfilledOrdersStatusEnum} [status] Status of the order
     * @param {string} [offerer] Ethereum address of the offerer
     * @param {string} [filler] Ethereum address of the filler
     * @param {TimeRange} [decayStartTime] Decay start time
     * @param {TimeRange} [decayEndTime] Decay end time
     * @param {TimeRange} [deadline] Order deadline
     * @param {number} [cursor] Cursor for pagination
     * @param {number} [limit] Limit the number of orders returned (default is 10)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnfilledOrders: (type?: GetUnfilledOrdersTypeEnum, hash?: string, status?: GetUnfilledOrdersStatusEnum, offerer?: string, filler?: string, decayStartTime?: TimeRange, decayEndTime?: TimeRange, deadline?: TimeRange, cursor?: number, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * updates an order entity in database
     * @summary Updates Order Entity
     * @param {UpdateOrderRequest} updateOrderRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    syncOrder: (updateOrderRequest: UpdateOrderRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OrdersApi - functional programming interface
 * @export
 */
export declare const OrdersApiFp: (configuration?: Configuration) => {
    /**
     * Get a list of unfilled orders filtered by different parameters.
     * @summary Fetch Unfilled Orders
     * @param {GetUnfilledOrdersTypeEnum} [type] Type of the order
     * @param {string} [hash] order hash
     * @param {GetUnfilledOrdersStatusEnum} [status] Status of the order
     * @param {string} [offerer] Ethereum address of the offerer
     * @param {string} [filler] Ethereum address of the filler
     * @param {TimeRange} [decayStartTime] Decay start time
     * @param {TimeRange} [decayEndTime] Decay end time
     * @param {TimeRange} [deadline] Order deadline
     * @param {number} [cursor] Cursor for pagination
     * @param {number} [limit] Limit the number of orders returned (default is 10)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnfilledOrders(type?: GetUnfilledOrdersTypeEnum, hash?: string, status?: GetUnfilledOrdersStatusEnum, offerer?: string, filler?: string, decayStartTime?: TimeRange, decayEndTime?: TimeRange, deadline?: TimeRange, cursor?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResponse>>;
    /**
     * updates an order entity in database
     * @summary Updates Order Entity
     * @param {UpdateOrderRequest} updateOrderRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    syncOrder(updateOrderRequest: UpdateOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>>;
};
/**
 * OrdersApi - factory interface
 * @export
 */
export declare const OrdersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get a list of unfilled orders filtered by different parameters.
     * @summary Fetch Unfilled Orders
     * @param {GetUnfilledOrdersTypeEnum} [type] Type of the order
     * @param {string} [hash] order hash
     * @param {GetUnfilledOrdersStatusEnum} [status] Status of the order
     * @param {string} [offerer] Ethereum address of the offerer
     * @param {string} [filler] Ethereum address of the filler
     * @param {TimeRange} [decayStartTime] Decay start time
     * @param {TimeRange} [decayEndTime] Decay end time
     * @param {TimeRange} [deadline] Order deadline
     * @param {number} [cursor] Cursor for pagination
     * @param {number} [limit] Limit the number of orders returned (default is 10)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnfilledOrders(type?: GetUnfilledOrdersTypeEnum, hash?: string, status?: GetUnfilledOrdersStatusEnum, offerer?: string, filler?: string, decayStartTime?: TimeRange, decayEndTime?: TimeRange, deadline?: TimeRange, cursor?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponse>;
    /**
     * updates an order entity in database
     * @summary Updates Order Entity
     * @param {UpdateOrderRequest} updateOrderRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    syncOrder(updateOrderRequest: UpdateOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<Error>;
};
/**
 * OrdersApi - interface
 * @export
 * @interface OrdersApi
 */
export interface OrdersApiInterface {
    /**
     * Get a list of unfilled orders filtered by different parameters.
     * @summary Fetch Unfilled Orders
     * @param {GetUnfilledOrdersTypeEnum} [type] Type of the order
     * @param {string} [hash] order hash
     * @param {GetUnfilledOrdersStatusEnum} [status] Status of the order
     * @param {string} [offerer] Ethereum address of the offerer
     * @param {string} [filler] Ethereum address of the filler
     * @param {TimeRange} [decayStartTime] Decay start time
     * @param {TimeRange} [decayEndTime] Decay end time
     * @param {TimeRange} [deadline] Order deadline
     * @param {number} [cursor] Cursor for pagination
     * @param {number} [limit] Limit the number of orders returned (default is 10)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    getUnfilledOrders(type?: GetUnfilledOrdersTypeEnum, hash?: string, status?: GetUnfilledOrdersStatusEnum, offerer?: string, filler?: string, decayStartTime?: TimeRange, decayEndTime?: TimeRange, deadline?: TimeRange, cursor?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<OrderResponse>;
    /**
     * updates an order entity in database
     * @summary Updates Order Entity
     * @param {UpdateOrderRequest} updateOrderRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiInterface
     */
    syncOrder(updateOrderRequest: UpdateOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<Error>;
}
/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export declare class OrdersApi extends BaseAPI implements OrdersApiInterface {
    /**
     * Get a list of unfilled orders filtered by different parameters.
     * @summary Fetch Unfilled Orders
     * @param {GetUnfilledOrdersTypeEnum} [type] Type of the order
     * @param {string} [hash] order hash
     * @param {GetUnfilledOrdersStatusEnum} [status] Status of the order
     * @param {string} [offerer] Ethereum address of the offerer
     * @param {string} [filler] Ethereum address of the filler
     * @param {TimeRange} [decayStartTime] Decay start time
     * @param {TimeRange} [decayEndTime] Decay end time
     * @param {TimeRange} [deadline] Order deadline
     * @param {number} [cursor] Cursor for pagination
     * @param {number} [limit] Limit the number of orders returned (default is 10)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getUnfilledOrders(type?: GetUnfilledOrdersTypeEnum, hash?: string, status?: GetUnfilledOrdersStatusEnum, offerer?: string, filler?: string, decayStartTime?: TimeRange, decayEndTime?: TimeRange, deadline?: TimeRange, cursor?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<globalAxios.AxiosResponse<OrderResponse, any>>;
    /**
     * updates an order entity in database
     * @summary Updates Order Entity
     * @param {UpdateOrderRequest} updateOrderRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    syncOrder(updateOrderRequest: UpdateOrderRequest, options?: RawAxiosRequestConfig): Promise<globalAxios.AxiosResponse<Error, any>>;
}
/**
 * @export
 */
export declare const GetUnfilledOrdersTypeEnum: {
    readonly LIMIT: "limit";
    readonly DUTCH: "dutch";
};
export type GetUnfilledOrdersTypeEnum = typeof GetUnfilledOrdersTypeEnum[keyof typeof GetUnfilledOrdersTypeEnum];
/**
 * @export
 */
export declare const GetUnfilledOrdersStatusEnum: {
    readonly OPEN: "open";
    readonly EXPIRED: "expired";
    readonly ERROR: "error";
    readonly CANCELLED: "cancelled";
    readonly FILLED: "filled";
    readonly INSUFFICIENT_FUNDS: "insufficient-funds";
};
export type GetUnfilledOrdersStatusEnum = typeof GetUnfilledOrdersStatusEnum[keyof typeof GetUnfilledOrdersStatusEnum];
//# sourceMappingURL=orders-api.d.ts.map