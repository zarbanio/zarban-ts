/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from '../base';
/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get a list of unfilled orders filtered by different parameters.
         * @summary Fetch Unfilled Orders
         * @param {GetUnfilledOrdersTypeEnum} [type] Type of the order
         * @param {string} [hash] order hash
         * @param {GetUnfilledOrdersStatusEnum} [status] Status of the order
         * @param {string} [offerer] Ethereum address of the offerer
         * @param {string} [filler] Ethereum address of the filler
         * @param {TimeRange} [decayStartTime] Decay start time
         * @param {TimeRange} [decayEndTime] Decay end time
         * @param {TimeRange} [deadline] Order deadline
         * @param {number} [cursor] Cursor for pagination
         * @param {number} [limit] Limit the number of orders returned (default is 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnfilledOrders: async (type, hash, status, offerer, filler, decayStartTime, decayEndTime, deadline, cursor, limit, options = {}) => {
            const localVarPath = `/v2/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (hash !== undefined) {
                localVarQueryParameter['hash'] = hash;
            }
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (offerer !== undefined) {
                localVarQueryParameter['offerer'] = offerer;
            }
            if (filler !== undefined) {
                localVarQueryParameter['filler'] = filler;
            }
            if (decayStartTime !== undefined) {
                for (const [key, value] of Object.entries(decayStartTime)) {
                    localVarQueryParameter[key] = value;
                }
            }
            if (decayEndTime !== undefined) {
                for (const [key, value] of Object.entries(decayEndTime)) {
                    localVarQueryParameter[key] = value;
                }
            }
            if (deadline !== undefined) {
                for (const [key, value] of Object.entries(deadline)) {
                    localVarQueryParameter[key] = value;
                }
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * updates an order entity in database
         * @summary Updates Order Entity
         * @param {UpdateOrderRequest} updateOrderRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncOrder: async (updateOrderRequest, options = {}) => {
            // verify required parameter 'updateOrderRequest' is not null or undefined
            assertParamExists('syncOrder', 'updateOrderRequest', updateOrderRequest);
            const localVarPath = `/v2/orders/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(updateOrderRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function (configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration);
    return {
        /**
         * Get a list of unfilled orders filtered by different parameters.
         * @summary Fetch Unfilled Orders
         * @param {GetUnfilledOrdersTypeEnum} [type] Type of the order
         * @param {string} [hash] order hash
         * @param {GetUnfilledOrdersStatusEnum} [status] Status of the order
         * @param {string} [offerer] Ethereum address of the offerer
         * @param {string} [filler] Ethereum address of the filler
         * @param {TimeRange} [decayStartTime] Decay start time
         * @param {TimeRange} [decayEndTime] Decay end time
         * @param {TimeRange} [deadline] Order deadline
         * @param {number} [cursor] Cursor for pagination
         * @param {number} [limit] Limit the number of orders returned (default is 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnfilledOrders(type, hash, status, offerer, filler, decayStartTime, decayEndTime, deadline, cursor, limit, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnfilledOrders(type, hash, status, offerer, filler, decayStartTime, decayEndTime, deadline, cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.getUnfilledOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * updates an order entity in database
         * @summary Updates Order Entity
         * @param {UpdateOrderRequest} updateOrderRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async syncOrder(updateOrderRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.syncOrder(updateOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.syncOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = OrdersApiFp(configuration);
    return {
        /**
         * Get a list of unfilled orders filtered by different parameters.
         * @summary Fetch Unfilled Orders
         * @param {GetUnfilledOrdersTypeEnum} [type] Type of the order
         * @param {string} [hash] order hash
         * @param {GetUnfilledOrdersStatusEnum} [status] Status of the order
         * @param {string} [offerer] Ethereum address of the offerer
         * @param {string} [filler] Ethereum address of the filler
         * @param {TimeRange} [decayStartTime] Decay start time
         * @param {TimeRange} [decayEndTime] Decay end time
         * @param {TimeRange} [deadline] Order deadline
         * @param {number} [cursor] Cursor for pagination
         * @param {number} [limit] Limit the number of orders returned (default is 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnfilledOrders(type, hash, status, offerer, filler, decayStartTime, decayEndTime, deadline, cursor, limit, options) {
            return localVarFp.getUnfilledOrders(type, hash, status, offerer, filler, decayStartTime, decayEndTime, deadline, cursor, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * updates an order entity in database
         * @summary Updates Order Entity
         * @param {UpdateOrderRequest} updateOrderRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncOrder(updateOrderRequest, options) {
            return localVarFp.syncOrder(updateOrderRequest, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * Get a list of unfilled orders filtered by different parameters.
     * @summary Fetch Unfilled Orders
     * @param {GetUnfilledOrdersTypeEnum} [type] Type of the order
     * @param {string} [hash] order hash
     * @param {GetUnfilledOrdersStatusEnum} [status] Status of the order
     * @param {string} [offerer] Ethereum address of the offerer
     * @param {string} [filler] Ethereum address of the filler
     * @param {TimeRange} [decayStartTime] Decay start time
     * @param {TimeRange} [decayEndTime] Decay end time
     * @param {TimeRange} [deadline] Order deadline
     * @param {number} [cursor] Cursor for pagination
     * @param {number} [limit] Limit the number of orders returned (default is 10)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    getUnfilledOrders(type, hash, status, offerer, filler, decayStartTime, decayEndTime, deadline, cursor, limit, options) {
        return OrdersApiFp(this.configuration).getUnfilledOrders(type, hash, status, offerer, filler, decayStartTime, decayEndTime, deadline, cursor, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * updates an order entity in database
     * @summary Updates Order Entity
     * @param {UpdateOrderRequest} updateOrderRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    syncOrder(updateOrderRequest, options) {
        return OrdersApiFp(this.configuration).syncOrder(updateOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * @export
 */
export const GetUnfilledOrdersTypeEnum = {
    LIMIT: 'limit',
    DUTCH: 'dutch'
};
/**
 * @export
 */
export const GetUnfilledOrdersStatusEnum = {
    OPEN: 'open',
    EXPIRED: 'expired',
    ERROR: 'error',
    CANCELLED: 'cancelled',
    FILLED: 'filled',
    INSUFFICIENT_FUNDS: 'insufficient-funds'
};
//# sourceMappingURL=orders-api.js.map