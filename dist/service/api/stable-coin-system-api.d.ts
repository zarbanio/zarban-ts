/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { ChainActivity } from '../model';
import type { Ilk } from '../model';
import type { IlksResponse } from '../model';
import type { StablecoinSystemBarkTxRequest } from '../model';
import type { StablecoinSystemCreateVaultTxRequest } from '../model';
import type { StablecoinSystemDepositCollateralTxRequest } from '../model';
import type { StablecoinSystemGemexitTxRequest } from '../model';
import type { StablecoinSystemMintZarTxRequest } from '../model';
import type { StablecoinSystemRedoTxRequest } from '../model';
import type { StablecoinSystemRepayZarTxRequest } from '../model';
import type { StablecoinSystemTakeTxRequest } from '../model';
import type { StablecoinSystemWithdrawCollateralTxRequest } from '../model';
import type { StablecoinSystemZarexitTxRequest } from '../model';
import type { StablecoinSystemZarjoinTxRequest } from '../model';
import type { Stats } from '../model';
import type { Vault } from '../model';
import type { VaultEventsResponse } from '../model';
import type { VaultsResponse } from '../model';
/**
 * StableCoinSystemApi - axios parameter creator
 * @export
 */
export declare const StableCoinSystemApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * approve and join ZAR token into Vat contract
     * @summary approve and join ZAR token into Vat contract
     * @param {StablecoinSystemZarjoinTxRequest} stablecoinSystemZarjoinTxRequest Approve and join Zar token into Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approveAndJoinZarTransaction: (stablecoinSystemZarjoinTxRequest: StablecoinSystemZarjoinTxRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create vault
     * @summary Create vault
     * @param {StablecoinSystemCreateVaultTxRequest} stablecoinSystemCreateVaultTxRequest Create vault transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStableCoinVault: (stablecoinSystemCreateVaultTxRequest: StablecoinSystemCreateVaultTxRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deposit collateral
     * @summary Deposit collateral
     * @param {StablecoinSystemDepositCollateralTxRequest} stablecoinSystemDepositCollateralTxRequest Deposit collateral transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    depositStableCoinCollateral: (stablecoinSystemDepositCollateralTxRequest: StablecoinSystemDepositCollateralTxRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * exit Gem token (which can be used as collateral) from Vat contract
     * @summary exit Gem token (which can be used as collateral) from Vat contract
     * @param {StablecoinSystemGemexitTxRequest} stablecoinSystemGemexitTxRequest exit Zar token from Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exitGemTransaction: (stablecoinSystemGemexitTxRequest: StablecoinSystemGemexitTxRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * exit ZAR token from Vat contract
     * @summary exit ZAR token from Vat contract
     * @param {StablecoinSystemZarexitTxRequest} stablecoinSystemZarexitTxRequest exit Zar token from Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exitZarTransaction: (stablecoinSystemZarexitTxRequest: StablecoinSystemZarexitTxRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve a list of all available ilks.
     * @summary Get all Ilks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllIlks: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get collector data
     * @summary Get collector data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectorData: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve an Ilk by providing its name.
     * @summary Get Ilk by name
     * @param {string} name Name of the ILK
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIlkByName: (name: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a vault by ID
     * @param {number} id Vault ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultById: (id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get vault events by ID
     * @param {number} id Vault ID
     * @param {GetVaultEventsByIdTypeEnum} [type] Event type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultEventsById: (id: number, type?: GetVaultEventsByIdTypeEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get vaults by owner query
     * @param {string} [owner] Ethereum address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultsByOwner: (owner?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * liquidate a vault
     * @summary liquidate a vault
     * @param {StablecoinSystemBarkTxRequest} stablecoinSystemBarkTxRequest Liquidate a Vault transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    liquidateVaultTransaction: (stablecoinSystemBarkTxRequest: StablecoinSystemBarkTxRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Mint ZAR
     * @summary Mint ZAR
     * @param {StablecoinSystemMintZarTxRequest} stablecoinSystemMintZarTxRequest Mint ZAR transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintZarTransaction: (stablecoinSystemMintZarTxRequest: StablecoinSystemMintZarTxRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Repay ZAR
     * @summary Repay ZAR
     * @param {StablecoinSystemRepayZarTxRequest} stablecoinSystemRepayZarTxRequest Repay ZAR transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    repayZarTransaction: (stablecoinSystemRepayZarTxRequest: StablecoinSystemRepayZarTxRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * reset a auction
     * @summary reset a auction
     * @param {StablecoinSystemRedoTxRequest} stablecoinSystemRedoTxRequest Reset a Auction transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetAuctionTransaction: (stablecoinSystemRedoTxRequest: StablecoinSystemRedoTxRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * take a auction
     * @summary take a auction
     * @param {StablecoinSystemTakeTxRequest} stablecoinSystemTakeTxRequest Take a Auction transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeAuctionTransaction: (stablecoinSystemTakeTxRequest: StablecoinSystemTakeTxRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Withdraw collateral
     * @summary Withdraw collateral
     * @param {StablecoinSystemWithdrawCollateralTxRequest} stablecoinSystemWithdrawCollateralTxRequest Withdraw collateral transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    withdrawCollateralTransaction: (stablecoinSystemWithdrawCollateralTxRequest: StablecoinSystemWithdrawCollateralTxRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StableCoinSystemApi - functional programming interface
 * @export
 */
export declare const StableCoinSystemApiFp: (configuration?: Configuration) => {
    /**
     * approve and join ZAR token into Vat contract
     * @summary approve and join ZAR token into Vat contract
     * @param {StablecoinSystemZarjoinTxRequest} stablecoinSystemZarjoinTxRequest Approve and join Zar token into Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approveAndJoinZarTransaction(stablecoinSystemZarjoinTxRequest: StablecoinSystemZarjoinTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainActivity>>;
    /**
     * Create vault
     * @summary Create vault
     * @param {StablecoinSystemCreateVaultTxRequest} stablecoinSystemCreateVaultTxRequest Create vault transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStableCoinVault(stablecoinSystemCreateVaultTxRequest: StablecoinSystemCreateVaultTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainActivity>>;
    /**
     * Deposit collateral
     * @summary Deposit collateral
     * @param {StablecoinSystemDepositCollateralTxRequest} stablecoinSystemDepositCollateralTxRequest Deposit collateral transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    depositStableCoinCollateral(stablecoinSystemDepositCollateralTxRequest: StablecoinSystemDepositCollateralTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainActivity>>;
    /**
     * exit Gem token (which can be used as collateral) from Vat contract
     * @summary exit Gem token (which can be used as collateral) from Vat contract
     * @param {StablecoinSystemGemexitTxRequest} stablecoinSystemGemexitTxRequest exit Zar token from Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exitGemTransaction(stablecoinSystemGemexitTxRequest: StablecoinSystemGemexitTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainActivity>>;
    /**
     * exit ZAR token from Vat contract
     * @summary exit ZAR token from Vat contract
     * @param {StablecoinSystemZarexitTxRequest} stablecoinSystemZarexitTxRequest exit Zar token from Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exitZarTransaction(stablecoinSystemZarexitTxRequest: StablecoinSystemZarexitTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainActivity>>;
    /**
     * Retrieve a list of all available ilks.
     * @summary Get all Ilks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllIlks(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IlksResponse>>;
    /**
     * Get collector data
     * @summary Get collector data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectorData(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Stats>>;
    /**
     * Retrieve an Ilk by providing its name.
     * @summary Get Ilk by name
     * @param {string} name Name of the ILK
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIlkByName(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ilk>>;
    /**
     *
     * @summary Get a vault by ID
     * @param {number} id Vault ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vault>>;
    /**
     *
     * @summary Get vault events by ID
     * @param {number} id Vault ID
     * @param {GetVaultEventsByIdTypeEnum} [type] Event type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultEventsById(id: number, type?: GetVaultEventsByIdTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultEventsResponse>>;
    /**
     *
     * @summary Get vaults by owner query
     * @param {string} [owner] Ethereum address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultsByOwner(owner?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultsResponse>>;
    /**
     * liquidate a vault
     * @summary liquidate a vault
     * @param {StablecoinSystemBarkTxRequest} stablecoinSystemBarkTxRequest Liquidate a Vault transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    liquidateVaultTransaction(stablecoinSystemBarkTxRequest: StablecoinSystemBarkTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainActivity>>;
    /**
     * Mint ZAR
     * @summary Mint ZAR
     * @param {StablecoinSystemMintZarTxRequest} stablecoinSystemMintZarTxRequest Mint ZAR transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintZarTransaction(stablecoinSystemMintZarTxRequest: StablecoinSystemMintZarTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainActivity>>;
    /**
     * Repay ZAR
     * @summary Repay ZAR
     * @param {StablecoinSystemRepayZarTxRequest} stablecoinSystemRepayZarTxRequest Repay ZAR transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    repayZarTransaction(stablecoinSystemRepayZarTxRequest: StablecoinSystemRepayZarTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainActivity>>;
    /**
     * reset a auction
     * @summary reset a auction
     * @param {StablecoinSystemRedoTxRequest} stablecoinSystemRedoTxRequest Reset a Auction transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetAuctionTransaction(stablecoinSystemRedoTxRequest: StablecoinSystemRedoTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainActivity>>;
    /**
     * take a auction
     * @summary take a auction
     * @param {StablecoinSystemTakeTxRequest} stablecoinSystemTakeTxRequest Take a Auction transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeAuctionTransaction(stablecoinSystemTakeTxRequest: StablecoinSystemTakeTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainActivity>>;
    /**
     * Withdraw collateral
     * @summary Withdraw collateral
     * @param {StablecoinSystemWithdrawCollateralTxRequest} stablecoinSystemWithdrawCollateralTxRequest Withdraw collateral transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    withdrawCollateralTransaction(stablecoinSystemWithdrawCollateralTxRequest: StablecoinSystemWithdrawCollateralTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChainActivity>>;
};
/**
 * StableCoinSystemApi - factory interface
 * @export
 */
export declare const StableCoinSystemApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * approve and join ZAR token into Vat contract
     * @summary approve and join ZAR token into Vat contract
     * @param {StablecoinSystemZarjoinTxRequest} stablecoinSystemZarjoinTxRequest Approve and join Zar token into Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approveAndJoinZarTransaction(stablecoinSystemZarjoinTxRequest: StablecoinSystemZarjoinTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;
    /**
     * Create vault
     * @summary Create vault
     * @param {StablecoinSystemCreateVaultTxRequest} stablecoinSystemCreateVaultTxRequest Create vault transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStableCoinVault(stablecoinSystemCreateVaultTxRequest: StablecoinSystemCreateVaultTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;
    /**
     * Deposit collateral
     * @summary Deposit collateral
     * @param {StablecoinSystemDepositCollateralTxRequest} stablecoinSystemDepositCollateralTxRequest Deposit collateral transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    depositStableCoinCollateral(stablecoinSystemDepositCollateralTxRequest: StablecoinSystemDepositCollateralTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;
    /**
     * exit Gem token (which can be used as collateral) from Vat contract
     * @summary exit Gem token (which can be used as collateral) from Vat contract
     * @param {StablecoinSystemGemexitTxRequest} stablecoinSystemGemexitTxRequest exit Zar token from Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exitGemTransaction(stablecoinSystemGemexitTxRequest: StablecoinSystemGemexitTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;
    /**
     * exit ZAR token from Vat contract
     * @summary exit ZAR token from Vat contract
     * @param {StablecoinSystemZarexitTxRequest} stablecoinSystemZarexitTxRequest exit Zar token from Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exitZarTransaction(stablecoinSystemZarexitTxRequest: StablecoinSystemZarexitTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;
    /**
     * Retrieve a list of all available ilks.
     * @summary Get all Ilks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllIlks(options?: RawAxiosRequestConfig): AxiosPromise<IlksResponse>;
    /**
     * Get collector data
     * @summary Get collector data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCollectorData(options?: RawAxiosRequestConfig): AxiosPromise<Stats>;
    /**
     * Retrieve an Ilk by providing its name.
     * @summary Get Ilk by name
     * @param {string} name Name of the ILK
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIlkByName(name: string, options?: RawAxiosRequestConfig): AxiosPromise<Ilk>;
    /**
     *
     * @summary Get a vault by ID
     * @param {number} id Vault ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Vault>;
    /**
     *
     * @summary Get vault events by ID
     * @param {number} id Vault ID
     * @param {GetVaultEventsByIdTypeEnum} [type] Event type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultEventsById(id: number, type?: GetVaultEventsByIdTypeEnum, options?: RawAxiosRequestConfig): AxiosPromise<VaultEventsResponse>;
    /**
     *
     * @summary Get vaults by owner query
     * @param {string} [owner] Ethereum address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVaultsByOwner(owner?: string, options?: RawAxiosRequestConfig): AxiosPromise<VaultsResponse>;
    /**
     * liquidate a vault
     * @summary liquidate a vault
     * @param {StablecoinSystemBarkTxRequest} stablecoinSystemBarkTxRequest Liquidate a Vault transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    liquidateVaultTransaction(stablecoinSystemBarkTxRequest: StablecoinSystemBarkTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;
    /**
     * Mint ZAR
     * @summary Mint ZAR
     * @param {StablecoinSystemMintZarTxRequest} stablecoinSystemMintZarTxRequest Mint ZAR transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mintZarTransaction(stablecoinSystemMintZarTxRequest: StablecoinSystemMintZarTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;
    /**
     * Repay ZAR
     * @summary Repay ZAR
     * @param {StablecoinSystemRepayZarTxRequest} stablecoinSystemRepayZarTxRequest Repay ZAR transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    repayZarTransaction(stablecoinSystemRepayZarTxRequest: StablecoinSystemRepayZarTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;
    /**
     * reset a auction
     * @summary reset a auction
     * @param {StablecoinSystemRedoTxRequest} stablecoinSystemRedoTxRequest Reset a Auction transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetAuctionTransaction(stablecoinSystemRedoTxRequest: StablecoinSystemRedoTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;
    /**
     * take a auction
     * @summary take a auction
     * @param {StablecoinSystemTakeTxRequest} stablecoinSystemTakeTxRequest Take a Auction transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeAuctionTransaction(stablecoinSystemTakeTxRequest: StablecoinSystemTakeTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;
    /**
     * Withdraw collateral
     * @summary Withdraw collateral
     * @param {StablecoinSystemWithdrawCollateralTxRequest} stablecoinSystemWithdrawCollateralTxRequest Withdraw collateral transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    withdrawCollateralTransaction(stablecoinSystemWithdrawCollateralTxRequest: StablecoinSystemWithdrawCollateralTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;
};
/**
 * StableCoinSystemApi - interface
 * @export
 * @interface StableCoinSystemApi
 */
export interface StableCoinSystemApiInterface {
    /**
     * approve and join ZAR token into Vat contract
     * @summary approve and join ZAR token into Vat contract
     * @param {StablecoinSystemZarjoinTxRequest} stablecoinSystemZarjoinTxRequest Approve and join Zar token into Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    approveAndJoinZarTransaction(stablecoinSystemZarjoinTxRequest: StablecoinSystemZarjoinTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;
    /**
     * Create vault
     * @summary Create vault
     * @param {StablecoinSystemCreateVaultTxRequest} stablecoinSystemCreateVaultTxRequest Create vault transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    createStableCoinVault(stablecoinSystemCreateVaultTxRequest: StablecoinSystemCreateVaultTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;
    /**
     * Deposit collateral
     * @summary Deposit collateral
     * @param {StablecoinSystemDepositCollateralTxRequest} stablecoinSystemDepositCollateralTxRequest Deposit collateral transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    depositStableCoinCollateral(stablecoinSystemDepositCollateralTxRequest: StablecoinSystemDepositCollateralTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;
    /**
     * exit Gem token (which can be used as collateral) from Vat contract
     * @summary exit Gem token (which can be used as collateral) from Vat contract
     * @param {StablecoinSystemGemexitTxRequest} stablecoinSystemGemexitTxRequest exit Zar token from Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    exitGemTransaction(stablecoinSystemGemexitTxRequest: StablecoinSystemGemexitTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;
    /**
     * exit ZAR token from Vat contract
     * @summary exit ZAR token from Vat contract
     * @param {StablecoinSystemZarexitTxRequest} stablecoinSystemZarexitTxRequest exit Zar token from Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    exitZarTransaction(stablecoinSystemZarexitTxRequest: StablecoinSystemZarexitTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;
    /**
     * Retrieve a list of all available ilks.
     * @summary Get all Ilks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    getAllIlks(options?: RawAxiosRequestConfig): AxiosPromise<IlksResponse>;
    /**
     * Get collector data
     * @summary Get collector data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    getCollectorData(options?: RawAxiosRequestConfig): AxiosPromise<Stats>;
    /**
     * Retrieve an Ilk by providing its name.
     * @summary Get Ilk by name
     * @param {string} name Name of the ILK
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    getIlkByName(name: string, options?: RawAxiosRequestConfig): AxiosPromise<Ilk>;
    /**
     *
     * @summary Get a vault by ID
     * @param {number} id Vault ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    getVaultById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Vault>;
    /**
     *
     * @summary Get vault events by ID
     * @param {number} id Vault ID
     * @param {GetVaultEventsByIdTypeEnum} [type] Event type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    getVaultEventsById(id: number, type?: GetVaultEventsByIdTypeEnum, options?: RawAxiosRequestConfig): AxiosPromise<VaultEventsResponse>;
    /**
     *
     * @summary Get vaults by owner query
     * @param {string} [owner] Ethereum address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    getVaultsByOwner(owner?: string, options?: RawAxiosRequestConfig): AxiosPromise<VaultsResponse>;
    /**
     * liquidate a vault
     * @summary liquidate a vault
     * @param {StablecoinSystemBarkTxRequest} stablecoinSystemBarkTxRequest Liquidate a Vault transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    liquidateVaultTransaction(stablecoinSystemBarkTxRequest: StablecoinSystemBarkTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;
    /**
     * Mint ZAR
     * @summary Mint ZAR
     * @param {StablecoinSystemMintZarTxRequest} stablecoinSystemMintZarTxRequest Mint ZAR transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    mintZarTransaction(stablecoinSystemMintZarTxRequest: StablecoinSystemMintZarTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;
    /**
     * Repay ZAR
     * @summary Repay ZAR
     * @param {StablecoinSystemRepayZarTxRequest} stablecoinSystemRepayZarTxRequest Repay ZAR transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    repayZarTransaction(stablecoinSystemRepayZarTxRequest: StablecoinSystemRepayZarTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;
    /**
     * reset a auction
     * @summary reset a auction
     * @param {StablecoinSystemRedoTxRequest} stablecoinSystemRedoTxRequest Reset a Auction transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    resetAuctionTransaction(stablecoinSystemRedoTxRequest: StablecoinSystemRedoTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;
    /**
     * take a auction
     * @summary take a auction
     * @param {StablecoinSystemTakeTxRequest} stablecoinSystemTakeTxRequest Take a Auction transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    takeAuctionTransaction(stablecoinSystemTakeTxRequest: StablecoinSystemTakeTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;
    /**
     * Withdraw collateral
     * @summary Withdraw collateral
     * @param {StablecoinSystemWithdrawCollateralTxRequest} stablecoinSystemWithdrawCollateralTxRequest Withdraw collateral transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApiInterface
     */
    withdrawCollateralTransaction(stablecoinSystemWithdrawCollateralTxRequest: StablecoinSystemWithdrawCollateralTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChainActivity>;
}
/**
 * StableCoinSystemApi - object-oriented interface
 * @export
 * @class StableCoinSystemApi
 * @extends {BaseAPI}
 */
export declare class StableCoinSystemApi extends BaseAPI implements StableCoinSystemApiInterface {
    /**
     * approve and join ZAR token into Vat contract
     * @summary approve and join ZAR token into Vat contract
     * @param {StablecoinSystemZarjoinTxRequest} stablecoinSystemZarjoinTxRequest Approve and join Zar token into Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    approveAndJoinZarTransaction(stablecoinSystemZarjoinTxRequest: StablecoinSystemZarjoinTxRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChainActivity, any>>;
    /**
     * Create vault
     * @summary Create vault
     * @param {StablecoinSystemCreateVaultTxRequest} stablecoinSystemCreateVaultTxRequest Create vault transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    createStableCoinVault(stablecoinSystemCreateVaultTxRequest: StablecoinSystemCreateVaultTxRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChainActivity, any>>;
    /**
     * Deposit collateral
     * @summary Deposit collateral
     * @param {StablecoinSystemDepositCollateralTxRequest} stablecoinSystemDepositCollateralTxRequest Deposit collateral transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    depositStableCoinCollateral(stablecoinSystemDepositCollateralTxRequest: StablecoinSystemDepositCollateralTxRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChainActivity, any>>;
    /**
     * exit Gem token (which can be used as collateral) from Vat contract
     * @summary exit Gem token (which can be used as collateral) from Vat contract
     * @param {StablecoinSystemGemexitTxRequest} stablecoinSystemGemexitTxRequest exit Zar token from Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    exitGemTransaction(stablecoinSystemGemexitTxRequest: StablecoinSystemGemexitTxRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChainActivity, any>>;
    /**
     * exit ZAR token from Vat contract
     * @summary exit ZAR token from Vat contract
     * @param {StablecoinSystemZarexitTxRequest} stablecoinSystemZarexitTxRequest exit Zar token from Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    exitZarTransaction(stablecoinSystemZarexitTxRequest: StablecoinSystemZarexitTxRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChainActivity, any>>;
    /**
     * Retrieve a list of all available ilks.
     * @summary Get all Ilks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    getAllIlks(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IlksResponse, any>>;
    /**
     * Get collector data
     * @summary Get collector data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    getCollectorData(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Stats, any>>;
    /**
     * Retrieve an Ilk by providing its name.
     * @summary Get Ilk by name
     * @param {string} name Name of the ILK
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    getIlkByName(name: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Ilk, any>>;
    /**
     *
     * @summary Get a vault by ID
     * @param {number} id Vault ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    getVaultById(id: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Vault, any>>;
    /**
     *
     * @summary Get vault events by ID
     * @param {number} id Vault ID
     * @param {GetVaultEventsByIdTypeEnum} [type] Event type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    getVaultEventsById(id: number, type?: GetVaultEventsByIdTypeEnum, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VaultEventsResponse, any>>;
    /**
     *
     * @summary Get vaults by owner query
     * @param {string} [owner] Ethereum address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    getVaultsByOwner(owner?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VaultsResponse, any>>;
    /**
     * liquidate a vault
     * @summary liquidate a vault
     * @param {StablecoinSystemBarkTxRequest} stablecoinSystemBarkTxRequest Liquidate a Vault transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    liquidateVaultTransaction(stablecoinSystemBarkTxRequest: StablecoinSystemBarkTxRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChainActivity, any>>;
    /**
     * Mint ZAR
     * @summary Mint ZAR
     * @param {StablecoinSystemMintZarTxRequest} stablecoinSystemMintZarTxRequest Mint ZAR transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    mintZarTransaction(stablecoinSystemMintZarTxRequest: StablecoinSystemMintZarTxRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChainActivity, any>>;
    /**
     * Repay ZAR
     * @summary Repay ZAR
     * @param {StablecoinSystemRepayZarTxRequest} stablecoinSystemRepayZarTxRequest Repay ZAR transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    repayZarTransaction(stablecoinSystemRepayZarTxRequest: StablecoinSystemRepayZarTxRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChainActivity, any>>;
    /**
     * reset a auction
     * @summary reset a auction
     * @param {StablecoinSystemRedoTxRequest} stablecoinSystemRedoTxRequest Reset a Auction transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    resetAuctionTransaction(stablecoinSystemRedoTxRequest: StablecoinSystemRedoTxRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChainActivity, any>>;
    /**
     * take a auction
     * @summary take a auction
     * @param {StablecoinSystemTakeTxRequest} stablecoinSystemTakeTxRequest Take a Auction transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    takeAuctionTransaction(stablecoinSystemTakeTxRequest: StablecoinSystemTakeTxRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChainActivity, any>>;
    /**
     * Withdraw collateral
     * @summary Withdraw collateral
     * @param {StablecoinSystemWithdrawCollateralTxRequest} stablecoinSystemWithdrawCollateralTxRequest Withdraw collateral transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    withdrawCollateralTransaction(stablecoinSystemWithdrawCollateralTxRequest: StablecoinSystemWithdrawCollateralTxRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChainActivity, any>>;
}
/**
 * @export
 */
export declare const GetVaultEventsByIdTypeEnum: {
    readonly REPAY: "repay";
    readonly DEPOSIT: "deposit";
    readonly WITHDRAW: "withdraw";
    readonly MINT: "mint";
};
export type GetVaultEventsByIdTypeEnum = typeof GetVaultEventsByIdTypeEnum[keyof typeof GetVaultEventsByIdTypeEnum];
//# sourceMappingURL=stable-coin-system-api.d.ts.map