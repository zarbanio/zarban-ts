/* tslint:disable */
/* eslint-disable */
/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from '../base';
/**
 * StableCoinSystemApi - axios parameter creator
 * @export
 */
export const StableCoinSystemApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * approve and join ZAR token into Vat contract
         * @summary approve and join ZAR token into Vat contract
         * @param {StablecoinSystemZarjoinTxRequest} stablecoinSystemZarjoinTxRequest Approve and join Zar token into Vat contract transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveAndJoinZarTransaction: async (stablecoinSystemZarjoinTxRequest, options = {}) => {
            // verify required parameter 'stablecoinSystemZarjoinTxRequest' is not null or undefined
            assertParamExists('approveAndJoinZarTransaction', 'stablecoinSystemZarjoinTxRequest', stablecoinSystemZarjoinTxRequest);
            const localVarPath = `/v2/stablecoinsystem/auctions/tx/zarjoin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(stablecoinSystemZarjoinTxRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create vault
         * @summary Create vault
         * @param {StablecoinSystemCreateVaultTxRequest} stablecoinSystemCreateVaultTxRequest Create vault transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStableCoinVault: async (stablecoinSystemCreateVaultTxRequest, options = {}) => {
            // verify required parameter 'stablecoinSystemCreateVaultTxRequest' is not null or undefined
            assertParamExists('createStableCoinVault', 'stablecoinSystemCreateVaultTxRequest', stablecoinSystemCreateVaultTxRequest);
            const localVarPath = `/v2/stablecoinsystem/tx/createvault`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(stablecoinSystemCreateVaultTxRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deposit collateral
         * @summary Deposit collateral
         * @param {StablecoinSystemDepositCollateralTxRequest} stablecoinSystemDepositCollateralTxRequest Deposit collateral transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositStableCoinCollateral: async (stablecoinSystemDepositCollateralTxRequest, options = {}) => {
            // verify required parameter 'stablecoinSystemDepositCollateralTxRequest' is not null or undefined
            assertParamExists('depositStableCoinCollateral', 'stablecoinSystemDepositCollateralTxRequest', stablecoinSystemDepositCollateralTxRequest);
            const localVarPath = `/v2/stablecoinsystem/tx/depositcollateral`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(stablecoinSystemDepositCollateralTxRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * exit Gem token (which can be used as collateral) from Vat contract
         * @summary exit Gem token (which can be used as collateral) from Vat contract
         * @param {StablecoinSystemGemexitTxRequest} stablecoinSystemGemexitTxRequest exit Zar token from Vat contract transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exitGemTransaction: async (stablecoinSystemGemexitTxRequest, options = {}) => {
            // verify required parameter 'stablecoinSystemGemexitTxRequest' is not null or undefined
            assertParamExists('exitGemTransaction', 'stablecoinSystemGemexitTxRequest', stablecoinSystemGemexitTxRequest);
            const localVarPath = `/v2/stablecoinsystem/auctions/tx/gemexit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(stablecoinSystemGemexitTxRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * exit ZAR token from Vat contract
         * @summary exit ZAR token from Vat contract
         * @param {StablecoinSystemZarexitTxRequest} stablecoinSystemZarexitTxRequest exit Zar token from Vat contract transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exitZarTransaction: async (stablecoinSystemZarexitTxRequest, options = {}) => {
            // verify required parameter 'stablecoinSystemZarexitTxRequest' is not null or undefined
            assertParamExists('exitZarTransaction', 'stablecoinSystemZarexitTxRequest', stablecoinSystemZarexitTxRequest);
            const localVarPath = `/v2/stablecoinsystem/auctions/tx/zarexit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(stablecoinSystemZarexitTxRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all available ilks.
         * @summary Get all Ilks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllIlks: async (options = {}) => {
            const localVarPath = `/v2/ilks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get collector data
         * @summary Get collector data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectorData: async (options = {}) => {
            const localVarPath = `/v2/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an Ilk by providing its name.
         * @summary Get Ilk by name
         * @param {string} name Name of the ILK
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIlkByName: async (name, options = {}) => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getIlkByName', 'name', name);
            const localVarPath = `/v2/ilks/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get a vault by ID
         * @param {number} id Vault ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultById: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getVaultById', 'id', id);
            const localVarPath = `/v2/vaults/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get vault events by ID
         * @param {number} id Vault ID
         * @param {GetVaultEventsByIdTypeEnum} [type] Event type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultEventsById: async (id, type, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getVaultEventsById', 'id', id);
            const localVarPath = `/v2/vaults/{id}/events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get vaults by owner query
         * @param {string} [owner] Ethereum address of the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultsByOwner: async (owner, options = {}) => {
            const localVarPath = `/v2/vaults`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * liquidate a vault
         * @summary liquidate a vault
         * @param {StablecoinSystemBarkTxRequest} stablecoinSystemBarkTxRequest Liquidate a Vault transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liquidateVaultTransaction: async (stablecoinSystemBarkTxRequest, options = {}) => {
            // verify required parameter 'stablecoinSystemBarkTxRequest' is not null or undefined
            assertParamExists('liquidateVaultTransaction', 'stablecoinSystemBarkTxRequest', stablecoinSystemBarkTxRequest);
            const localVarPath = `/v2/stablecoinsystem/tx/bark`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(stablecoinSystemBarkTxRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mint ZAR
         * @summary Mint ZAR
         * @param {StablecoinSystemMintZarTxRequest} stablecoinSystemMintZarTxRequest Mint ZAR transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintZarTransaction: async (stablecoinSystemMintZarTxRequest, options = {}) => {
            // verify required parameter 'stablecoinSystemMintZarTxRequest' is not null or undefined
            assertParamExists('mintZarTransaction', 'stablecoinSystemMintZarTxRequest', stablecoinSystemMintZarTxRequest);
            const localVarPath = `/v2/stablecoinsystem/tx/mintzar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(stablecoinSystemMintZarTxRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Repay ZAR
         * @summary Repay ZAR
         * @param {StablecoinSystemRepayZarTxRequest} stablecoinSystemRepayZarTxRequest Repay ZAR transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repayZarTransaction: async (stablecoinSystemRepayZarTxRequest, options = {}) => {
            // verify required parameter 'stablecoinSystemRepayZarTxRequest' is not null or undefined
            assertParamExists('repayZarTransaction', 'stablecoinSystemRepayZarTxRequest', stablecoinSystemRepayZarTxRequest);
            const localVarPath = `/v2/stablecoinsystem/tx/repayzar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(stablecoinSystemRepayZarTxRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * reset a auction
         * @summary reset a auction
         * @param {StablecoinSystemRedoTxRequest} stablecoinSystemRedoTxRequest Reset a Auction transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetAuctionTransaction: async (stablecoinSystemRedoTxRequest, options = {}) => {
            // verify required parameter 'stablecoinSystemRedoTxRequest' is not null or undefined
            assertParamExists('resetAuctionTransaction', 'stablecoinSystemRedoTxRequest', stablecoinSystemRedoTxRequest);
            const localVarPath = `/v2/stablecoinsystem/auctions/tx/redo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(stablecoinSystemRedoTxRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * take a auction
         * @summary take a auction
         * @param {StablecoinSystemTakeTxRequest} stablecoinSystemTakeTxRequest Take a Auction transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takeAuctionTransaction: async (stablecoinSystemTakeTxRequest, options = {}) => {
            // verify required parameter 'stablecoinSystemTakeTxRequest' is not null or undefined
            assertParamExists('takeAuctionTransaction', 'stablecoinSystemTakeTxRequest', stablecoinSystemTakeTxRequest);
            const localVarPath = `/v2/stablecoinsystem/auctions/tx/take`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(stablecoinSystemTakeTxRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Withdraw collateral
         * @summary Withdraw collateral
         * @param {StablecoinSystemWithdrawCollateralTxRequest} stablecoinSystemWithdrawCollateralTxRequest Withdraw collateral transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdrawCollateralTransaction: async (stablecoinSystemWithdrawCollateralTxRequest, options = {}) => {
            // verify required parameter 'stablecoinSystemWithdrawCollateralTxRequest' is not null or undefined
            assertParamExists('withdrawCollateralTransaction', 'stablecoinSystemWithdrawCollateralTxRequest', stablecoinSystemWithdrawCollateralTxRequest);
            const localVarPath = `/v2/stablecoinsystem/tx/withdrawcollateral`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(stablecoinSystemWithdrawCollateralTxRequest, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * StableCoinSystemApi - functional programming interface
 * @export
 */
export const StableCoinSystemApiFp = function (configuration) {
    const localVarAxiosParamCreator = StableCoinSystemApiAxiosParamCreator(configuration);
    return {
        /**
         * approve and join ZAR token into Vat contract
         * @summary approve and join ZAR token into Vat contract
         * @param {StablecoinSystemZarjoinTxRequest} stablecoinSystemZarjoinTxRequest Approve and join Zar token into Vat contract transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveAndJoinZarTransaction(stablecoinSystemZarjoinTxRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveAndJoinZarTransaction(stablecoinSystemZarjoinTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.approveAndJoinZarTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create vault
         * @summary Create vault
         * @param {StablecoinSystemCreateVaultTxRequest} stablecoinSystemCreateVaultTxRequest Create vault transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStableCoinVault(stablecoinSystemCreateVaultTxRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStableCoinVault(stablecoinSystemCreateVaultTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.createStableCoinVault']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deposit collateral
         * @summary Deposit collateral
         * @param {StablecoinSystemDepositCollateralTxRequest} stablecoinSystemDepositCollateralTxRequest Deposit collateral transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async depositStableCoinCollateral(stablecoinSystemDepositCollateralTxRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.depositStableCoinCollateral(stablecoinSystemDepositCollateralTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.depositStableCoinCollateral']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * exit Gem token (which can be used as collateral) from Vat contract
         * @summary exit Gem token (which can be used as collateral) from Vat contract
         * @param {StablecoinSystemGemexitTxRequest} stablecoinSystemGemexitTxRequest exit Zar token from Vat contract transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exitGemTransaction(stablecoinSystemGemexitTxRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exitGemTransaction(stablecoinSystemGemexitTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.exitGemTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * exit ZAR token from Vat contract
         * @summary exit ZAR token from Vat contract
         * @param {StablecoinSystemZarexitTxRequest} stablecoinSystemZarexitTxRequest exit Zar token from Vat contract transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exitZarTransaction(stablecoinSystemZarexitTxRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exitZarTransaction(stablecoinSystemZarexitTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.exitZarTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of all available ilks.
         * @summary Get all Ilks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllIlks(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllIlks(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.getAllIlks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get collector data
         * @summary Get collector data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCollectorData(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCollectorData(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.getCollectorData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve an Ilk by providing its name.
         * @summary Get Ilk by name
         * @param {string} name Name of the ILK
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIlkByName(name, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIlkByName(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.getIlkByName']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get a vault by ID
         * @param {number} id Vault ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaultById(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaultById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.getVaultById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get vault events by ID
         * @param {number} id Vault ID
         * @param {GetVaultEventsByIdTypeEnum} [type] Event type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaultEventsById(id, type, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaultEventsById(id, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.getVaultEventsById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get vaults by owner query
         * @param {string} [owner] Ethereum address of the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaultsByOwner(owner, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaultsByOwner(owner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.getVaultsByOwner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * liquidate a vault
         * @summary liquidate a vault
         * @param {StablecoinSystemBarkTxRequest} stablecoinSystemBarkTxRequest Liquidate a Vault transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async liquidateVaultTransaction(stablecoinSystemBarkTxRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.liquidateVaultTransaction(stablecoinSystemBarkTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.liquidateVaultTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Mint ZAR
         * @summary Mint ZAR
         * @param {StablecoinSystemMintZarTxRequest} stablecoinSystemMintZarTxRequest Mint ZAR transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mintZarTransaction(stablecoinSystemMintZarTxRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mintZarTransaction(stablecoinSystemMintZarTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.mintZarTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Repay ZAR
         * @summary Repay ZAR
         * @param {StablecoinSystemRepayZarTxRequest} stablecoinSystemRepayZarTxRequest Repay ZAR transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async repayZarTransaction(stablecoinSystemRepayZarTxRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.repayZarTransaction(stablecoinSystemRepayZarTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.repayZarTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * reset a auction
         * @summary reset a auction
         * @param {StablecoinSystemRedoTxRequest} stablecoinSystemRedoTxRequest Reset a Auction transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetAuctionTransaction(stablecoinSystemRedoTxRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetAuctionTransaction(stablecoinSystemRedoTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.resetAuctionTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * take a auction
         * @summary take a auction
         * @param {StablecoinSystemTakeTxRequest} stablecoinSystemTakeTxRequest Take a Auction transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async takeAuctionTransaction(stablecoinSystemTakeTxRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.takeAuctionTransaction(stablecoinSystemTakeTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.takeAuctionTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Withdraw collateral
         * @summary Withdraw collateral
         * @param {StablecoinSystemWithdrawCollateralTxRequest} stablecoinSystemWithdrawCollateralTxRequest Withdraw collateral transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async withdrawCollateralTransaction(stablecoinSystemWithdrawCollateralTxRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.withdrawCollateralTransaction(stablecoinSystemWithdrawCollateralTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StableCoinSystemApi.withdrawCollateralTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
/**
 * StableCoinSystemApi - factory interface
 * @export
 */
export const StableCoinSystemApiFactory = function (configuration, basePath, axios) {
    const localVarFp = StableCoinSystemApiFp(configuration);
    return {
        /**
         * approve and join ZAR token into Vat contract
         * @summary approve and join ZAR token into Vat contract
         * @param {StablecoinSystemZarjoinTxRequest} stablecoinSystemZarjoinTxRequest Approve and join Zar token into Vat contract transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveAndJoinZarTransaction(stablecoinSystemZarjoinTxRequest, options) {
            return localVarFp.approveAndJoinZarTransaction(stablecoinSystemZarjoinTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create vault
         * @summary Create vault
         * @param {StablecoinSystemCreateVaultTxRequest} stablecoinSystemCreateVaultTxRequest Create vault transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStableCoinVault(stablecoinSystemCreateVaultTxRequest, options) {
            return localVarFp.createStableCoinVault(stablecoinSystemCreateVaultTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deposit collateral
         * @summary Deposit collateral
         * @param {StablecoinSystemDepositCollateralTxRequest} stablecoinSystemDepositCollateralTxRequest Deposit collateral transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositStableCoinCollateral(stablecoinSystemDepositCollateralTxRequest, options) {
            return localVarFp.depositStableCoinCollateral(stablecoinSystemDepositCollateralTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * exit Gem token (which can be used as collateral) from Vat contract
         * @summary exit Gem token (which can be used as collateral) from Vat contract
         * @param {StablecoinSystemGemexitTxRequest} stablecoinSystemGemexitTxRequest exit Zar token from Vat contract transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exitGemTransaction(stablecoinSystemGemexitTxRequest, options) {
            return localVarFp.exitGemTransaction(stablecoinSystemGemexitTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * exit ZAR token from Vat contract
         * @summary exit ZAR token from Vat contract
         * @param {StablecoinSystemZarexitTxRequest} stablecoinSystemZarexitTxRequest exit Zar token from Vat contract transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exitZarTransaction(stablecoinSystemZarexitTxRequest, options) {
            return localVarFp.exitZarTransaction(stablecoinSystemZarexitTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all available ilks.
         * @summary Get all Ilks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllIlks(options) {
            return localVarFp.getAllIlks(options).then((request) => request(axios, basePath));
        },
        /**
         * Get collector data
         * @summary Get collector data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCollectorData(options) {
            return localVarFp.getCollectorData(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an Ilk by providing its name.
         * @summary Get Ilk by name
         * @param {string} name Name of the ILK
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIlkByName(name, options) {
            return localVarFp.getIlkByName(name, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a vault by ID
         * @param {number} id Vault ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultById(id, options) {
            return localVarFp.getVaultById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get vault events by ID
         * @param {number} id Vault ID
         * @param {GetVaultEventsByIdTypeEnum} [type] Event type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultEventsById(id, type, options) {
            return localVarFp.getVaultEventsById(id, type, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get vaults by owner query
         * @param {string} [owner] Ethereum address of the owner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultsByOwner(owner, options) {
            return localVarFp.getVaultsByOwner(owner, options).then((request) => request(axios, basePath));
        },
        /**
         * liquidate a vault
         * @summary liquidate a vault
         * @param {StablecoinSystemBarkTxRequest} stablecoinSystemBarkTxRequest Liquidate a Vault transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        liquidateVaultTransaction(stablecoinSystemBarkTxRequest, options) {
            return localVarFp.liquidateVaultTransaction(stablecoinSystemBarkTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Mint ZAR
         * @summary Mint ZAR
         * @param {StablecoinSystemMintZarTxRequest} stablecoinSystemMintZarTxRequest Mint ZAR transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintZarTransaction(stablecoinSystemMintZarTxRequest, options) {
            return localVarFp.mintZarTransaction(stablecoinSystemMintZarTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Repay ZAR
         * @summary Repay ZAR
         * @param {StablecoinSystemRepayZarTxRequest} stablecoinSystemRepayZarTxRequest Repay ZAR transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        repayZarTransaction(stablecoinSystemRepayZarTxRequest, options) {
            return localVarFp.repayZarTransaction(stablecoinSystemRepayZarTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * reset a auction
         * @summary reset a auction
         * @param {StablecoinSystemRedoTxRequest} stablecoinSystemRedoTxRequest Reset a Auction transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetAuctionTransaction(stablecoinSystemRedoTxRequest, options) {
            return localVarFp.resetAuctionTransaction(stablecoinSystemRedoTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * take a auction
         * @summary take a auction
         * @param {StablecoinSystemTakeTxRequest} stablecoinSystemTakeTxRequest Take a Auction transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takeAuctionTransaction(stablecoinSystemTakeTxRequest, options) {
            return localVarFp.takeAuctionTransaction(stablecoinSystemTakeTxRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Withdraw collateral
         * @summary Withdraw collateral
         * @param {StablecoinSystemWithdrawCollateralTxRequest} stablecoinSystemWithdrawCollateralTxRequest Withdraw collateral transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdrawCollateralTransaction(stablecoinSystemWithdrawCollateralTxRequest, options) {
            return localVarFp.withdrawCollateralTransaction(stablecoinSystemWithdrawCollateralTxRequest, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * StableCoinSystemApi - object-oriented interface
 * @export
 * @class StableCoinSystemApi
 * @extends {BaseAPI}
 */
export class StableCoinSystemApi extends BaseAPI {
    /**
     * approve and join ZAR token into Vat contract
     * @summary approve and join ZAR token into Vat contract
     * @param {StablecoinSystemZarjoinTxRequest} stablecoinSystemZarjoinTxRequest Approve and join Zar token into Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    approveAndJoinZarTransaction(stablecoinSystemZarjoinTxRequest, options) {
        return StableCoinSystemApiFp(this.configuration).approveAndJoinZarTransaction(stablecoinSystemZarjoinTxRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create vault
     * @summary Create vault
     * @param {StablecoinSystemCreateVaultTxRequest} stablecoinSystemCreateVaultTxRequest Create vault transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    createStableCoinVault(stablecoinSystemCreateVaultTxRequest, options) {
        return StableCoinSystemApiFp(this.configuration).createStableCoinVault(stablecoinSystemCreateVaultTxRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deposit collateral
     * @summary Deposit collateral
     * @param {StablecoinSystemDepositCollateralTxRequest} stablecoinSystemDepositCollateralTxRequest Deposit collateral transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    depositStableCoinCollateral(stablecoinSystemDepositCollateralTxRequest, options) {
        return StableCoinSystemApiFp(this.configuration).depositStableCoinCollateral(stablecoinSystemDepositCollateralTxRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * exit Gem token (which can be used as collateral) from Vat contract
     * @summary exit Gem token (which can be used as collateral) from Vat contract
     * @param {StablecoinSystemGemexitTxRequest} stablecoinSystemGemexitTxRequest exit Zar token from Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    exitGemTransaction(stablecoinSystemGemexitTxRequest, options) {
        return StableCoinSystemApiFp(this.configuration).exitGemTransaction(stablecoinSystemGemexitTxRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * exit ZAR token from Vat contract
     * @summary exit ZAR token from Vat contract
     * @param {StablecoinSystemZarexitTxRequest} stablecoinSystemZarexitTxRequest exit Zar token from Vat contract transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    exitZarTransaction(stablecoinSystemZarexitTxRequest, options) {
        return StableCoinSystemApiFp(this.configuration).exitZarTransaction(stablecoinSystemZarexitTxRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve a list of all available ilks.
     * @summary Get all Ilks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    getAllIlks(options) {
        return StableCoinSystemApiFp(this.configuration).getAllIlks(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get collector data
     * @summary Get collector data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    getCollectorData(options) {
        return StableCoinSystemApiFp(this.configuration).getCollectorData(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieve an Ilk by providing its name.
     * @summary Get Ilk by name
     * @param {string} name Name of the ILK
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    getIlkByName(name, options) {
        return StableCoinSystemApiFp(this.configuration).getIlkByName(name, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a vault by ID
     * @param {number} id Vault ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    getVaultById(id, options) {
        return StableCoinSystemApiFp(this.configuration).getVaultById(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get vault events by ID
     * @param {number} id Vault ID
     * @param {GetVaultEventsByIdTypeEnum} [type] Event type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    getVaultEventsById(id, type, options) {
        return StableCoinSystemApiFp(this.configuration).getVaultEventsById(id, type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get vaults by owner query
     * @param {string} [owner] Ethereum address of the owner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    getVaultsByOwner(owner, options) {
        return StableCoinSystemApiFp(this.configuration).getVaultsByOwner(owner, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * liquidate a vault
     * @summary liquidate a vault
     * @param {StablecoinSystemBarkTxRequest} stablecoinSystemBarkTxRequest Liquidate a Vault transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    liquidateVaultTransaction(stablecoinSystemBarkTxRequest, options) {
        return StableCoinSystemApiFp(this.configuration).liquidateVaultTransaction(stablecoinSystemBarkTxRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Mint ZAR
     * @summary Mint ZAR
     * @param {StablecoinSystemMintZarTxRequest} stablecoinSystemMintZarTxRequest Mint ZAR transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    mintZarTransaction(stablecoinSystemMintZarTxRequest, options) {
        return StableCoinSystemApiFp(this.configuration).mintZarTransaction(stablecoinSystemMintZarTxRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Repay ZAR
     * @summary Repay ZAR
     * @param {StablecoinSystemRepayZarTxRequest} stablecoinSystemRepayZarTxRequest Repay ZAR transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    repayZarTransaction(stablecoinSystemRepayZarTxRequest, options) {
        return StableCoinSystemApiFp(this.configuration).repayZarTransaction(stablecoinSystemRepayZarTxRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * reset a auction
     * @summary reset a auction
     * @param {StablecoinSystemRedoTxRequest} stablecoinSystemRedoTxRequest Reset a Auction transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    resetAuctionTransaction(stablecoinSystemRedoTxRequest, options) {
        return StableCoinSystemApiFp(this.configuration).resetAuctionTransaction(stablecoinSystemRedoTxRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * take a auction
     * @summary take a auction
     * @param {StablecoinSystemTakeTxRequest} stablecoinSystemTakeTxRequest Take a Auction transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    takeAuctionTransaction(stablecoinSystemTakeTxRequest, options) {
        return StableCoinSystemApiFp(this.configuration).takeAuctionTransaction(stablecoinSystemTakeTxRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Withdraw collateral
     * @summary Withdraw collateral
     * @param {StablecoinSystemWithdrawCollateralTxRequest} stablecoinSystemWithdrawCollateralTxRequest Withdraw collateral transaction request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StableCoinSystemApi
     */
    withdrawCollateralTransaction(stablecoinSystemWithdrawCollateralTxRequest, options) {
        return StableCoinSystemApiFp(this.configuration).withdrawCollateralTransaction(stablecoinSystemWithdrawCollateralTxRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * @export
 */
export const GetVaultEventsByIdTypeEnum = {
    REPAY: 'repay',
    DEPOSIT: 'deposit',
    WITHDRAW: 'withdraw',
    MINT: 'mint'
};
//# sourceMappingURL=stable-coin-system-api.js.map