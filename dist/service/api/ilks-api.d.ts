/**
 * Zarban API
 * API for Zarban services.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@zarban.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { Ilk } from '../model';
import type { IlksResponse } from '../model';
/**
 * IlksApi - axios parameter creator
 * @export
 */
export declare const IlksApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Retrieve a list of all available ilks.
     * @summary Get all Ilks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllIlks: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve an Ilk by providing its name.
     * @summary Get Ilk by name
     * @param {string} name Name of the ILK
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIlkByName: (name: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * IlksApi - functional programming interface
 * @export
 */
export declare const IlksApiFp: (configuration?: Configuration) => {
    /**
     * Retrieve a list of all available ilks.
     * @summary Get all Ilks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllIlks(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IlksResponse>>;
    /**
     * Retrieve an Ilk by providing its name.
     * @summary Get Ilk by name
     * @param {string} name Name of the ILK
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIlkByName(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ilk>>;
};
/**
 * IlksApi - factory interface
 * @export
 */
export declare const IlksApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieve a list of all available ilks.
     * @summary Get all Ilks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllIlks(options?: RawAxiosRequestConfig): AxiosPromise<IlksResponse>;
    /**
     * Retrieve an Ilk by providing its name.
     * @summary Get Ilk by name
     * @param {string} name Name of the ILK
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getIlkByName(name: string, options?: RawAxiosRequestConfig): AxiosPromise<Ilk>;
};
/**
 * IlksApi - interface
 * @export
 * @interface IlksApi
 */
export interface IlksApiInterface {
    /**
     * Retrieve a list of all available ilks.
     * @summary Get all Ilks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IlksApiInterface
     */
    getAllIlks(options?: RawAxiosRequestConfig): AxiosPromise<IlksResponse>;
    /**
     * Retrieve an Ilk by providing its name.
     * @summary Get Ilk by name
     * @param {string} name Name of the ILK
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IlksApiInterface
     */
    getIlkByName(name: string, options?: RawAxiosRequestConfig): AxiosPromise<Ilk>;
}
/**
 * IlksApi - object-oriented interface
 * @export
 * @class IlksApi
 * @extends {BaseAPI}
 */
export declare class IlksApi extends BaseAPI implements IlksApiInterface {
    /**
     * Retrieve a list of all available ilks.
     * @summary Get all Ilks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IlksApi
     */
    getAllIlks(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<IlksResponse, any>>;
    /**
     * Retrieve an Ilk by providing its name.
     * @summary Get Ilk by name
     * @param {string} name Name of the ILK
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IlksApi
     */
    getIlkByName(name: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Ilk, any>>;
}
